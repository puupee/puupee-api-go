/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.17.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
)

// checks if the UpdateFeaturesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateFeaturesDto{}

// UpdateFeaturesDto struct for UpdateFeaturesDto
type UpdateFeaturesDto struct {
	Features []UpdateFeatureDto `json:"features,omitempty"`
}

// NewUpdateFeaturesDto instantiates a new UpdateFeaturesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFeaturesDto() *UpdateFeaturesDto {
	this := UpdateFeaturesDto{}
	return &this
}

// NewUpdateFeaturesDtoWithDefaults instantiates a new UpdateFeaturesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFeaturesDtoWithDefaults() *UpdateFeaturesDto {
	this := UpdateFeaturesDto{}
	return &this
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *UpdateFeaturesDto) GetFeatures() []UpdateFeatureDto {
	if o == nil || IsNil(o.Features) {
		var ret []UpdateFeatureDto
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFeaturesDto) GetFeaturesOk() ([]UpdateFeatureDto, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *UpdateFeaturesDto) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []UpdateFeatureDto and assigns it to the Features field.
func (o *UpdateFeaturesDto) SetFeatures(v []UpdateFeatureDto) {
	o.Features = v
}

func (o UpdateFeaturesDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateFeaturesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	return toSerialize, nil
}

type NullableUpdateFeaturesDto struct {
	value *UpdateFeaturesDto
	isSet bool
}

func (v NullableUpdateFeaturesDto) Get() *UpdateFeaturesDto {
	return v.value
}

func (v *NullableUpdateFeaturesDto) Set(val *UpdateFeaturesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFeaturesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFeaturesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFeaturesDto(val *UpdateFeaturesDto) *NullableUpdateFeaturesDto {
	return &NullableUpdateFeaturesDto{value: val, isSet: true}
}

func (v NullableUpdateFeaturesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFeaturesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


