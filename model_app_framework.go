/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"fmt"
)

// AppFramework 技术框架
type AppFramework string

// List of AppFramework
const (
	APPFRAMEWORK_FLUTTER AppFramework = "Flutter"
	APPFRAMEWORK_REACT_NATIVE AppFramework = "ReactNative"
	APPFRAMEWORK_REACT AppFramework = "React"
	APPFRAMEWORK_NATIVE_IOS AppFramework = "NativeIOS"
	APPFRAMEWORK_NATIVE_ANDROID AppFramework = "NativeAndroid"
	APPFRAMEWORK_NATIVE_WINDOWS AppFramework = "NativeWindows"
	APPFRAMEWORK_NATIVE_MAC_OS AppFramework = "NativeMacOS"
	APPFRAMEWORK_IONIC AppFramework = "Ionic"
	APPFRAMEWORK_ASP_NET_CORE AppFramework = "AspNetCore"
	APPFRAMEWORK_OTHER AppFramework = "Other"
	APPFRAMEWORK_GOLANG AppFramework = "Golang"
)

// All allowed values of AppFramework enum
var AllowedAppFrameworkEnumValues = []AppFramework{
	"Flutter",
	"ReactNative",
	"React",
	"NativeIOS",
	"NativeAndroid",
	"NativeWindows",
	"NativeMacOS",
	"Ionic",
	"AspNetCore",
	"Other",
	"Golang",
}

func (v *AppFramework) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppFramework(value)
	for _, existing := range AllowedAppFrameworkEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppFramework", value)
}

// NewAppFrameworkFromValue returns a pointer to a valid AppFramework
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppFrameworkFromValue(v string) (*AppFramework, error) {
	ev := AppFramework(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppFramework: valid values are %v", v, AllowedAppFrameworkEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppFramework) IsValid() bool {
	for _, existing := range AllowedAppFrameworkEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppFramework value
func (v AppFramework) Ptr() *AppFramework {
	return &v
}

type NullableAppFramework struct {
	value *AppFramework
	isSet bool
}

func (v NullableAppFramework) Get() *AppFramework {
	return v.value
}

func (v *NullableAppFramework) Set(val *AppFramework) {
	v.value = val
	v.isSet = true
}

func (v NullableAppFramework) IsSet() bool {
	return v.isSet
}

func (v *NullableAppFramework) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppFramework(val *AppFramework) *NullableAppFramework {
	return &NullableAppFramework{value: val, isSet: true}
}

func (v NullableAppFramework) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppFramework) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

