/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
)

// checks if the BindDeviceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BindDeviceDto{}

// BindDeviceDto struct for BindDeviceDto
type BindDeviceDto struct {
	Token NullableString `json:"token,omitempty"`
	TpnsToken NullableString `json:"tpnsToken,omitempty"`
	IsPhysicalDevice *bool `json:"isPhysicalDevice,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Platform NullableString `json:"platform,omitempty"`
	Brand NullableString `json:"brand,omitempty"`
	SystemVersion NullableString `json:"systemVersion,omitempty"`
}

// NewBindDeviceDto instantiates a new BindDeviceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBindDeviceDto() *BindDeviceDto {
	this := BindDeviceDto{}
	return &this
}

// NewBindDeviceDtoWithDefaults instantiates a new BindDeviceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBindDeviceDtoWithDefaults() *BindDeviceDto {
	this := BindDeviceDto{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BindDeviceDto) GetToken() string {
	if o == nil || IsNil(o.Token.Get()) {
		var ret string
		return ret
	}
	return *o.Token.Get()
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BindDeviceDto) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Token.Get(), o.Token.IsSet()
}

// HasToken returns a boolean if a field has been set.
func (o *BindDeviceDto) HasToken() bool {
	if o != nil && o.Token.IsSet() {
		return true
	}

	return false
}

// SetToken gets a reference to the given NullableString and assigns it to the Token field.
func (o *BindDeviceDto) SetToken(v string) {
	o.Token.Set(&v)
}
// SetTokenNil sets the value for Token to be an explicit nil
func (o *BindDeviceDto) SetTokenNil() {
	o.Token.Set(nil)
}

// UnsetToken ensures that no value is present for Token, not even an explicit nil
func (o *BindDeviceDto) UnsetToken() {
	o.Token.Unset()
}

// GetTpnsToken returns the TpnsToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BindDeviceDto) GetTpnsToken() string {
	if o == nil || IsNil(o.TpnsToken.Get()) {
		var ret string
		return ret
	}
	return *o.TpnsToken.Get()
}

// GetTpnsTokenOk returns a tuple with the TpnsToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BindDeviceDto) GetTpnsTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TpnsToken.Get(), o.TpnsToken.IsSet()
}

// HasTpnsToken returns a boolean if a field has been set.
func (o *BindDeviceDto) HasTpnsToken() bool {
	if o != nil && o.TpnsToken.IsSet() {
		return true
	}

	return false
}

// SetTpnsToken gets a reference to the given NullableString and assigns it to the TpnsToken field.
func (o *BindDeviceDto) SetTpnsToken(v string) {
	o.TpnsToken.Set(&v)
}
// SetTpnsTokenNil sets the value for TpnsToken to be an explicit nil
func (o *BindDeviceDto) SetTpnsTokenNil() {
	o.TpnsToken.Set(nil)
}

// UnsetTpnsToken ensures that no value is present for TpnsToken, not even an explicit nil
func (o *BindDeviceDto) UnsetTpnsToken() {
	o.TpnsToken.Unset()
}

// GetIsPhysicalDevice returns the IsPhysicalDevice field value if set, zero value otherwise.
func (o *BindDeviceDto) GetIsPhysicalDevice() bool {
	if o == nil || IsNil(o.IsPhysicalDevice) {
		var ret bool
		return ret
	}
	return *o.IsPhysicalDevice
}

// GetIsPhysicalDeviceOk returns a tuple with the IsPhysicalDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BindDeviceDto) GetIsPhysicalDeviceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPhysicalDevice) {
		return nil, false
	}
	return o.IsPhysicalDevice, true
}

// HasIsPhysicalDevice returns a boolean if a field has been set.
func (o *BindDeviceDto) HasIsPhysicalDevice() bool {
	if o != nil && !IsNil(o.IsPhysicalDevice) {
		return true
	}

	return false
}

// SetIsPhysicalDevice gets a reference to the given bool and assigns it to the IsPhysicalDevice field.
func (o *BindDeviceDto) SetIsPhysicalDevice(v bool) {
	o.IsPhysicalDevice = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BindDeviceDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BindDeviceDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *BindDeviceDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *BindDeviceDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *BindDeviceDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *BindDeviceDto) UnsetName() {
	o.Name.Unset()
}

// GetPlatform returns the Platform field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BindDeviceDto) GetPlatform() string {
	if o == nil || IsNil(o.Platform.Get()) {
		var ret string
		return ret
	}
	return *o.Platform.Get()
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BindDeviceDto) GetPlatformOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Platform.Get(), o.Platform.IsSet()
}

// HasPlatform returns a boolean if a field has been set.
func (o *BindDeviceDto) HasPlatform() bool {
	if o != nil && o.Platform.IsSet() {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given NullableString and assigns it to the Platform field.
func (o *BindDeviceDto) SetPlatform(v string) {
	o.Platform.Set(&v)
}
// SetPlatformNil sets the value for Platform to be an explicit nil
func (o *BindDeviceDto) SetPlatformNil() {
	o.Platform.Set(nil)
}

// UnsetPlatform ensures that no value is present for Platform, not even an explicit nil
func (o *BindDeviceDto) UnsetPlatform() {
	o.Platform.Unset()
}

// GetBrand returns the Brand field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BindDeviceDto) GetBrand() string {
	if o == nil || IsNil(o.Brand.Get()) {
		var ret string
		return ret
	}
	return *o.Brand.Get()
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BindDeviceDto) GetBrandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Brand.Get(), o.Brand.IsSet()
}

// HasBrand returns a boolean if a field has been set.
func (o *BindDeviceDto) HasBrand() bool {
	if o != nil && o.Brand.IsSet() {
		return true
	}

	return false
}

// SetBrand gets a reference to the given NullableString and assigns it to the Brand field.
func (o *BindDeviceDto) SetBrand(v string) {
	o.Brand.Set(&v)
}
// SetBrandNil sets the value for Brand to be an explicit nil
func (o *BindDeviceDto) SetBrandNil() {
	o.Brand.Set(nil)
}

// UnsetBrand ensures that no value is present for Brand, not even an explicit nil
func (o *BindDeviceDto) UnsetBrand() {
	o.Brand.Unset()
}

// GetSystemVersion returns the SystemVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BindDeviceDto) GetSystemVersion() string {
	if o == nil || IsNil(o.SystemVersion.Get()) {
		var ret string
		return ret
	}
	return *o.SystemVersion.Get()
}

// GetSystemVersionOk returns a tuple with the SystemVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BindDeviceDto) GetSystemVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SystemVersion.Get(), o.SystemVersion.IsSet()
}

// HasSystemVersion returns a boolean if a field has been set.
func (o *BindDeviceDto) HasSystemVersion() bool {
	if o != nil && o.SystemVersion.IsSet() {
		return true
	}

	return false
}

// SetSystemVersion gets a reference to the given NullableString and assigns it to the SystemVersion field.
func (o *BindDeviceDto) SetSystemVersion(v string) {
	o.SystemVersion.Set(&v)
}
// SetSystemVersionNil sets the value for SystemVersion to be an explicit nil
func (o *BindDeviceDto) SetSystemVersionNil() {
	o.SystemVersion.Set(nil)
}

// UnsetSystemVersion ensures that no value is present for SystemVersion, not even an explicit nil
func (o *BindDeviceDto) UnsetSystemVersion() {
	o.SystemVersion.Unset()
}

func (o BindDeviceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BindDeviceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Token.IsSet() {
		toSerialize["token"] = o.Token.Get()
	}
	if o.TpnsToken.IsSet() {
		toSerialize["tpnsToken"] = o.TpnsToken.Get()
	}
	if !IsNil(o.IsPhysicalDevice) {
		toSerialize["isPhysicalDevice"] = o.IsPhysicalDevice
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Platform.IsSet() {
		toSerialize["platform"] = o.Platform.Get()
	}
	if o.Brand.IsSet() {
		toSerialize["brand"] = o.Brand.Get()
	}
	if o.SystemVersion.IsSet() {
		toSerialize["systemVersion"] = o.SystemVersion.Get()
	}
	return toSerialize, nil
}

type NullableBindDeviceDto struct {
	value *BindDeviceDto
	isSet bool
}

func (v NullableBindDeviceDto) Get() *BindDeviceDto {
	return v.value
}

func (v *NullableBindDeviceDto) Set(val *BindDeviceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableBindDeviceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableBindDeviceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBindDeviceDto(val *BindDeviceDto) *NullableBindDeviceDto {
	return &NullableBindDeviceDto{value: val, isSet: true}
}

func (v NullableBindDeviceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBindDeviceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


