/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.17.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
)

// checks if the BindDeviceDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BindDeviceDto{}

// BindDeviceDto struct for BindDeviceDto
type BindDeviceDto struct {
	Token *string `json:"token,omitempty"`
	TpnsToken *string `json:"tpnsToken,omitempty"`
	IsPhysicalDevice *bool `json:"isPhysicalDevice,omitempty"`
	Name *string `json:"name,omitempty"`
	Platform *AppPlatform `json:"platform,omitempty"`
	Brand *string `json:"brand,omitempty"`
	SystemVersion *string `json:"systemVersion,omitempty"`
}

// NewBindDeviceDto instantiates a new BindDeviceDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBindDeviceDto() *BindDeviceDto {
	this := BindDeviceDto{}
	return &this
}

// NewBindDeviceDtoWithDefaults instantiates a new BindDeviceDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBindDeviceDtoWithDefaults() *BindDeviceDto {
	this := BindDeviceDto{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *BindDeviceDto) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BindDeviceDto) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *BindDeviceDto) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *BindDeviceDto) SetToken(v string) {
	o.Token = &v
}

// GetTpnsToken returns the TpnsToken field value if set, zero value otherwise.
func (o *BindDeviceDto) GetTpnsToken() string {
	if o == nil || IsNil(o.TpnsToken) {
		var ret string
		return ret
	}
	return *o.TpnsToken
}

// GetTpnsTokenOk returns a tuple with the TpnsToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BindDeviceDto) GetTpnsTokenOk() (*string, bool) {
	if o == nil || IsNil(o.TpnsToken) {
		return nil, false
	}
	return o.TpnsToken, true
}

// HasTpnsToken returns a boolean if a field has been set.
func (o *BindDeviceDto) HasTpnsToken() bool {
	if o != nil && !IsNil(o.TpnsToken) {
		return true
	}

	return false
}

// SetTpnsToken gets a reference to the given string and assigns it to the TpnsToken field.
func (o *BindDeviceDto) SetTpnsToken(v string) {
	o.TpnsToken = &v
}

// GetIsPhysicalDevice returns the IsPhysicalDevice field value if set, zero value otherwise.
func (o *BindDeviceDto) GetIsPhysicalDevice() bool {
	if o == nil || IsNil(o.IsPhysicalDevice) {
		var ret bool
		return ret
	}
	return *o.IsPhysicalDevice
}

// GetIsPhysicalDeviceOk returns a tuple with the IsPhysicalDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BindDeviceDto) GetIsPhysicalDeviceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPhysicalDevice) {
		return nil, false
	}
	return o.IsPhysicalDevice, true
}

// HasIsPhysicalDevice returns a boolean if a field has been set.
func (o *BindDeviceDto) HasIsPhysicalDevice() bool {
	if o != nil && !IsNil(o.IsPhysicalDevice) {
		return true
	}

	return false
}

// SetIsPhysicalDevice gets a reference to the given bool and assigns it to the IsPhysicalDevice field.
func (o *BindDeviceDto) SetIsPhysicalDevice(v bool) {
	o.IsPhysicalDevice = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BindDeviceDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BindDeviceDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BindDeviceDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BindDeviceDto) SetName(v string) {
	o.Name = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *BindDeviceDto) GetPlatform() AppPlatform {
	if o == nil || IsNil(o.Platform) {
		var ret AppPlatform
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BindDeviceDto) GetPlatformOk() (*AppPlatform, bool) {
	if o == nil || IsNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *BindDeviceDto) HasPlatform() bool {
	if o != nil && !IsNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given AppPlatform and assigns it to the Platform field.
func (o *BindDeviceDto) SetPlatform(v AppPlatform) {
	o.Platform = &v
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *BindDeviceDto) GetBrand() string {
	if o == nil || IsNil(o.Brand) {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BindDeviceDto) GetBrandOk() (*string, bool) {
	if o == nil || IsNil(o.Brand) {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *BindDeviceDto) HasBrand() bool {
	if o != nil && !IsNil(o.Brand) {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *BindDeviceDto) SetBrand(v string) {
	o.Brand = &v
}

// GetSystemVersion returns the SystemVersion field value if set, zero value otherwise.
func (o *BindDeviceDto) GetSystemVersion() string {
	if o == nil || IsNil(o.SystemVersion) {
		var ret string
		return ret
	}
	return *o.SystemVersion
}

// GetSystemVersionOk returns a tuple with the SystemVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BindDeviceDto) GetSystemVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SystemVersion) {
		return nil, false
	}
	return o.SystemVersion, true
}

// HasSystemVersion returns a boolean if a field has been set.
func (o *BindDeviceDto) HasSystemVersion() bool {
	if o != nil && !IsNil(o.SystemVersion) {
		return true
	}

	return false
}

// SetSystemVersion gets a reference to the given string and assigns it to the SystemVersion field.
func (o *BindDeviceDto) SetSystemVersion(v string) {
	o.SystemVersion = &v
}

func (o BindDeviceDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BindDeviceDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.TpnsToken) {
		toSerialize["tpnsToken"] = o.TpnsToken
	}
	if !IsNil(o.IsPhysicalDevice) {
		toSerialize["isPhysicalDevice"] = o.IsPhysicalDevice
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	if !IsNil(o.Brand) {
		toSerialize["brand"] = o.Brand
	}
	if !IsNil(o.SystemVersion) {
		toSerialize["systemVersion"] = o.SystemVersion
	}
	return toSerialize, nil
}

type NullableBindDeviceDto struct {
	value *BindDeviceDto
	isSet bool
}

func (v NullableBindDeviceDto) Get() *BindDeviceDto {
	return v.value
}

func (v *NullableBindDeviceDto) Set(val *BindDeviceDto) {
	v.value = val
	v.isSet = true
}

func (v NullableBindDeviceDto) IsSet() bool {
	return v.isSet
}

func (v *NullableBindDeviceDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBindDeviceDto(val *BindDeviceDto) *NullableBindDeviceDto {
	return &NullableBindDeviceDto{value: val, isSet: true}
}

func (v NullableBindDeviceDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBindDeviceDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


