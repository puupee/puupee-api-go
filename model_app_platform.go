/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"fmt"
)

// AppPlatform the model 'AppPlatform'
type AppPlatform string

// List of AppPlatform
const (
	APPPLATFORM_NONE AppPlatform = "None"
	APPPLATFORM_UNKNOWN AppPlatform = "Unknown"
	APPPLATFORM_ANDROID AppPlatform = "Android"
	APPPLATFORM_IOS AppPlatform = "IOS"
	APPPLATFORM_MAC_OS AppPlatform = "MacOS"
	APPPLATFORM_WINDOWS AppPlatform = "Windows"
	APPPLATFORM_LINUX AppPlatform = "Linux"
	APPPLATFORM_WEB AppPlatform = "Web"
	APPPLATFORM_SERVICE AppPlatform = "Service"
	APPPLATFORM_OTHER AppPlatform = "Other"
)

// All allowed values of AppPlatform enum
var AllowedAppPlatformEnumValues = []AppPlatform{
	"None",
	"Unknown",
	"Android",
	"IOS",
	"MacOS",
	"Windows",
	"Linux",
	"Web",
	"Service",
	"Other",
}

func (v *AppPlatform) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppPlatform(value)
	for _, existing := range AllowedAppPlatformEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppPlatform", value)
}

// NewAppPlatformFromValue returns a pointer to a valid AppPlatform
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppPlatformFromValue(v string) (*AppPlatform, error) {
	ev := AppPlatform(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppPlatform: valid values are %v", v, AllowedAppPlatformEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppPlatform) IsValid() bool {
	for _, existing := range AllowedAppPlatformEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppPlatform value
func (v AppPlatform) Ptr() *AppPlatform {
	return &v
}

type NullableAppPlatform struct {
	value *AppPlatform
	isSet bool
}

func (v NullableAppPlatform) Get() *AppPlatform {
	return v.value
}

func (v *NullableAppPlatform) Set(val *AppPlatform) {
	v.value = val
	v.isSet = true
}

func (v NullableAppPlatform) IsSet() bool {
	return v.isSet
}

func (v *NullableAppPlatform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppPlatform(val *AppPlatform) *NullableAppPlatform {
	return &NullableAppPlatform{value: val, isSet: true}
}

func (v NullableAppPlatform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppPlatform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

