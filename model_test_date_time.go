/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"time"
)

// TestDateTime struct for TestDateTime
type TestDateTime struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Puupee *PuupeeDto `json:"puupee,omitempty"`
}

// NewTestDateTime instantiates a new TestDateTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestDateTime() *TestDateTime {
	this := TestDateTime{}
	return &this
}

// NewTestDateTimeWithDefaults instantiates a new TestDateTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestDateTimeWithDefaults() *TestDateTime {
	this := TestDateTime{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TestDateTime) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestDateTime) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
    return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TestDateTime) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *TestDateTime) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetPuupee returns the Puupee field value if set, zero value otherwise.
func (o *TestDateTime) GetPuupee() PuupeeDto {
	if o == nil || isNil(o.Puupee) {
		var ret PuupeeDto
		return ret
	}
	return *o.Puupee
}

// GetPuupeeOk returns a tuple with the Puupee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestDateTime) GetPuupeeOk() (*PuupeeDto, bool) {
	if o == nil || isNil(o.Puupee) {
    return nil, false
	}
	return o.Puupee, true
}

// HasPuupee returns a boolean if a field has been set.
func (o *TestDateTime) HasPuupee() bool {
	if o != nil && !isNil(o.Puupee) {
		return true
	}

	return false
}

// SetPuupee gets a reference to the given PuupeeDto and assigns it to the Puupee field.
func (o *TestDateTime) SetPuupee(v PuupeeDto) {
	o.Puupee = &v
}

func (o TestDateTime) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.Puupee) {
		toSerialize["puupee"] = o.Puupee
	}
	return json.Marshal(toSerialize)
}

type NullableTestDateTime struct {
	value *TestDateTime
	isSet bool
}

func (v NullableTestDateTime) Get() *TestDateTime {
	return v.value
}

func (v *NullableTestDateTime) Set(val *TestDateTime) {
	v.value = val
	v.isSet = true
}

func (v NullableTestDateTime) IsSet() bool {
	return v.isSet
}

func (v *NullableTestDateTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestDateTime(val *TestDateTime) *NullableTestDateTime {
	return &NullableTestDateTime{value: val, isSet: true}
}

func (v NullableTestDateTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestDateTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


