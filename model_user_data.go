/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
)

// checks if the UserData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserData{}

// UserData struct for UserData
type UserData struct {
	Id *string `json:"id,omitempty"`
	TenantId NullableString `json:"tenantId,omitempty"`
	UserName NullableString `json:"userName,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Surname NullableString `json:"surname,omitempty"`
	IsActive *bool `json:"isActive,omitempty"`
	Email NullableString `json:"email,omitempty"`
	EmailConfirmed *bool `json:"emailConfirmed,omitempty"`
	PhoneNumber NullableString `json:"phoneNumber,omitempty"`
	PhoneNumberConfirmed *bool `json:"phoneNumberConfirmed,omitempty"`
}

// NewUserData instantiates a new UserData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserData() *UserData {
	this := UserData{}
	return &this
}

// NewUserDataWithDefaults instantiates a new UserData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDataWithDefaults() *UserData {
	this := UserData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserData) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserData) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserData) SetId(v string) {
	o.Id = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserData) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserData) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *UserData) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *UserData) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *UserData) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *UserData) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetUserName returns the UserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserData) GetUserName() string {
	if o == nil || IsNil(o.UserName.Get()) {
		var ret string
		return ret
	}
	return *o.UserName.Get()
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserData) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserName.Get(), o.UserName.IsSet()
}

// HasUserName returns a boolean if a field has been set.
func (o *UserData) HasUserName() bool {
	if o != nil && o.UserName.IsSet() {
		return true
	}

	return false
}

// SetUserName gets a reference to the given NullableString and assigns it to the UserName field.
func (o *UserData) SetUserName(v string) {
	o.UserName.Set(&v)
}
// SetUserNameNil sets the value for UserName to be an explicit nil
func (o *UserData) SetUserNameNil() {
	o.UserName.Set(nil)
}

// UnsetUserName ensures that no value is present for UserName, not even an explicit nil
func (o *UserData) UnsetUserName() {
	o.UserName.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserData) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UserData) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UserData) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UserData) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UserData) UnsetName() {
	o.Name.Unset()
}

// GetSurname returns the Surname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserData) GetSurname() string {
	if o == nil || IsNil(o.Surname.Get()) {
		var ret string
		return ret
	}
	return *o.Surname.Get()
}

// GetSurnameOk returns a tuple with the Surname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserData) GetSurnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Surname.Get(), o.Surname.IsSet()
}

// HasSurname returns a boolean if a field has been set.
func (o *UserData) HasSurname() bool {
	if o != nil && o.Surname.IsSet() {
		return true
	}

	return false
}

// SetSurname gets a reference to the given NullableString and assigns it to the Surname field.
func (o *UserData) SetSurname(v string) {
	o.Surname.Set(&v)
}
// SetSurnameNil sets the value for Surname to be an explicit nil
func (o *UserData) SetSurnameNil() {
	o.Surname.Set(nil)
}

// UnsetSurname ensures that no value is present for Surname, not even an explicit nil
func (o *UserData) UnsetSurname() {
	o.Surname.Unset()
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *UserData) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserData) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *UserData) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *UserData) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserData) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserData) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *UserData) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *UserData) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *UserData) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *UserData) UnsetEmail() {
	o.Email.Unset()
}

// GetEmailConfirmed returns the EmailConfirmed field value if set, zero value otherwise.
func (o *UserData) GetEmailConfirmed() bool {
	if o == nil || IsNil(o.EmailConfirmed) {
		var ret bool
		return ret
	}
	return *o.EmailConfirmed
}

// GetEmailConfirmedOk returns a tuple with the EmailConfirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserData) GetEmailConfirmedOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailConfirmed) {
		return nil, false
	}
	return o.EmailConfirmed, true
}

// HasEmailConfirmed returns a boolean if a field has been set.
func (o *UserData) HasEmailConfirmed() bool {
	if o != nil && !IsNil(o.EmailConfirmed) {
		return true
	}

	return false
}

// SetEmailConfirmed gets a reference to the given bool and assigns it to the EmailConfirmed field.
func (o *UserData) SetEmailConfirmed(v bool) {
	o.EmailConfirmed = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserData) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber.Get()) {
		var ret string
		return ret
	}
	return *o.PhoneNumber.Get()
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserData) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhoneNumber.Get(), o.PhoneNumber.IsSet()
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *UserData) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber.IsSet() {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given NullableString and assigns it to the PhoneNumber field.
func (o *UserData) SetPhoneNumber(v string) {
	o.PhoneNumber.Set(&v)
}
// SetPhoneNumberNil sets the value for PhoneNumber to be an explicit nil
func (o *UserData) SetPhoneNumberNil() {
	o.PhoneNumber.Set(nil)
}

// UnsetPhoneNumber ensures that no value is present for PhoneNumber, not even an explicit nil
func (o *UserData) UnsetPhoneNumber() {
	o.PhoneNumber.Unset()
}

// GetPhoneNumberConfirmed returns the PhoneNumberConfirmed field value if set, zero value otherwise.
func (o *UserData) GetPhoneNumberConfirmed() bool {
	if o == nil || IsNil(o.PhoneNumberConfirmed) {
		var ret bool
		return ret
	}
	return *o.PhoneNumberConfirmed
}

// GetPhoneNumberConfirmedOk returns a tuple with the PhoneNumberConfirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserData) GetPhoneNumberConfirmedOk() (*bool, bool) {
	if o == nil || IsNil(o.PhoneNumberConfirmed) {
		return nil, false
	}
	return o.PhoneNumberConfirmed, true
}

// HasPhoneNumberConfirmed returns a boolean if a field has been set.
func (o *UserData) HasPhoneNumberConfirmed() bool {
	if o != nil && !IsNil(o.PhoneNumberConfirmed) {
		return true
	}

	return false
}

// SetPhoneNumberConfirmed gets a reference to the given bool and assigns it to the PhoneNumberConfirmed field.
func (o *UserData) SetPhoneNumberConfirmed(v bool) {
	o.PhoneNumberConfirmed = &v
}

func (o UserData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.UserName.IsSet() {
		toSerialize["userName"] = o.UserName.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Surname.IsSet() {
		toSerialize["surname"] = o.Surname.Get()
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if !IsNil(o.EmailConfirmed) {
		toSerialize["emailConfirmed"] = o.EmailConfirmed
	}
	if o.PhoneNumber.IsSet() {
		toSerialize["phoneNumber"] = o.PhoneNumber.Get()
	}
	if !IsNil(o.PhoneNumberConfirmed) {
		toSerialize["phoneNumberConfirmed"] = o.PhoneNumberConfirmed
	}
	return toSerialize, nil
}

type NullableUserData struct {
	value *UserData
	isSet bool
}

func (v NullableUserData) Get() *UserData {
	return v.value
}

func (v *NullableUserData) Set(val *UserData) {
	v.value = val
	v.isSet = true
}

func (v NullableUserData) IsSet() bool {
	return v.isSet
}

func (v *NullableUserData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserData(val *UserData) *NullableUserData {
	return &NullableUserData{value: val, isSet: true}
}

func (v NullableUserData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


