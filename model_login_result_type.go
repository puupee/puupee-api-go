/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"fmt"
)

// LoginResultType the model 'LoginResultType'
type LoginResultType string

// List of LoginResultType
const (
	LOGINRESULTTYPE_SUCCESS LoginResultType = "Success"
	LOGINRESULTTYPE_INVALID_USER_NAME_OR_PASSWORD LoginResultType = "InvalidUserNameOrPassword"
	LOGINRESULTTYPE_NOT_ALLOWED LoginResultType = "NotAllowed"
	LOGINRESULTTYPE_LOCKED_OUT LoginResultType = "LockedOut"
	LOGINRESULTTYPE_REQUIRES_TWO_FACTOR LoginResultType = "RequiresTwoFactor"
)

// All allowed values of LoginResultType enum
var AllowedLoginResultTypeEnumValues = []LoginResultType{
	"Success",
	"InvalidUserNameOrPassword",
	"NotAllowed",
	"LockedOut",
	"RequiresTwoFactor",
}

func (v *LoginResultType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LoginResultType(value)
	for _, existing := range AllowedLoginResultTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LoginResultType", value)
}

// NewLoginResultTypeFromValue returns a pointer to a valid LoginResultType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLoginResultTypeFromValue(v string) (*LoginResultType, error) {
	ev := LoginResultType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LoginResultType: valid values are %v", v, AllowedLoginResultTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LoginResultType) IsValid() bool {
	for _, existing := range AllowedLoginResultTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LoginResultType value
func (v LoginResultType) Ptr() *LoginResultType {
	return &v
}

type NullableLoginResultType struct {
	value *LoginResultType
	isSet bool
}

func (v NullableLoginResultType) Get() *LoginResultType {
	return v.value
}

func (v *NullableLoginResultType) Set(val *LoginResultType) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginResultType) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginResultType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginResultType(val *LoginResultType) *NullableLoginResultType {
	return &NullableLoginResultType{value: val, isSet: true}
}

func (v NullableLoginResultType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginResultType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

