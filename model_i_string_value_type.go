/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
)

// checks if the IStringValueType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IStringValueType{}

// IStringValueType struct for IStringValueType
type IStringValueType struct {
	Name NullableString `json:"name,omitempty"`
	Properties map[string]interface{} `json:"properties,omitempty"`
	Validator *IValueValidator `json:"validator,omitempty"`
}

// NewIStringValueType instantiates a new IStringValueType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIStringValueType() *IStringValueType {
	this := IStringValueType{}
	return &this
}

// NewIStringValueTypeWithDefaults instantiates a new IStringValueType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIStringValueTypeWithDefaults() *IStringValueType {
	this := IStringValueType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IStringValueType) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IStringValueType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *IStringValueType) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *IStringValueType) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *IStringValueType) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *IStringValueType) UnsetName() {
	o.Name.Unset()
}

// GetProperties returns the Properties field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IStringValueType) GetProperties() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IStringValueType) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Properties) {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *IStringValueType) HasProperties() bool {
	if o != nil && IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *IStringValueType) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

// GetValidator returns the Validator field value if set, zero value otherwise.
func (o *IStringValueType) GetValidator() IValueValidator {
	if o == nil || IsNil(o.Validator) {
		var ret IValueValidator
		return ret
	}
	return *o.Validator
}

// GetValidatorOk returns a tuple with the Validator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IStringValueType) GetValidatorOk() (*IValueValidator, bool) {
	if o == nil || IsNil(o.Validator) {
		return nil, false
	}
	return o.Validator, true
}

// HasValidator returns a boolean if a field has been set.
func (o *IStringValueType) HasValidator() bool {
	if o != nil && !IsNil(o.Validator) {
		return true
	}

	return false
}

// SetValidator gets a reference to the given IValueValidator and assigns it to the Validator field.
func (o *IStringValueType) SetValidator(v IValueValidator) {
	o.Validator = &v
}

func (o IStringValueType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IStringValueType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if !IsNil(o.Validator) {
		toSerialize["validator"] = o.Validator
	}
	return toSerialize, nil
}

type NullableIStringValueType struct {
	value *IStringValueType
	isSet bool
}

func (v NullableIStringValueType) Get() *IStringValueType {
	return v.value
}

func (v *NullableIStringValueType) Set(val *IStringValueType) {
	v.value = val
	v.isSet = true
}

func (v NullableIStringValueType) IsSet() bool {
	return v.isSet
}

func (v *NullableIStringValueType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIStringValueType(val *IStringValueType) *NullableIStringValueType {
	return &NullableIStringValueType{value: val, isSet: true}
}

func (v NullableIStringValueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIStringValueType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


