/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.17.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserLoginInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserLoginInfo{}

// UserLoginInfo struct for UserLoginInfo
type UserLoginInfo struct {
	UserNameOrEmailAddress string `json:"userNameOrEmailAddress"`
	Password string `json:"password"`
	RememberMe *bool `json:"rememberMe,omitempty"`
}

type _UserLoginInfo UserLoginInfo

// NewUserLoginInfo instantiates a new UserLoginInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserLoginInfo(userNameOrEmailAddress string, password string) *UserLoginInfo {
	this := UserLoginInfo{}
	this.UserNameOrEmailAddress = userNameOrEmailAddress
	this.Password = password
	return &this
}

// NewUserLoginInfoWithDefaults instantiates a new UserLoginInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserLoginInfoWithDefaults() *UserLoginInfo {
	this := UserLoginInfo{}
	return &this
}

// GetUserNameOrEmailAddress returns the UserNameOrEmailAddress field value
func (o *UserLoginInfo) GetUserNameOrEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserNameOrEmailAddress
}

// GetUserNameOrEmailAddressOk returns a tuple with the UserNameOrEmailAddress field value
// and a boolean to check if the value has been set.
func (o *UserLoginInfo) GetUserNameOrEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserNameOrEmailAddress, true
}

// SetUserNameOrEmailAddress sets field value
func (o *UserLoginInfo) SetUserNameOrEmailAddress(v string) {
	o.UserNameOrEmailAddress = v
}

// GetPassword returns the Password field value
func (o *UserLoginInfo) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *UserLoginInfo) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *UserLoginInfo) SetPassword(v string) {
	o.Password = v
}

// GetRememberMe returns the RememberMe field value if set, zero value otherwise.
func (o *UserLoginInfo) GetRememberMe() bool {
	if o == nil || IsNil(o.RememberMe) {
		var ret bool
		return ret
	}
	return *o.RememberMe
}

// GetRememberMeOk returns a tuple with the RememberMe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLoginInfo) GetRememberMeOk() (*bool, bool) {
	if o == nil || IsNil(o.RememberMe) {
		return nil, false
	}
	return o.RememberMe, true
}

// HasRememberMe returns a boolean if a field has been set.
func (o *UserLoginInfo) HasRememberMe() bool {
	if o != nil && !IsNil(o.RememberMe) {
		return true
	}

	return false
}

// SetRememberMe gets a reference to the given bool and assigns it to the RememberMe field.
func (o *UserLoginInfo) SetRememberMe(v bool) {
	o.RememberMe = &v
}

func (o UserLoginInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserLoginInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userNameOrEmailAddress"] = o.UserNameOrEmailAddress
	toSerialize["password"] = o.Password
	if !IsNil(o.RememberMe) {
		toSerialize["rememberMe"] = o.RememberMe
	}
	return toSerialize, nil
}

func (o *UserLoginInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userNameOrEmailAddress",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserLoginInfo := _UserLoginInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserLoginInfo)

	if err != nil {
		return err
	}

	*o = UserLoginInfo(varUserLoginInfo)

	return err
}

type NullableUserLoginInfo struct {
	value *UserLoginInfo
	isSet bool
}

func (v NullableUserLoginInfo) Get() *UserLoginInfo {
	return v.value
}

func (v *NullableUserLoginInfo) Set(val *UserLoginInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableUserLoginInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableUserLoginInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserLoginInfo(val *UserLoginInfo) *NullableUserLoginInfo {
	return &NullableUserLoginInfo{value: val, isSet: true}
}

func (v NullableUserLoginInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserLoginInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


