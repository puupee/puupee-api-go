/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.17.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"fmt"
)

// SubscriptionOrderType 订阅订单类型
type SubscriptionOrderType string

// List of SubscriptionOrderType
const (
	SUBSCRIPTIONORDERTYPE_APPLE_AUTO SubscriptionOrderType = "AppleAuto"
	SUBSCRIPTIONORDERTYPE_ALIPAY_ONCE SubscriptionOrderType = "AlipayOnce"
	SUBSCRIPTIONORDERTYPE_ALIPAY_AUTO SubscriptionOrderType = "AlipayAuto"
	SUBSCRIPTIONORDERTYPE_WECHAT_ONCE SubscriptionOrderType = "WechatOnce"
	SUBSCRIPTIONORDERTYPE_WECHAT_AUTO SubscriptionOrderType = "WechatAuto"
)

// All allowed values of SubscriptionOrderType enum
var AllowedSubscriptionOrderTypeEnumValues = []SubscriptionOrderType{
	"AppleAuto",
	"AlipayOnce",
	"AlipayAuto",
	"WechatOnce",
	"WechatAuto",
}

func (v *SubscriptionOrderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionOrderType(value)
	for _, existing := range AllowedSubscriptionOrderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionOrderType", value)
}

// NewSubscriptionOrderTypeFromValue returns a pointer to a valid SubscriptionOrderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionOrderTypeFromValue(v string) (*SubscriptionOrderType, error) {
	ev := SubscriptionOrderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionOrderType: valid values are %v", v, AllowedSubscriptionOrderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionOrderType) IsValid() bool {
	for _, existing := range AllowedSubscriptionOrderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionOrderType value
func (v SubscriptionOrderType) Ptr() *SubscriptionOrderType {
	return &v
}

type NullableSubscriptionOrderType struct {
	value *SubscriptionOrderType
	isSet bool
}

func (v NullableSubscriptionOrderType) Get() *SubscriptionOrderType {
	return v.value
}

func (v *NullableSubscriptionOrderType) Set(val *SubscriptionOrderType) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionOrderType) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionOrderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionOrderType(val *SubscriptionOrderType) *NullableSubscriptionOrderType {
	return &NullableSubscriptionOrderType{value: val, isSet: true}
}

func (v NullableSubscriptionOrderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionOrderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

