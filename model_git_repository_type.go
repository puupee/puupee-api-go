/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.17.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"fmt"
)

// GitRepositoryType the model 'GitRepositoryType'
type GitRepositoryType string

// List of GitRepositoryType
const (
	GITREPOSITORYTYPE_GIT_HUB GitRepositoryType = "GitHub"
	GITREPOSITORYTYPE_GIT_LAB GitRepositoryType = "GitLab"
	GITREPOSITORYTYPE_BIT_BUCKET GitRepositoryType = "BitBucket"
	GITREPOSITORYTYPE_OTHER GitRepositoryType = "Other"
)

// All allowed values of GitRepositoryType enum
var AllowedGitRepositoryTypeEnumValues = []GitRepositoryType{
	"GitHub",
	"GitLab",
	"BitBucket",
	"Other",
}

func (v *GitRepositoryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GitRepositoryType(value)
	for _, existing := range AllowedGitRepositoryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GitRepositoryType", value)
}

// NewGitRepositoryTypeFromValue returns a pointer to a valid GitRepositoryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGitRepositoryTypeFromValue(v string) (*GitRepositoryType, error) {
	ev := GitRepositoryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GitRepositoryType: valid values are %v", v, AllowedGitRepositoryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GitRepositoryType) IsValid() bool {
	for _, existing := range AllowedGitRepositoryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GitRepositoryType value
func (v GitRepositoryType) Ptr() *GitRepositoryType {
	return &v
}

type NullableGitRepositoryType struct {
	value *GitRepositoryType
	isSet bool
}

func (v NullableGitRepositoryType) Get() *GitRepositoryType {
	return v.value
}

func (v *NullableGitRepositoryType) Set(val *GitRepositoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableGitRepositoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableGitRepositoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitRepositoryType(val *GitRepositoryType) *NullableGitRepositoryType {
	return &NullableGitRepositoryType{value: val, isSet: true}
}

func (v NullableGitRepositoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitRepositoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

