/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
)

// checks if the IdentityUserRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityUserRole{}

// IdentityUserRole struct for IdentityUserRole
type IdentityUserRole struct {
	TenantId NullableString `json:"tenantId,omitempty"`
	UserId *string `json:"userId,omitempty"`
	RoleId *string `json:"roleId,omitempty"`
}

// NewIdentityUserRole instantiates a new IdentityUserRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityUserRole() *IdentityUserRole {
	this := IdentityUserRole{}
	return &this
}

// NewIdentityUserRoleWithDefaults instantiates a new IdentityUserRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityUserRoleWithDefaults() *IdentityUserRole {
	this := IdentityUserRole{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityUserRole) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityUserRole) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *IdentityUserRole) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *IdentityUserRole) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *IdentityUserRole) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *IdentityUserRole) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *IdentityUserRole) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUserRole) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *IdentityUserRole) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *IdentityUserRole) SetUserId(v string) {
	o.UserId = &v
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *IdentityUserRole) GetRoleId() string {
	if o == nil || IsNil(o.RoleId) {
		var ret string
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUserRole) GetRoleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *IdentityUserRole) HasRoleId() bool {
	if o != nil && !IsNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given string and assigns it to the RoleId field.
func (o *IdentityUserRole) SetRoleId(v string) {
	o.RoleId = &v
}

func (o IdentityUserRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityUserRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	// skip: userId is readOnly
	// skip: roleId is readOnly
	return toSerialize, nil
}

type NullableIdentityUserRole struct {
	value *IdentityUserRole
	isSet bool
}

func (v NullableIdentityUserRole) Get() *IdentityUserRole {
	return v.value
}

func (v *NullableIdentityUserRole) Set(val *IdentityUserRole) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityUserRole) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityUserRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityUserRole(val *IdentityUserRole) *NullableIdentityUserRole {
	return &NullableIdentityUserRole{value: val, isSet: true}
}

func (v NullableIdentityUserRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityUserRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


