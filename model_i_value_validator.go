/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
)

// IValueValidator struct for IValueValidator
type IValueValidator struct {
	Name *string `json:"name,omitempty"`
	Properties map[string]map[string]interface{} `json:"properties,omitempty"`
}

// NewIValueValidator instantiates a new IValueValidator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIValueValidator() *IValueValidator {
	this := IValueValidator{}
	return &this
}

// NewIValueValidatorWithDefaults instantiates a new IValueValidator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIValueValidatorWithDefaults() *IValueValidator {
	this := IValueValidator{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IValueValidator) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IValueValidator) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IValueValidator) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IValueValidator) SetName(v string) {
	o.Name = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *IValueValidator) GetProperties() map[string]map[string]interface{} {
	if o == nil || isNil(o.Properties) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IValueValidator) GetPropertiesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || isNil(o.Properties) {
    return map[string]map[string]interface{}{}, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *IValueValidator) HasProperties() bool {
	if o != nil && !isNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]map[string]interface{} and assigns it to the Properties field.
func (o *IValueValidator) SetProperties(v map[string]map[string]interface{}) {
	o.Properties = v
}

func (o IValueValidator) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return json.Marshal(toSerialize)
}

type NullableIValueValidator struct {
	value *IValueValidator
	isSet bool
}

func (v NullableIValueValidator) Get() *IValueValidator {
	return v.value
}

func (v *NullableIValueValidator) Set(val *IValueValidator) {
	v.value = val
	v.isSet = true
}

func (v NullableIValueValidator) IsSet() bool {
	return v.isSet
}

func (v *NullableIValueValidator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIValueValidator(val *IValueValidator) *NullableIValueValidator {
	return &NullableIValueValidator{value: val, isSet: true}
}

func (v NullableIValueValidator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIValueValidator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


