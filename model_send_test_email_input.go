/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.17.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SendTestEmailInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendTestEmailInput{}

// SendTestEmailInput struct for SendTestEmailInput
type SendTestEmailInput struct {
	SenderEmailAddress string `json:"senderEmailAddress"`
	TargetEmailAddress string `json:"targetEmailAddress"`
	Subject string `json:"subject"`
	Body *string `json:"body,omitempty"`
}

type _SendTestEmailInput SendTestEmailInput

// NewSendTestEmailInput instantiates a new SendTestEmailInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendTestEmailInput(senderEmailAddress string, targetEmailAddress string, subject string) *SendTestEmailInput {
	this := SendTestEmailInput{}
	this.SenderEmailAddress = senderEmailAddress
	this.TargetEmailAddress = targetEmailAddress
	this.Subject = subject
	return &this
}

// NewSendTestEmailInputWithDefaults instantiates a new SendTestEmailInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendTestEmailInputWithDefaults() *SendTestEmailInput {
	this := SendTestEmailInput{}
	return &this
}

// GetSenderEmailAddress returns the SenderEmailAddress field value
func (o *SendTestEmailInput) GetSenderEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SenderEmailAddress
}

// GetSenderEmailAddressOk returns a tuple with the SenderEmailAddress field value
// and a boolean to check if the value has been set.
func (o *SendTestEmailInput) GetSenderEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SenderEmailAddress, true
}

// SetSenderEmailAddress sets field value
func (o *SendTestEmailInput) SetSenderEmailAddress(v string) {
	o.SenderEmailAddress = v
}

// GetTargetEmailAddress returns the TargetEmailAddress field value
func (o *SendTestEmailInput) GetTargetEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEmailAddress
}

// GetTargetEmailAddressOk returns a tuple with the TargetEmailAddress field value
// and a boolean to check if the value has been set.
func (o *SendTestEmailInput) GetTargetEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetEmailAddress, true
}

// SetTargetEmailAddress sets field value
func (o *SendTestEmailInput) SetTargetEmailAddress(v string) {
	o.TargetEmailAddress = v
}

// GetSubject returns the Subject field value
func (o *SendTestEmailInput) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *SendTestEmailInput) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *SendTestEmailInput) SetSubject(v string) {
	o.Subject = v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *SendTestEmailInput) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendTestEmailInput) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *SendTestEmailInput) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *SendTestEmailInput) SetBody(v string) {
	o.Body = &v
}

func (o SendTestEmailInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendTestEmailInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["senderEmailAddress"] = o.SenderEmailAddress
	toSerialize["targetEmailAddress"] = o.TargetEmailAddress
	toSerialize["subject"] = o.Subject
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	return toSerialize, nil
}

func (o *SendTestEmailInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"senderEmailAddress",
		"targetEmailAddress",
		"subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSendTestEmailInput := _SendTestEmailInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSendTestEmailInput)

	if err != nil {
		return err
	}

	*o = SendTestEmailInput(varSendTestEmailInput)

	return err
}

type NullableSendTestEmailInput struct {
	value *SendTestEmailInput
	isSet bool
}

func (v NullableSendTestEmailInput) Get() *SendTestEmailInput {
	return v.value
}

func (v *NullableSendTestEmailInput) Set(val *SendTestEmailInput) {
	v.value = val
	v.isSet = true
}

func (v NullableSendTestEmailInput) IsSet() bool {
	return v.isSet
}

func (v *NullableSendTestEmailInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendTestEmailInput(val *SendTestEmailInput) *NullableSendTestEmailInput {
	return &NullableSendTestEmailInput{value: val, isSet: true}
}

func (v NullableSendTestEmailInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendTestEmailInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


