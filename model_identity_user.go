/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"time"
)

// checks if the IdentityUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityUser{}

// IdentityUser struct for IdentityUser
type IdentityUser struct {
	Id *string `json:"id,omitempty"`
	ExtraProperties map[string]map[string]interface{} `json:"extraProperties,omitempty"`
	ConcurrencyStamp *string `json:"concurrencyStamp,omitempty"`
	CreationTime *time.Time `json:"creationTime,omitempty"`
	CreatorId *string `json:"creatorId,omitempty"`
	LastModificationTime *time.Time `json:"lastModificationTime,omitempty"`
	LastModifierId *string `json:"lastModifierId,omitempty"`
	IsDeleted *bool `json:"isDeleted,omitempty"`
	DeleterId *string `json:"deleterId,omitempty"`
	DeletionTime *time.Time `json:"deletionTime,omitempty"`
	TenantId *string `json:"tenantId,omitempty"`
	UserName *string `json:"userName,omitempty"`
	NormalizedUserName *string `json:"normalizedUserName,omitempty"`
	Name *string `json:"name,omitempty"`
	Surname *string `json:"surname,omitempty"`
	Email *string `json:"email,omitempty"`
	NormalizedEmail *string `json:"normalizedEmail,omitempty"`
	EmailConfirmed *bool `json:"emailConfirmed,omitempty"`
	PasswordHash *string `json:"passwordHash,omitempty"`
	SecurityStamp *string `json:"securityStamp,omitempty"`
	IsExternal *bool `json:"isExternal,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	PhoneNumberConfirmed *bool `json:"phoneNumberConfirmed,omitempty"`
	IsActive *bool `json:"isActive,omitempty"`
	TwoFactorEnabled *bool `json:"twoFactorEnabled,omitempty"`
	LockoutEnd *time.Time `json:"lockoutEnd,omitempty"`
	LockoutEnabled *bool `json:"lockoutEnabled,omitempty"`
	AccessFailedCount *int32 `json:"accessFailedCount,omitempty"`
	ShouldChangePasswordOnNextLogin *bool `json:"shouldChangePasswordOnNextLogin,omitempty"`
	EntityVersion *int32 `json:"entityVersion,omitempty"`
	LastPasswordChangeTime *time.Time `json:"lastPasswordChangeTime,omitempty"`
	Roles []IdentityUserRole `json:"roles,omitempty"`
	Claims []IdentityUserClaim `json:"claims,omitempty"`
	Logins []IdentityUserLogin `json:"logins,omitempty"`
	Tokens []IdentityUserToken `json:"tokens,omitempty"`
	OrganizationUnits []IdentityUserOrganizationUnit `json:"organizationUnits,omitempty"`
}

// NewIdentityUser instantiates a new IdentityUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityUser() *IdentityUser {
	this := IdentityUser{}
	return &this
}

// NewIdentityUserWithDefaults instantiates a new IdentityUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityUserWithDefaults() *IdentityUser {
	this := IdentityUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IdentityUser) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IdentityUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IdentityUser) SetId(v string) {
	o.Id = &v
}

// GetExtraProperties returns the ExtraProperties field value if set, zero value otherwise.
func (o *IdentityUser) GetExtraProperties() map[string]map[string]interface{} {
	if o == nil || IsNil(o.ExtraProperties) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.ExtraProperties
}

// GetExtraPropertiesOk returns a tuple with the ExtraProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetExtraPropertiesOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExtraProperties) {
		return map[string]map[string]interface{}{}, false
	}
	return o.ExtraProperties, true
}

// HasExtraProperties returns a boolean if a field has been set.
func (o *IdentityUser) HasExtraProperties() bool {
	if o != nil && !IsNil(o.ExtraProperties) {
		return true
	}

	return false
}

// SetExtraProperties gets a reference to the given map[string]map[string]interface{} and assigns it to the ExtraProperties field.
func (o *IdentityUser) SetExtraProperties(v map[string]map[string]interface{}) {
	o.ExtraProperties = v
}

// GetConcurrencyStamp returns the ConcurrencyStamp field value if set, zero value otherwise.
func (o *IdentityUser) GetConcurrencyStamp() string {
	if o == nil || IsNil(o.ConcurrencyStamp) {
		var ret string
		return ret
	}
	return *o.ConcurrencyStamp
}

// GetConcurrencyStampOk returns a tuple with the ConcurrencyStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetConcurrencyStampOk() (*string, bool) {
	if o == nil || IsNil(o.ConcurrencyStamp) {
		return nil, false
	}
	return o.ConcurrencyStamp, true
}

// HasConcurrencyStamp returns a boolean if a field has been set.
func (o *IdentityUser) HasConcurrencyStamp() bool {
	if o != nil && !IsNil(o.ConcurrencyStamp) {
		return true
	}

	return false
}

// SetConcurrencyStamp gets a reference to the given string and assigns it to the ConcurrencyStamp field.
func (o *IdentityUser) SetConcurrencyStamp(v string) {
	o.ConcurrencyStamp = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *IdentityUser) GetCreationTime() time.Time {
	if o == nil || IsNil(o.CreationTime) {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *IdentityUser) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *IdentityUser) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *IdentityUser) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *IdentityUser) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *IdentityUser) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetLastModificationTime returns the LastModificationTime field value if set, zero value otherwise.
func (o *IdentityUser) GetLastModificationTime() time.Time {
	if o == nil || IsNil(o.LastModificationTime) {
		var ret time.Time
		return ret
	}
	return *o.LastModificationTime
}

// GetLastModificationTimeOk returns a tuple with the LastModificationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetLastModificationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastModificationTime) {
		return nil, false
	}
	return o.LastModificationTime, true
}

// HasLastModificationTime returns a boolean if a field has been set.
func (o *IdentityUser) HasLastModificationTime() bool {
	if o != nil && !IsNil(o.LastModificationTime) {
		return true
	}

	return false
}

// SetLastModificationTime gets a reference to the given time.Time and assigns it to the LastModificationTime field.
func (o *IdentityUser) SetLastModificationTime(v time.Time) {
	o.LastModificationTime = &v
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise.
func (o *IdentityUser) GetLastModifierId() string {
	if o == nil || IsNil(o.LastModifierId) {
		var ret string
		return ret
	}
	return *o.LastModifierId
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetLastModifierIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifierId) {
		return nil, false
	}
	return o.LastModifierId, true
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *IdentityUser) HasLastModifierId() bool {
	if o != nil && !IsNil(o.LastModifierId) {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given string and assigns it to the LastModifierId field.
func (o *IdentityUser) SetLastModifierId(v string) {
	o.LastModifierId = &v
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *IdentityUser) GetIsDeleted() bool {
	if o == nil || IsNil(o.IsDeleted) {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetIsDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeleted) {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *IdentityUser) HasIsDeleted() bool {
	if o != nil && !IsNil(o.IsDeleted) {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *IdentityUser) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetDeleterId returns the DeleterId field value if set, zero value otherwise.
func (o *IdentityUser) GetDeleterId() string {
	if o == nil || IsNil(o.DeleterId) {
		var ret string
		return ret
	}
	return *o.DeleterId
}

// GetDeleterIdOk returns a tuple with the DeleterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetDeleterIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeleterId) {
		return nil, false
	}
	return o.DeleterId, true
}

// HasDeleterId returns a boolean if a field has been set.
func (o *IdentityUser) HasDeleterId() bool {
	if o != nil && !IsNil(o.DeleterId) {
		return true
	}

	return false
}

// SetDeleterId gets a reference to the given string and assigns it to the DeleterId field.
func (o *IdentityUser) SetDeleterId(v string) {
	o.DeleterId = &v
}

// GetDeletionTime returns the DeletionTime field value if set, zero value otherwise.
func (o *IdentityUser) GetDeletionTime() time.Time {
	if o == nil || IsNil(o.DeletionTime) {
		var ret time.Time
		return ret
	}
	return *o.DeletionTime
}

// GetDeletionTimeOk returns a tuple with the DeletionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetDeletionTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletionTime) {
		return nil, false
	}
	return o.DeletionTime, true
}

// HasDeletionTime returns a boolean if a field has been set.
func (o *IdentityUser) HasDeletionTime() bool {
	if o != nil && !IsNil(o.DeletionTime) {
		return true
	}

	return false
}

// SetDeletionTime gets a reference to the given time.Time and assigns it to the DeletionTime field.
func (o *IdentityUser) SetDeletionTime(v time.Time) {
	o.DeletionTime = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *IdentityUser) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *IdentityUser) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *IdentityUser) SetTenantId(v string) {
	o.TenantId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *IdentityUser) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *IdentityUser) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *IdentityUser) SetUserName(v string) {
	o.UserName = &v
}

// GetNormalizedUserName returns the NormalizedUserName field value if set, zero value otherwise.
func (o *IdentityUser) GetNormalizedUserName() string {
	if o == nil || IsNil(o.NormalizedUserName) {
		var ret string
		return ret
	}
	return *o.NormalizedUserName
}

// GetNormalizedUserNameOk returns a tuple with the NormalizedUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetNormalizedUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.NormalizedUserName) {
		return nil, false
	}
	return o.NormalizedUserName, true
}

// HasNormalizedUserName returns a boolean if a field has been set.
func (o *IdentityUser) HasNormalizedUserName() bool {
	if o != nil && !IsNil(o.NormalizedUserName) {
		return true
	}

	return false
}

// SetNormalizedUserName gets a reference to the given string and assigns it to the NormalizedUserName field.
func (o *IdentityUser) SetNormalizedUserName(v string) {
	o.NormalizedUserName = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IdentityUser) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IdentityUser) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IdentityUser) SetName(v string) {
	o.Name = &v
}

// GetSurname returns the Surname field value if set, zero value otherwise.
func (o *IdentityUser) GetSurname() string {
	if o == nil || IsNil(o.Surname) {
		var ret string
		return ret
	}
	return *o.Surname
}

// GetSurnameOk returns a tuple with the Surname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetSurnameOk() (*string, bool) {
	if o == nil || IsNil(o.Surname) {
		return nil, false
	}
	return o.Surname, true
}

// HasSurname returns a boolean if a field has been set.
func (o *IdentityUser) HasSurname() bool {
	if o != nil && !IsNil(o.Surname) {
		return true
	}

	return false
}

// SetSurname gets a reference to the given string and assigns it to the Surname field.
func (o *IdentityUser) SetSurname(v string) {
	o.Surname = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *IdentityUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *IdentityUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *IdentityUser) SetEmail(v string) {
	o.Email = &v
}

// GetNormalizedEmail returns the NormalizedEmail field value if set, zero value otherwise.
func (o *IdentityUser) GetNormalizedEmail() string {
	if o == nil || IsNil(o.NormalizedEmail) {
		var ret string
		return ret
	}
	return *o.NormalizedEmail
}

// GetNormalizedEmailOk returns a tuple with the NormalizedEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetNormalizedEmailOk() (*string, bool) {
	if o == nil || IsNil(o.NormalizedEmail) {
		return nil, false
	}
	return o.NormalizedEmail, true
}

// HasNormalizedEmail returns a boolean if a field has been set.
func (o *IdentityUser) HasNormalizedEmail() bool {
	if o != nil && !IsNil(o.NormalizedEmail) {
		return true
	}

	return false
}

// SetNormalizedEmail gets a reference to the given string and assigns it to the NormalizedEmail field.
func (o *IdentityUser) SetNormalizedEmail(v string) {
	o.NormalizedEmail = &v
}

// GetEmailConfirmed returns the EmailConfirmed field value if set, zero value otherwise.
func (o *IdentityUser) GetEmailConfirmed() bool {
	if o == nil || IsNil(o.EmailConfirmed) {
		var ret bool
		return ret
	}
	return *o.EmailConfirmed
}

// GetEmailConfirmedOk returns a tuple with the EmailConfirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetEmailConfirmedOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailConfirmed) {
		return nil, false
	}
	return o.EmailConfirmed, true
}

// HasEmailConfirmed returns a boolean if a field has been set.
func (o *IdentityUser) HasEmailConfirmed() bool {
	if o != nil && !IsNil(o.EmailConfirmed) {
		return true
	}

	return false
}

// SetEmailConfirmed gets a reference to the given bool and assigns it to the EmailConfirmed field.
func (o *IdentityUser) SetEmailConfirmed(v bool) {
	o.EmailConfirmed = &v
}

// GetPasswordHash returns the PasswordHash field value if set, zero value otherwise.
func (o *IdentityUser) GetPasswordHash() string {
	if o == nil || IsNil(o.PasswordHash) {
		var ret string
		return ret
	}
	return *o.PasswordHash
}

// GetPasswordHashOk returns a tuple with the PasswordHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetPasswordHashOk() (*string, bool) {
	if o == nil || IsNil(o.PasswordHash) {
		return nil, false
	}
	return o.PasswordHash, true
}

// HasPasswordHash returns a boolean if a field has been set.
func (o *IdentityUser) HasPasswordHash() bool {
	if o != nil && !IsNil(o.PasswordHash) {
		return true
	}

	return false
}

// SetPasswordHash gets a reference to the given string and assigns it to the PasswordHash field.
func (o *IdentityUser) SetPasswordHash(v string) {
	o.PasswordHash = &v
}

// GetSecurityStamp returns the SecurityStamp field value if set, zero value otherwise.
func (o *IdentityUser) GetSecurityStamp() string {
	if o == nil || IsNil(o.SecurityStamp) {
		var ret string
		return ret
	}
	return *o.SecurityStamp
}

// GetSecurityStampOk returns a tuple with the SecurityStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetSecurityStampOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityStamp) {
		return nil, false
	}
	return o.SecurityStamp, true
}

// HasSecurityStamp returns a boolean if a field has been set.
func (o *IdentityUser) HasSecurityStamp() bool {
	if o != nil && !IsNil(o.SecurityStamp) {
		return true
	}

	return false
}

// SetSecurityStamp gets a reference to the given string and assigns it to the SecurityStamp field.
func (o *IdentityUser) SetSecurityStamp(v string) {
	o.SecurityStamp = &v
}

// GetIsExternal returns the IsExternal field value if set, zero value otherwise.
func (o *IdentityUser) GetIsExternal() bool {
	if o == nil || IsNil(o.IsExternal) {
		var ret bool
		return ret
	}
	return *o.IsExternal
}

// GetIsExternalOk returns a tuple with the IsExternal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetIsExternalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsExternal) {
		return nil, false
	}
	return o.IsExternal, true
}

// HasIsExternal returns a boolean if a field has been set.
func (o *IdentityUser) HasIsExternal() bool {
	if o != nil && !IsNil(o.IsExternal) {
		return true
	}

	return false
}

// SetIsExternal gets a reference to the given bool and assigns it to the IsExternal field.
func (o *IdentityUser) SetIsExternal(v bool) {
	o.IsExternal = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *IdentityUser) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *IdentityUser) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *IdentityUser) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetPhoneNumberConfirmed returns the PhoneNumberConfirmed field value if set, zero value otherwise.
func (o *IdentityUser) GetPhoneNumberConfirmed() bool {
	if o == nil || IsNil(o.PhoneNumberConfirmed) {
		var ret bool
		return ret
	}
	return *o.PhoneNumberConfirmed
}

// GetPhoneNumberConfirmedOk returns a tuple with the PhoneNumberConfirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetPhoneNumberConfirmedOk() (*bool, bool) {
	if o == nil || IsNil(o.PhoneNumberConfirmed) {
		return nil, false
	}
	return o.PhoneNumberConfirmed, true
}

// HasPhoneNumberConfirmed returns a boolean if a field has been set.
func (o *IdentityUser) HasPhoneNumberConfirmed() bool {
	if o != nil && !IsNil(o.PhoneNumberConfirmed) {
		return true
	}

	return false
}

// SetPhoneNumberConfirmed gets a reference to the given bool and assigns it to the PhoneNumberConfirmed field.
func (o *IdentityUser) SetPhoneNumberConfirmed(v bool) {
	o.PhoneNumberConfirmed = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *IdentityUser) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *IdentityUser) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *IdentityUser) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetTwoFactorEnabled returns the TwoFactorEnabled field value if set, zero value otherwise.
func (o *IdentityUser) GetTwoFactorEnabled() bool {
	if o == nil || IsNil(o.TwoFactorEnabled) {
		var ret bool
		return ret
	}
	return *o.TwoFactorEnabled
}

// GetTwoFactorEnabledOk returns a tuple with the TwoFactorEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetTwoFactorEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.TwoFactorEnabled) {
		return nil, false
	}
	return o.TwoFactorEnabled, true
}

// HasTwoFactorEnabled returns a boolean if a field has been set.
func (o *IdentityUser) HasTwoFactorEnabled() bool {
	if o != nil && !IsNil(o.TwoFactorEnabled) {
		return true
	}

	return false
}

// SetTwoFactorEnabled gets a reference to the given bool and assigns it to the TwoFactorEnabled field.
func (o *IdentityUser) SetTwoFactorEnabled(v bool) {
	o.TwoFactorEnabled = &v
}

// GetLockoutEnd returns the LockoutEnd field value if set, zero value otherwise.
func (o *IdentityUser) GetLockoutEnd() time.Time {
	if o == nil || IsNil(o.LockoutEnd) {
		var ret time.Time
		return ret
	}
	return *o.LockoutEnd
}

// GetLockoutEndOk returns a tuple with the LockoutEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetLockoutEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LockoutEnd) {
		return nil, false
	}
	return o.LockoutEnd, true
}

// HasLockoutEnd returns a boolean if a field has been set.
func (o *IdentityUser) HasLockoutEnd() bool {
	if o != nil && !IsNil(o.LockoutEnd) {
		return true
	}

	return false
}

// SetLockoutEnd gets a reference to the given time.Time and assigns it to the LockoutEnd field.
func (o *IdentityUser) SetLockoutEnd(v time.Time) {
	o.LockoutEnd = &v
}

// GetLockoutEnabled returns the LockoutEnabled field value if set, zero value otherwise.
func (o *IdentityUser) GetLockoutEnabled() bool {
	if o == nil || IsNil(o.LockoutEnabled) {
		var ret bool
		return ret
	}
	return *o.LockoutEnabled
}

// GetLockoutEnabledOk returns a tuple with the LockoutEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetLockoutEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.LockoutEnabled) {
		return nil, false
	}
	return o.LockoutEnabled, true
}

// HasLockoutEnabled returns a boolean if a field has been set.
func (o *IdentityUser) HasLockoutEnabled() bool {
	if o != nil && !IsNil(o.LockoutEnabled) {
		return true
	}

	return false
}

// SetLockoutEnabled gets a reference to the given bool and assigns it to the LockoutEnabled field.
func (o *IdentityUser) SetLockoutEnabled(v bool) {
	o.LockoutEnabled = &v
}

// GetAccessFailedCount returns the AccessFailedCount field value if set, zero value otherwise.
func (o *IdentityUser) GetAccessFailedCount() int32 {
	if o == nil || IsNil(o.AccessFailedCount) {
		var ret int32
		return ret
	}
	return *o.AccessFailedCount
}

// GetAccessFailedCountOk returns a tuple with the AccessFailedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetAccessFailedCountOk() (*int32, bool) {
	if o == nil || IsNil(o.AccessFailedCount) {
		return nil, false
	}
	return o.AccessFailedCount, true
}

// HasAccessFailedCount returns a boolean if a field has been set.
func (o *IdentityUser) HasAccessFailedCount() bool {
	if o != nil && !IsNil(o.AccessFailedCount) {
		return true
	}

	return false
}

// SetAccessFailedCount gets a reference to the given int32 and assigns it to the AccessFailedCount field.
func (o *IdentityUser) SetAccessFailedCount(v int32) {
	o.AccessFailedCount = &v
}

// GetShouldChangePasswordOnNextLogin returns the ShouldChangePasswordOnNextLogin field value if set, zero value otherwise.
func (o *IdentityUser) GetShouldChangePasswordOnNextLogin() bool {
	if o == nil || IsNil(o.ShouldChangePasswordOnNextLogin) {
		var ret bool
		return ret
	}
	return *o.ShouldChangePasswordOnNextLogin
}

// GetShouldChangePasswordOnNextLoginOk returns a tuple with the ShouldChangePasswordOnNextLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetShouldChangePasswordOnNextLoginOk() (*bool, bool) {
	if o == nil || IsNil(o.ShouldChangePasswordOnNextLogin) {
		return nil, false
	}
	return o.ShouldChangePasswordOnNextLogin, true
}

// HasShouldChangePasswordOnNextLogin returns a boolean if a field has been set.
func (o *IdentityUser) HasShouldChangePasswordOnNextLogin() bool {
	if o != nil && !IsNil(o.ShouldChangePasswordOnNextLogin) {
		return true
	}

	return false
}

// SetShouldChangePasswordOnNextLogin gets a reference to the given bool and assigns it to the ShouldChangePasswordOnNextLogin field.
func (o *IdentityUser) SetShouldChangePasswordOnNextLogin(v bool) {
	o.ShouldChangePasswordOnNextLogin = &v
}

// GetEntityVersion returns the EntityVersion field value if set, zero value otherwise.
func (o *IdentityUser) GetEntityVersion() int32 {
	if o == nil || IsNil(o.EntityVersion) {
		var ret int32
		return ret
	}
	return *o.EntityVersion
}

// GetEntityVersionOk returns a tuple with the EntityVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetEntityVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.EntityVersion) {
		return nil, false
	}
	return o.EntityVersion, true
}

// HasEntityVersion returns a boolean if a field has been set.
func (o *IdentityUser) HasEntityVersion() bool {
	if o != nil && !IsNil(o.EntityVersion) {
		return true
	}

	return false
}

// SetEntityVersion gets a reference to the given int32 and assigns it to the EntityVersion field.
func (o *IdentityUser) SetEntityVersion(v int32) {
	o.EntityVersion = &v
}

// GetLastPasswordChangeTime returns the LastPasswordChangeTime field value if set, zero value otherwise.
func (o *IdentityUser) GetLastPasswordChangeTime() time.Time {
	if o == nil || IsNil(o.LastPasswordChangeTime) {
		var ret time.Time
		return ret
	}
	return *o.LastPasswordChangeTime
}

// GetLastPasswordChangeTimeOk returns a tuple with the LastPasswordChangeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetLastPasswordChangeTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastPasswordChangeTime) {
		return nil, false
	}
	return o.LastPasswordChangeTime, true
}

// HasLastPasswordChangeTime returns a boolean if a field has been set.
func (o *IdentityUser) HasLastPasswordChangeTime() bool {
	if o != nil && !IsNil(o.LastPasswordChangeTime) {
		return true
	}

	return false
}

// SetLastPasswordChangeTime gets a reference to the given time.Time and assigns it to the LastPasswordChangeTime field.
func (o *IdentityUser) SetLastPasswordChangeTime(v time.Time) {
	o.LastPasswordChangeTime = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *IdentityUser) GetRoles() []IdentityUserRole {
	if o == nil || IsNil(o.Roles) {
		var ret []IdentityUserRole
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetRolesOk() ([]IdentityUserRole, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *IdentityUser) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []IdentityUserRole and assigns it to the Roles field.
func (o *IdentityUser) SetRoles(v []IdentityUserRole) {
	o.Roles = v
}

// GetClaims returns the Claims field value if set, zero value otherwise.
func (o *IdentityUser) GetClaims() []IdentityUserClaim {
	if o == nil || IsNil(o.Claims) {
		var ret []IdentityUserClaim
		return ret
	}
	return o.Claims
}

// GetClaimsOk returns a tuple with the Claims field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetClaimsOk() ([]IdentityUserClaim, bool) {
	if o == nil || IsNil(o.Claims) {
		return nil, false
	}
	return o.Claims, true
}

// HasClaims returns a boolean if a field has been set.
func (o *IdentityUser) HasClaims() bool {
	if o != nil && !IsNil(o.Claims) {
		return true
	}

	return false
}

// SetClaims gets a reference to the given []IdentityUserClaim and assigns it to the Claims field.
func (o *IdentityUser) SetClaims(v []IdentityUserClaim) {
	o.Claims = v
}

// GetLogins returns the Logins field value if set, zero value otherwise.
func (o *IdentityUser) GetLogins() []IdentityUserLogin {
	if o == nil || IsNil(o.Logins) {
		var ret []IdentityUserLogin
		return ret
	}
	return o.Logins
}

// GetLoginsOk returns a tuple with the Logins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetLoginsOk() ([]IdentityUserLogin, bool) {
	if o == nil || IsNil(o.Logins) {
		return nil, false
	}
	return o.Logins, true
}

// HasLogins returns a boolean if a field has been set.
func (o *IdentityUser) HasLogins() bool {
	if o != nil && !IsNil(o.Logins) {
		return true
	}

	return false
}

// SetLogins gets a reference to the given []IdentityUserLogin and assigns it to the Logins field.
func (o *IdentityUser) SetLogins(v []IdentityUserLogin) {
	o.Logins = v
}

// GetTokens returns the Tokens field value if set, zero value otherwise.
func (o *IdentityUser) GetTokens() []IdentityUserToken {
	if o == nil || IsNil(o.Tokens) {
		var ret []IdentityUserToken
		return ret
	}
	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetTokensOk() ([]IdentityUserToken, bool) {
	if o == nil || IsNil(o.Tokens) {
		return nil, false
	}
	return o.Tokens, true
}

// HasTokens returns a boolean if a field has been set.
func (o *IdentityUser) HasTokens() bool {
	if o != nil && !IsNil(o.Tokens) {
		return true
	}

	return false
}

// SetTokens gets a reference to the given []IdentityUserToken and assigns it to the Tokens field.
func (o *IdentityUser) SetTokens(v []IdentityUserToken) {
	o.Tokens = v
}

// GetOrganizationUnits returns the OrganizationUnits field value if set, zero value otherwise.
func (o *IdentityUser) GetOrganizationUnits() []IdentityUserOrganizationUnit {
	if o == nil || IsNil(o.OrganizationUnits) {
		var ret []IdentityUserOrganizationUnit
		return ret
	}
	return o.OrganizationUnits
}

// GetOrganizationUnitsOk returns a tuple with the OrganizationUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityUser) GetOrganizationUnitsOk() ([]IdentityUserOrganizationUnit, bool) {
	if o == nil || IsNil(o.OrganizationUnits) {
		return nil, false
	}
	return o.OrganizationUnits, true
}

// HasOrganizationUnits returns a boolean if a field has been set.
func (o *IdentityUser) HasOrganizationUnits() bool {
	if o != nil && !IsNil(o.OrganizationUnits) {
		return true
	}

	return false
}

// SetOrganizationUnits gets a reference to the given []IdentityUserOrganizationUnit and assigns it to the OrganizationUnits field.
func (o *IdentityUser) SetOrganizationUnits(v []IdentityUserOrganizationUnit) {
	o.OrganizationUnits = v
}

func (o IdentityUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	// skip: extraProperties is readOnly
	if !IsNil(o.ConcurrencyStamp) {
		toSerialize["concurrencyStamp"] = o.ConcurrencyStamp
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creationTime"] = o.CreationTime
	}
	if !IsNil(o.CreatorId) {
		toSerialize["creatorId"] = o.CreatorId
	}
	if !IsNil(o.LastModificationTime) {
		toSerialize["lastModificationTime"] = o.LastModificationTime
	}
	if !IsNil(o.LastModifierId) {
		toSerialize["lastModifierId"] = o.LastModifierId
	}
	if !IsNil(o.IsDeleted) {
		toSerialize["isDeleted"] = o.IsDeleted
	}
	if !IsNil(o.DeleterId) {
		toSerialize["deleterId"] = o.DeleterId
	}
	if !IsNil(o.DeletionTime) {
		toSerialize["deletionTime"] = o.DeletionTime
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	// skip: normalizedUserName is readOnly
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Surname) {
		toSerialize["surname"] = o.Surname
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	// skip: normalizedEmail is readOnly
	// skip: emailConfirmed is readOnly
	// skip: passwordHash is readOnly
	// skip: securityStamp is readOnly
	if !IsNil(o.IsExternal) {
		toSerialize["isExternal"] = o.IsExternal
	}
	// skip: phoneNumber is readOnly
	// skip: phoneNumberConfirmed is readOnly
	// skip: isActive is readOnly
	// skip: twoFactorEnabled is readOnly
	// skip: lockoutEnd is readOnly
	// skip: lockoutEnabled is readOnly
	// skip: accessFailedCount is readOnly
	// skip: shouldChangePasswordOnNextLogin is readOnly
	// skip: entityVersion is readOnly
	// skip: lastPasswordChangeTime is readOnly
	// skip: roles is readOnly
	// skip: claims is readOnly
	// skip: logins is readOnly
	// skip: tokens is readOnly
	// skip: organizationUnits is readOnly
	return toSerialize, nil
}

type NullableIdentityUser struct {
	value *IdentityUser
	isSet bool
}

func (v NullableIdentityUser) Get() *IdentityUser {
	return v.value
}

func (v *NullableIdentityUser) Set(val *IdentityUser) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityUser) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityUser(val *IdentityUser) *NullableIdentityUser {
	return &NullableIdentityUser{value: val, isSet: true}
}

func (v NullableIdentityUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


