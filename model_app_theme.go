/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
)

// checks if the AppTheme type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppTheme{}

// AppTheme struct for AppTheme
type AppTheme struct {
	SourceColor NullableString `json:"sourceColor,omitempty"`
	ThemeMode *AppThemeMode `json:"themeMode,omitempty"`
}

// NewAppTheme instantiates a new AppTheme object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppTheme() *AppTheme {
	this := AppTheme{}
	return &this
}

// NewAppThemeWithDefaults instantiates a new AppTheme object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppThemeWithDefaults() *AppTheme {
	this := AppTheme{}
	return &this
}

// GetSourceColor returns the SourceColor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppTheme) GetSourceColor() string {
	if o == nil || IsNil(o.SourceColor.Get()) {
		var ret string
		return ret
	}
	return *o.SourceColor.Get()
}

// GetSourceColorOk returns a tuple with the SourceColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppTheme) GetSourceColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceColor.Get(), o.SourceColor.IsSet()
}

// HasSourceColor returns a boolean if a field has been set.
func (o *AppTheme) HasSourceColor() bool {
	if o != nil && o.SourceColor.IsSet() {
		return true
	}

	return false
}

// SetSourceColor gets a reference to the given NullableString and assigns it to the SourceColor field.
func (o *AppTheme) SetSourceColor(v string) {
	o.SourceColor.Set(&v)
}
// SetSourceColorNil sets the value for SourceColor to be an explicit nil
func (o *AppTheme) SetSourceColorNil() {
	o.SourceColor.Set(nil)
}

// UnsetSourceColor ensures that no value is present for SourceColor, not even an explicit nil
func (o *AppTheme) UnsetSourceColor() {
	o.SourceColor.Unset()
}

// GetThemeMode returns the ThemeMode field value if set, zero value otherwise.
func (o *AppTheme) GetThemeMode() AppThemeMode {
	if o == nil || IsNil(o.ThemeMode) {
		var ret AppThemeMode
		return ret
	}
	return *o.ThemeMode
}

// GetThemeModeOk returns a tuple with the ThemeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppTheme) GetThemeModeOk() (*AppThemeMode, bool) {
	if o == nil || IsNil(o.ThemeMode) {
		return nil, false
	}
	return o.ThemeMode, true
}

// HasThemeMode returns a boolean if a field has been set.
func (o *AppTheme) HasThemeMode() bool {
	if o != nil && !IsNil(o.ThemeMode) {
		return true
	}

	return false
}

// SetThemeMode gets a reference to the given AppThemeMode and assigns it to the ThemeMode field.
func (o *AppTheme) SetThemeMode(v AppThemeMode) {
	o.ThemeMode = &v
}

func (o AppTheme) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppTheme) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceColor.IsSet() {
		toSerialize["sourceColor"] = o.SourceColor.Get()
	}
	if !IsNil(o.ThemeMode) {
		toSerialize["themeMode"] = o.ThemeMode
	}
	return toSerialize, nil
}

type NullableAppTheme struct {
	value *AppTheme
	isSet bool
}

func (v NullableAppTheme) Get() *AppTheme {
	return v.value
}

func (v *NullableAppTheme) Set(val *AppTheme) {
	v.value = val
	v.isSet = true
}

func (v NullableAppTheme) IsSet() bool {
	return v.isSet
}

func (v *NullableAppTheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppTheme(val *AppTheme) *NullableAppTheme {
	return &NullableAppTheme{value: val, isSet: true}
}

func (v NullableAppTheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppTheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


