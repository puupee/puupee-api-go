/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.17.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"fmt"
)

// BarkNotificationLevel the model 'BarkNotificationLevel'
type BarkNotificationLevel string

// List of BarkNotificationLevel
const (
	BARKNOTIFICATIONLEVEL_ACTIVE BarkNotificationLevel = "Active"
	BARKNOTIFICATIONLEVEL_TIME_SENSITIVE BarkNotificationLevel = "TimeSensitive"
	BARKNOTIFICATIONLEVEL_PASSIVE BarkNotificationLevel = "Passive"
)

// All allowed values of BarkNotificationLevel enum
var AllowedBarkNotificationLevelEnumValues = []BarkNotificationLevel{
	"Active",
	"TimeSensitive",
	"Passive",
}

func (v *BarkNotificationLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BarkNotificationLevel(value)
	for _, existing := range AllowedBarkNotificationLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BarkNotificationLevel", value)
}

// NewBarkNotificationLevelFromValue returns a pointer to a valid BarkNotificationLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBarkNotificationLevelFromValue(v string) (*BarkNotificationLevel, error) {
	ev := BarkNotificationLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BarkNotificationLevel: valid values are %v", v, AllowedBarkNotificationLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BarkNotificationLevel) IsValid() bool {
	for _, existing := range AllowedBarkNotificationLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BarkNotificationLevel value
func (v BarkNotificationLevel) Ptr() *BarkNotificationLevel {
	return &v
}

type NullableBarkNotificationLevel struct {
	value *BarkNotificationLevel
	isSet bool
}

func (v NullableBarkNotificationLevel) Get() *BarkNotificationLevel {
	return v.value
}

func (v *NullableBarkNotificationLevel) Set(val *BarkNotificationLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableBarkNotificationLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableBarkNotificationLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBarkNotificationLevel(val *BarkNotificationLevel) *NullableBarkNotificationLevel {
	return &NullableBarkNotificationLevel{value: val, isSet: true}
}

func (v NullableBarkNotificationLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBarkNotificationLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

