/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.17.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"time"
)

// checks if the UserStorageDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserStorageDto{}

// UserStorageDto struct for UserStorageDto
type UserStorageDto struct {
	// 所属应用
	AppId *string `json:"appId,omitempty"`
	// 应用名称
	AppName *string `json:"appName,omitempty"`
	PriceNaming *AppPriceNaming `json:"priceNaming,omitempty"`
	// 用户存储容量
	Size *int64 `json:"size,omitempty"`
	// 当前使用大小
	CurrentSize *int64 `json:"currentSize,omitempty"`
	TotalCount *int32 `json:"totalCount,omitempty"`
	// 单文件最大大小
	SingleFileMaxSize *int64 `json:"singleFileMaxSize,omitempty"`
	// 过期时间, 为空表示永久有效, 一般是订阅产品的过期时间
	ExpireAt *time.Time `json:"expireAt,omitempty"`
	Items []UserStorageItemDto `json:"items,omitempty"`
}

// NewUserStorageDto instantiates a new UserStorageDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserStorageDto() *UserStorageDto {
	this := UserStorageDto{}
	return &this
}

// NewUserStorageDtoWithDefaults instantiates a new UserStorageDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserStorageDtoWithDefaults() *UserStorageDto {
	this := UserStorageDto{}
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *UserStorageDto) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStorageDto) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *UserStorageDto) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *UserStorageDto) SetAppId(v string) {
	o.AppId = &v
}

// GetAppName returns the AppName field value if set, zero value otherwise.
func (o *UserStorageDto) GetAppName() string {
	if o == nil || IsNil(o.AppName) {
		var ret string
		return ret
	}
	return *o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStorageDto) GetAppNameOk() (*string, bool) {
	if o == nil || IsNil(o.AppName) {
		return nil, false
	}
	return o.AppName, true
}

// HasAppName returns a boolean if a field has been set.
func (o *UserStorageDto) HasAppName() bool {
	if o != nil && !IsNil(o.AppName) {
		return true
	}

	return false
}

// SetAppName gets a reference to the given string and assigns it to the AppName field.
func (o *UserStorageDto) SetAppName(v string) {
	o.AppName = &v
}

// GetPriceNaming returns the PriceNaming field value if set, zero value otherwise.
func (o *UserStorageDto) GetPriceNaming() AppPriceNaming {
	if o == nil || IsNil(o.PriceNaming) {
		var ret AppPriceNaming
		return ret
	}
	return *o.PriceNaming
}

// GetPriceNamingOk returns a tuple with the PriceNaming field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStorageDto) GetPriceNamingOk() (*AppPriceNaming, bool) {
	if o == nil || IsNil(o.PriceNaming) {
		return nil, false
	}
	return o.PriceNaming, true
}

// HasPriceNaming returns a boolean if a field has been set.
func (o *UserStorageDto) HasPriceNaming() bool {
	if o != nil && !IsNil(o.PriceNaming) {
		return true
	}

	return false
}

// SetPriceNaming gets a reference to the given AppPriceNaming and assigns it to the PriceNaming field.
func (o *UserStorageDto) SetPriceNaming(v AppPriceNaming) {
	o.PriceNaming = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *UserStorageDto) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStorageDto) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *UserStorageDto) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *UserStorageDto) SetSize(v int64) {
	o.Size = &v
}

// GetCurrentSize returns the CurrentSize field value if set, zero value otherwise.
func (o *UserStorageDto) GetCurrentSize() int64 {
	if o == nil || IsNil(o.CurrentSize) {
		var ret int64
		return ret
	}
	return *o.CurrentSize
}

// GetCurrentSizeOk returns a tuple with the CurrentSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStorageDto) GetCurrentSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.CurrentSize) {
		return nil, false
	}
	return o.CurrentSize, true
}

// HasCurrentSize returns a boolean if a field has been set.
func (o *UserStorageDto) HasCurrentSize() bool {
	if o != nil && !IsNil(o.CurrentSize) {
		return true
	}

	return false
}

// SetCurrentSize gets a reference to the given int64 and assigns it to the CurrentSize field.
func (o *UserStorageDto) SetCurrentSize(v int64) {
	o.CurrentSize = &v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *UserStorageDto) GetTotalCount() int32 {
	if o == nil || IsNil(o.TotalCount) {
		var ret int32
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStorageDto) GetTotalCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalCount) {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *UserStorageDto) HasTotalCount() bool {
	if o != nil && !IsNil(o.TotalCount) {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int32 and assigns it to the TotalCount field.
func (o *UserStorageDto) SetTotalCount(v int32) {
	o.TotalCount = &v
}

// GetSingleFileMaxSize returns the SingleFileMaxSize field value if set, zero value otherwise.
func (o *UserStorageDto) GetSingleFileMaxSize() int64 {
	if o == nil || IsNil(o.SingleFileMaxSize) {
		var ret int64
		return ret
	}
	return *o.SingleFileMaxSize
}

// GetSingleFileMaxSizeOk returns a tuple with the SingleFileMaxSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStorageDto) GetSingleFileMaxSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.SingleFileMaxSize) {
		return nil, false
	}
	return o.SingleFileMaxSize, true
}

// HasSingleFileMaxSize returns a boolean if a field has been set.
func (o *UserStorageDto) HasSingleFileMaxSize() bool {
	if o != nil && !IsNil(o.SingleFileMaxSize) {
		return true
	}

	return false
}

// SetSingleFileMaxSize gets a reference to the given int64 and assigns it to the SingleFileMaxSize field.
func (o *UserStorageDto) SetSingleFileMaxSize(v int64) {
	o.SingleFileMaxSize = &v
}

// GetExpireAt returns the ExpireAt field value if set, zero value otherwise.
func (o *UserStorageDto) GetExpireAt() time.Time {
	if o == nil || IsNil(o.ExpireAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpireAt
}

// GetExpireAtOk returns a tuple with the ExpireAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStorageDto) GetExpireAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpireAt) {
		return nil, false
	}
	return o.ExpireAt, true
}

// HasExpireAt returns a boolean if a field has been set.
func (o *UserStorageDto) HasExpireAt() bool {
	if o != nil && !IsNil(o.ExpireAt) {
		return true
	}

	return false
}

// SetExpireAt gets a reference to the given time.Time and assigns it to the ExpireAt field.
func (o *UserStorageDto) SetExpireAt(v time.Time) {
	o.ExpireAt = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *UserStorageDto) GetItems() []UserStorageItemDto {
	if o == nil || IsNil(o.Items) {
		var ret []UserStorageItemDto
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStorageDto) GetItemsOk() ([]UserStorageItemDto, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *UserStorageDto) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []UserStorageItemDto and assigns it to the Items field.
func (o *UserStorageDto) SetItems(v []UserStorageItemDto) {
	o.Items = v
}

func (o UserStorageDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserStorageDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if !IsNil(o.AppName) {
		toSerialize["appName"] = o.AppName
	}
	if !IsNil(o.PriceNaming) {
		toSerialize["priceNaming"] = o.PriceNaming
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.CurrentSize) {
		toSerialize["currentSize"] = o.CurrentSize
	}
	if !IsNil(o.TotalCount) {
		toSerialize["totalCount"] = o.TotalCount
	}
	if !IsNil(o.SingleFileMaxSize) {
		toSerialize["singleFileMaxSize"] = o.SingleFileMaxSize
	}
	if !IsNil(o.ExpireAt) {
		toSerialize["expireAt"] = o.ExpireAt
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableUserStorageDto struct {
	value *UserStorageDto
	isSet bool
}

func (v NullableUserStorageDto) Get() *UserStorageDto {
	return v.value
}

func (v *NullableUserStorageDto) Set(val *UserStorageDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUserStorageDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUserStorageDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserStorageDto(val *UserStorageDto) *NullableUserStorageDto {
	return &NullableUserStorageDto{value: val, isSet: true}
}

func (v NullableUserStorageDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserStorageDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


