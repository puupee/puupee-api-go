/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.17.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
)

// checks if the ChangePasswordDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangePasswordDto{}

// ChangePasswordDto struct for ChangePasswordDto
type ChangePasswordDto struct {
	Code *string `json:"code,omitempty"`
	Password *string `json:"password,omitempty"`
}

// NewChangePasswordDto instantiates a new ChangePasswordDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangePasswordDto() *ChangePasswordDto {
	this := ChangePasswordDto{}
	return &this
}

// NewChangePasswordDtoWithDefaults instantiates a new ChangePasswordDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangePasswordDtoWithDefaults() *ChangePasswordDto {
	this := ChangePasswordDto{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ChangePasswordDto) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePasswordDto) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ChangePasswordDto) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ChangePasswordDto) SetCode(v string) {
	o.Code = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ChangePasswordDto) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChangePasswordDto) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ChangePasswordDto) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ChangePasswordDto) SetPassword(v string) {
	o.Password = &v
}

func (o ChangePasswordDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangePasswordDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableChangePasswordDto struct {
	value *ChangePasswordDto
	isSet bool
}

func (v NullableChangePasswordDto) Get() *ChangePasswordDto {
	return v.value
}

func (v *NullableChangePasswordDto) Set(val *ChangePasswordDto) {
	v.value = val
	v.isSet = true
}

func (v NullableChangePasswordDto) IsSet() bool {
	return v.isSet
}

func (v *NullableChangePasswordDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangePasswordDto(val *ChangePasswordDto) *NullableChangePasswordDto {
	return &NullableChangePasswordDto{value: val, isSet: true}
}

func (v NullableChangePasswordDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangePasswordDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


