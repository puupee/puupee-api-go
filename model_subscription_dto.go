/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"time"
)

// checks if the SubscriptionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionDto{}

// SubscriptionDto struct for SubscriptionDto
type SubscriptionDto struct {
	Id *string `json:"id,omitempty"`
	CreationTime *time.Time `json:"creationTime,omitempty"`
	CreatorId NullableString `json:"creatorId,omitempty"`
	LastModificationTime NullableTime `json:"lastModificationTime,omitempty"`
	LastModifierId NullableString `json:"lastModifierId,omitempty"`
	IsDeleted *bool `json:"isDeleted,omitempty"`
	DeleterId NullableString `json:"deleterId,omitempty"`
	DeletionTime NullableTime `json:"deletionTime,omitempty"`
	ExpireAt NullableTime `json:"expireAt,omitempty"`
	AppId *string `json:"appId,omitempty"`
	PriceNaming NullableString `json:"priceNaming,omitempty"`
	PricingId *string `json:"pricingId,omitempty"`
}

// NewSubscriptionDto instantiates a new SubscriptionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionDto() *SubscriptionDto {
	this := SubscriptionDto{}
	return &this
}

// NewSubscriptionDtoWithDefaults instantiates a new SubscriptionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionDtoWithDefaults() *SubscriptionDto {
	this := SubscriptionDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubscriptionDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubscriptionDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubscriptionDto) SetId(v string) {
	o.Id = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *SubscriptionDto) GetCreationTime() time.Time {
	if o == nil || IsNil(o.CreationTime) {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionDto) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *SubscriptionDto) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *SubscriptionDto) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionDto) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId.Get()) {
		var ret string
		return ret
	}
	return *o.CreatorId.Get()
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionDto) GetCreatorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatorId.Get(), o.CreatorId.IsSet()
}

// HasCreatorId returns a boolean if a field has been set.
func (o *SubscriptionDto) HasCreatorId() bool {
	if o != nil && o.CreatorId.IsSet() {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given NullableString and assigns it to the CreatorId field.
func (o *SubscriptionDto) SetCreatorId(v string) {
	o.CreatorId.Set(&v)
}
// SetCreatorIdNil sets the value for CreatorId to be an explicit nil
func (o *SubscriptionDto) SetCreatorIdNil() {
	o.CreatorId.Set(nil)
}

// UnsetCreatorId ensures that no value is present for CreatorId, not even an explicit nil
func (o *SubscriptionDto) UnsetCreatorId() {
	o.CreatorId.Unset()
}

// GetLastModificationTime returns the LastModificationTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionDto) GetLastModificationTime() time.Time {
	if o == nil || IsNil(o.LastModificationTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastModificationTime.Get()
}

// GetLastModificationTimeOk returns a tuple with the LastModificationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionDto) GetLastModificationTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastModificationTime.Get(), o.LastModificationTime.IsSet()
}

// HasLastModificationTime returns a boolean if a field has been set.
func (o *SubscriptionDto) HasLastModificationTime() bool {
	if o != nil && o.LastModificationTime.IsSet() {
		return true
	}

	return false
}

// SetLastModificationTime gets a reference to the given NullableTime and assigns it to the LastModificationTime field.
func (o *SubscriptionDto) SetLastModificationTime(v time.Time) {
	o.LastModificationTime.Set(&v)
}
// SetLastModificationTimeNil sets the value for LastModificationTime to be an explicit nil
func (o *SubscriptionDto) SetLastModificationTimeNil() {
	o.LastModificationTime.Set(nil)
}

// UnsetLastModificationTime ensures that no value is present for LastModificationTime, not even an explicit nil
func (o *SubscriptionDto) UnsetLastModificationTime() {
	o.LastModificationTime.Unset()
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionDto) GetLastModifierId() string {
	if o == nil || IsNil(o.LastModifierId.Get()) {
		var ret string
		return ret
	}
	return *o.LastModifierId.Get()
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionDto) GetLastModifierIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastModifierId.Get(), o.LastModifierId.IsSet()
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *SubscriptionDto) HasLastModifierId() bool {
	if o != nil && o.LastModifierId.IsSet() {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given NullableString and assigns it to the LastModifierId field.
func (o *SubscriptionDto) SetLastModifierId(v string) {
	o.LastModifierId.Set(&v)
}
// SetLastModifierIdNil sets the value for LastModifierId to be an explicit nil
func (o *SubscriptionDto) SetLastModifierIdNil() {
	o.LastModifierId.Set(nil)
}

// UnsetLastModifierId ensures that no value is present for LastModifierId, not even an explicit nil
func (o *SubscriptionDto) UnsetLastModifierId() {
	o.LastModifierId.Unset()
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *SubscriptionDto) GetIsDeleted() bool {
	if o == nil || IsNil(o.IsDeleted) {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionDto) GetIsDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeleted) {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *SubscriptionDto) HasIsDeleted() bool {
	if o != nil && !IsNil(o.IsDeleted) {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *SubscriptionDto) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetDeleterId returns the DeleterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionDto) GetDeleterId() string {
	if o == nil || IsNil(o.DeleterId.Get()) {
		var ret string
		return ret
	}
	return *o.DeleterId.Get()
}

// GetDeleterIdOk returns a tuple with the DeleterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionDto) GetDeleterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeleterId.Get(), o.DeleterId.IsSet()
}

// HasDeleterId returns a boolean if a field has been set.
func (o *SubscriptionDto) HasDeleterId() bool {
	if o != nil && o.DeleterId.IsSet() {
		return true
	}

	return false
}

// SetDeleterId gets a reference to the given NullableString and assigns it to the DeleterId field.
func (o *SubscriptionDto) SetDeleterId(v string) {
	o.DeleterId.Set(&v)
}
// SetDeleterIdNil sets the value for DeleterId to be an explicit nil
func (o *SubscriptionDto) SetDeleterIdNil() {
	o.DeleterId.Set(nil)
}

// UnsetDeleterId ensures that no value is present for DeleterId, not even an explicit nil
func (o *SubscriptionDto) UnsetDeleterId() {
	o.DeleterId.Unset()
}

// GetDeletionTime returns the DeletionTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionDto) GetDeletionTime() time.Time {
	if o == nil || IsNil(o.DeletionTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DeletionTime.Get()
}

// GetDeletionTimeOk returns a tuple with the DeletionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionDto) GetDeletionTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeletionTime.Get(), o.DeletionTime.IsSet()
}

// HasDeletionTime returns a boolean if a field has been set.
func (o *SubscriptionDto) HasDeletionTime() bool {
	if o != nil && o.DeletionTime.IsSet() {
		return true
	}

	return false
}

// SetDeletionTime gets a reference to the given NullableTime and assigns it to the DeletionTime field.
func (o *SubscriptionDto) SetDeletionTime(v time.Time) {
	o.DeletionTime.Set(&v)
}
// SetDeletionTimeNil sets the value for DeletionTime to be an explicit nil
func (o *SubscriptionDto) SetDeletionTimeNil() {
	o.DeletionTime.Set(nil)
}

// UnsetDeletionTime ensures that no value is present for DeletionTime, not even an explicit nil
func (o *SubscriptionDto) UnsetDeletionTime() {
	o.DeletionTime.Unset()
}

// GetExpireAt returns the ExpireAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionDto) GetExpireAt() time.Time {
	if o == nil || IsNil(o.ExpireAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpireAt.Get()
}

// GetExpireAtOk returns a tuple with the ExpireAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionDto) GetExpireAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpireAt.Get(), o.ExpireAt.IsSet()
}

// HasExpireAt returns a boolean if a field has been set.
func (o *SubscriptionDto) HasExpireAt() bool {
	if o != nil && o.ExpireAt.IsSet() {
		return true
	}

	return false
}

// SetExpireAt gets a reference to the given NullableTime and assigns it to the ExpireAt field.
func (o *SubscriptionDto) SetExpireAt(v time.Time) {
	o.ExpireAt.Set(&v)
}
// SetExpireAtNil sets the value for ExpireAt to be an explicit nil
func (o *SubscriptionDto) SetExpireAtNil() {
	o.ExpireAt.Set(nil)
}

// UnsetExpireAt ensures that no value is present for ExpireAt, not even an explicit nil
func (o *SubscriptionDto) UnsetExpireAt() {
	o.ExpireAt.Unset()
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *SubscriptionDto) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionDto) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *SubscriptionDto) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *SubscriptionDto) SetAppId(v string) {
	o.AppId = &v
}

// GetPriceNaming returns the PriceNaming field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SubscriptionDto) GetPriceNaming() string {
	if o == nil || IsNil(o.PriceNaming.Get()) {
		var ret string
		return ret
	}
	return *o.PriceNaming.Get()
}

// GetPriceNamingOk returns a tuple with the PriceNaming field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SubscriptionDto) GetPriceNamingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriceNaming.Get(), o.PriceNaming.IsSet()
}

// HasPriceNaming returns a boolean if a field has been set.
func (o *SubscriptionDto) HasPriceNaming() bool {
	if o != nil && o.PriceNaming.IsSet() {
		return true
	}

	return false
}

// SetPriceNaming gets a reference to the given NullableString and assigns it to the PriceNaming field.
func (o *SubscriptionDto) SetPriceNaming(v string) {
	o.PriceNaming.Set(&v)
}
// SetPriceNamingNil sets the value for PriceNaming to be an explicit nil
func (o *SubscriptionDto) SetPriceNamingNil() {
	o.PriceNaming.Set(nil)
}

// UnsetPriceNaming ensures that no value is present for PriceNaming, not even an explicit nil
func (o *SubscriptionDto) UnsetPriceNaming() {
	o.PriceNaming.Unset()
}

// GetPricingId returns the PricingId field value if set, zero value otherwise.
func (o *SubscriptionDto) GetPricingId() string {
	if o == nil || IsNil(o.PricingId) {
		var ret string
		return ret
	}
	return *o.PricingId
}

// GetPricingIdOk returns a tuple with the PricingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionDto) GetPricingIdOk() (*string, bool) {
	if o == nil || IsNil(o.PricingId) {
		return nil, false
	}
	return o.PricingId, true
}

// HasPricingId returns a boolean if a field has been set.
func (o *SubscriptionDto) HasPricingId() bool {
	if o != nil && !IsNil(o.PricingId) {
		return true
	}

	return false
}

// SetPricingId gets a reference to the given string and assigns it to the PricingId field.
func (o *SubscriptionDto) SetPricingId(v string) {
	o.PricingId = &v
}

func (o SubscriptionDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creationTime"] = o.CreationTime
	}
	if o.CreatorId.IsSet() {
		toSerialize["creatorId"] = o.CreatorId.Get()
	}
	if o.LastModificationTime.IsSet() {
		toSerialize["lastModificationTime"] = o.LastModificationTime.Get()
	}
	if o.LastModifierId.IsSet() {
		toSerialize["lastModifierId"] = o.LastModifierId.Get()
	}
	if !IsNil(o.IsDeleted) {
		toSerialize["isDeleted"] = o.IsDeleted
	}
	if o.DeleterId.IsSet() {
		toSerialize["deleterId"] = o.DeleterId.Get()
	}
	if o.DeletionTime.IsSet() {
		toSerialize["deletionTime"] = o.DeletionTime.Get()
	}
	if o.ExpireAt.IsSet() {
		toSerialize["expireAt"] = o.ExpireAt.Get()
	}
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if o.PriceNaming.IsSet() {
		toSerialize["priceNaming"] = o.PriceNaming.Get()
	}
	if !IsNil(o.PricingId) {
		toSerialize["pricingId"] = o.PricingId
	}
	return toSerialize, nil
}

type NullableSubscriptionDto struct {
	value *SubscriptionDto
	isSet bool
}

func (v NullableSubscriptionDto) Get() *SubscriptionDto {
	return v.value
}

func (v *NullableSubscriptionDto) Set(val *SubscriptionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionDto(val *SubscriptionDto) *NullableSubscriptionDto {
	return &NullableSubscriptionDto{value: val, isSet: true}
}

func (v NullableSubscriptionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


