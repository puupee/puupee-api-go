/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"time"
)

// checks if the AppRunRecordDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppRunRecordDto{}

// AppRunRecordDto struct for AppRunRecordDto
type AppRunRecordDto struct {
	Id *string `json:"id,omitempty"`
	CreationTime *time.Time `json:"creationTime,omitempty"`
	CreatorId NullableString `json:"creatorId,omitempty"`
	LastModificationTime NullableTime `json:"lastModificationTime,omitempty"`
	LastModifierId NullableString `json:"lastModifierId,omitempty"`
	IsDeleted *bool `json:"isDeleted,omitempty"`
	DeleterId NullableString `json:"deleterId,omitempty"`
	DeletionTime NullableTime `json:"deletionTime,omitempty"`
	AppId *string `json:"appId,omitempty"`
	AppName NullableString `json:"appName,omitempty"`
	Args interface{} `json:"args,omitempty"`
	Envs interface{} `json:"envs,omitempty"`
	Status NullableString `json:"status,omitempty"`
	Result NullableString `json:"result,omitempty"`
	Error NullableString `json:"error,omitempty"`
	FinishAt NullableTime `json:"finishAt,omitempty"`
	Output NullableString `json:"output,omitempty"`
	WorkerId NullableString `json:"workerId,omitempty"`
	WorkerName NullableString `json:"workerName,omitempty"`
}

// NewAppRunRecordDto instantiates a new AppRunRecordDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppRunRecordDto() *AppRunRecordDto {
	this := AppRunRecordDto{}
	return &this
}

// NewAppRunRecordDtoWithDefaults instantiates a new AppRunRecordDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppRunRecordDtoWithDefaults() *AppRunRecordDto {
	this := AppRunRecordDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AppRunRecordDto) SetId(v string) {
	o.Id = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetCreationTime() time.Time {
	if o == nil || IsNil(o.CreationTime) {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *AppRunRecordDto) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppRunRecordDto) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId.Get()) {
		var ret string
		return ret
	}
	return *o.CreatorId.Get()
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppRunRecordDto) GetCreatorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatorId.Get(), o.CreatorId.IsSet()
}

// HasCreatorId returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasCreatorId() bool {
	if o != nil && o.CreatorId.IsSet() {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given NullableString and assigns it to the CreatorId field.
func (o *AppRunRecordDto) SetCreatorId(v string) {
	o.CreatorId.Set(&v)
}
// SetCreatorIdNil sets the value for CreatorId to be an explicit nil
func (o *AppRunRecordDto) SetCreatorIdNil() {
	o.CreatorId.Set(nil)
}

// UnsetCreatorId ensures that no value is present for CreatorId, not even an explicit nil
func (o *AppRunRecordDto) UnsetCreatorId() {
	o.CreatorId.Unset()
}

// GetLastModificationTime returns the LastModificationTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppRunRecordDto) GetLastModificationTime() time.Time {
	if o == nil || IsNil(o.LastModificationTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastModificationTime.Get()
}

// GetLastModificationTimeOk returns a tuple with the LastModificationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppRunRecordDto) GetLastModificationTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastModificationTime.Get(), o.LastModificationTime.IsSet()
}

// HasLastModificationTime returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasLastModificationTime() bool {
	if o != nil && o.LastModificationTime.IsSet() {
		return true
	}

	return false
}

// SetLastModificationTime gets a reference to the given NullableTime and assigns it to the LastModificationTime field.
func (o *AppRunRecordDto) SetLastModificationTime(v time.Time) {
	o.LastModificationTime.Set(&v)
}
// SetLastModificationTimeNil sets the value for LastModificationTime to be an explicit nil
func (o *AppRunRecordDto) SetLastModificationTimeNil() {
	o.LastModificationTime.Set(nil)
}

// UnsetLastModificationTime ensures that no value is present for LastModificationTime, not even an explicit nil
func (o *AppRunRecordDto) UnsetLastModificationTime() {
	o.LastModificationTime.Unset()
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppRunRecordDto) GetLastModifierId() string {
	if o == nil || IsNil(o.LastModifierId.Get()) {
		var ret string
		return ret
	}
	return *o.LastModifierId.Get()
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppRunRecordDto) GetLastModifierIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastModifierId.Get(), o.LastModifierId.IsSet()
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasLastModifierId() bool {
	if o != nil && o.LastModifierId.IsSet() {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given NullableString and assigns it to the LastModifierId field.
func (o *AppRunRecordDto) SetLastModifierId(v string) {
	o.LastModifierId.Set(&v)
}
// SetLastModifierIdNil sets the value for LastModifierId to be an explicit nil
func (o *AppRunRecordDto) SetLastModifierIdNil() {
	o.LastModifierId.Set(nil)
}

// UnsetLastModifierId ensures that no value is present for LastModifierId, not even an explicit nil
func (o *AppRunRecordDto) UnsetLastModifierId() {
	o.LastModifierId.Unset()
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetIsDeleted() bool {
	if o == nil || IsNil(o.IsDeleted) {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetIsDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeleted) {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasIsDeleted() bool {
	if o != nil && !IsNil(o.IsDeleted) {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *AppRunRecordDto) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetDeleterId returns the DeleterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppRunRecordDto) GetDeleterId() string {
	if o == nil || IsNil(o.DeleterId.Get()) {
		var ret string
		return ret
	}
	return *o.DeleterId.Get()
}

// GetDeleterIdOk returns a tuple with the DeleterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppRunRecordDto) GetDeleterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeleterId.Get(), o.DeleterId.IsSet()
}

// HasDeleterId returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasDeleterId() bool {
	if o != nil && o.DeleterId.IsSet() {
		return true
	}

	return false
}

// SetDeleterId gets a reference to the given NullableString and assigns it to the DeleterId field.
func (o *AppRunRecordDto) SetDeleterId(v string) {
	o.DeleterId.Set(&v)
}
// SetDeleterIdNil sets the value for DeleterId to be an explicit nil
func (o *AppRunRecordDto) SetDeleterIdNil() {
	o.DeleterId.Set(nil)
}

// UnsetDeleterId ensures that no value is present for DeleterId, not even an explicit nil
func (o *AppRunRecordDto) UnsetDeleterId() {
	o.DeleterId.Unset()
}

// GetDeletionTime returns the DeletionTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppRunRecordDto) GetDeletionTime() time.Time {
	if o == nil || IsNil(o.DeletionTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DeletionTime.Get()
}

// GetDeletionTimeOk returns a tuple with the DeletionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppRunRecordDto) GetDeletionTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeletionTime.Get(), o.DeletionTime.IsSet()
}

// HasDeletionTime returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasDeletionTime() bool {
	if o != nil && o.DeletionTime.IsSet() {
		return true
	}

	return false
}

// SetDeletionTime gets a reference to the given NullableTime and assigns it to the DeletionTime field.
func (o *AppRunRecordDto) SetDeletionTime(v time.Time) {
	o.DeletionTime.Set(&v)
}
// SetDeletionTimeNil sets the value for DeletionTime to be an explicit nil
func (o *AppRunRecordDto) SetDeletionTimeNil() {
	o.DeletionTime.Set(nil)
}

// UnsetDeletionTime ensures that no value is present for DeletionTime, not even an explicit nil
func (o *AppRunRecordDto) UnsetDeletionTime() {
	o.DeletionTime.Unset()
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *AppRunRecordDto) SetAppId(v string) {
	o.AppId = &v
}

// GetAppName returns the AppName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppRunRecordDto) GetAppName() string {
	if o == nil || IsNil(o.AppName.Get()) {
		var ret string
		return ret
	}
	return *o.AppName.Get()
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppRunRecordDto) GetAppNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppName.Get(), o.AppName.IsSet()
}

// HasAppName returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasAppName() bool {
	if o != nil && o.AppName.IsSet() {
		return true
	}

	return false
}

// SetAppName gets a reference to the given NullableString and assigns it to the AppName field.
func (o *AppRunRecordDto) SetAppName(v string) {
	o.AppName.Set(&v)
}
// SetAppNameNil sets the value for AppName to be an explicit nil
func (o *AppRunRecordDto) SetAppNameNil() {
	o.AppName.Set(nil)
}

// UnsetAppName ensures that no value is present for AppName, not even an explicit nil
func (o *AppRunRecordDto) UnsetAppName() {
	o.AppName.Unset()
}

// GetArgs returns the Args field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppRunRecordDto) GetArgs() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppRunRecordDto) GetArgsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Args) {
		return nil, false
	}
	return &o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasArgs() bool {
	if o != nil && IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given interface{} and assigns it to the Args field.
func (o *AppRunRecordDto) SetArgs(v interface{}) {
	o.Args = v
}

// GetEnvs returns the Envs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppRunRecordDto) GetEnvs() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Envs
}

// GetEnvsOk returns a tuple with the Envs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppRunRecordDto) GetEnvsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Envs) {
		return nil, false
	}
	return &o.Envs, true
}

// HasEnvs returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasEnvs() bool {
	if o != nil && IsNil(o.Envs) {
		return true
	}

	return false
}

// SetEnvs gets a reference to the given interface{} and assigns it to the Envs field.
func (o *AppRunRecordDto) SetEnvs(v interface{}) {
	o.Envs = v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppRunRecordDto) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppRunRecordDto) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *AppRunRecordDto) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *AppRunRecordDto) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *AppRunRecordDto) UnsetStatus() {
	o.Status.Unset()
}

// GetResult returns the Result field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppRunRecordDto) GetResult() string {
	if o == nil || IsNil(o.Result.Get()) {
		var ret string
		return ret
	}
	return *o.Result.Get()
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppRunRecordDto) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Result.Get(), o.Result.IsSet()
}

// HasResult returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasResult() bool {
	if o != nil && o.Result.IsSet() {
		return true
	}

	return false
}

// SetResult gets a reference to the given NullableString and assigns it to the Result field.
func (o *AppRunRecordDto) SetResult(v string) {
	o.Result.Set(&v)
}
// SetResultNil sets the value for Result to be an explicit nil
func (o *AppRunRecordDto) SetResultNil() {
	o.Result.Set(nil)
}

// UnsetResult ensures that no value is present for Result, not even an explicit nil
func (o *AppRunRecordDto) UnsetResult() {
	o.Result.Unset()
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppRunRecordDto) GetError() string {
	if o == nil || IsNil(o.Error.Get()) {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppRunRecordDto) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *AppRunRecordDto) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *AppRunRecordDto) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *AppRunRecordDto) UnsetError() {
	o.Error.Unset()
}

// GetFinishAt returns the FinishAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppRunRecordDto) GetFinishAt() time.Time {
	if o == nil || IsNil(o.FinishAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FinishAt.Get()
}

// GetFinishAtOk returns a tuple with the FinishAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppRunRecordDto) GetFinishAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FinishAt.Get(), o.FinishAt.IsSet()
}

// HasFinishAt returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasFinishAt() bool {
	if o != nil && o.FinishAt.IsSet() {
		return true
	}

	return false
}

// SetFinishAt gets a reference to the given NullableTime and assigns it to the FinishAt field.
func (o *AppRunRecordDto) SetFinishAt(v time.Time) {
	o.FinishAt.Set(&v)
}
// SetFinishAtNil sets the value for FinishAt to be an explicit nil
func (o *AppRunRecordDto) SetFinishAtNil() {
	o.FinishAt.Set(nil)
}

// UnsetFinishAt ensures that no value is present for FinishAt, not even an explicit nil
func (o *AppRunRecordDto) UnsetFinishAt() {
	o.FinishAt.Unset()
}

// GetOutput returns the Output field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppRunRecordDto) GetOutput() string {
	if o == nil || IsNil(o.Output.Get()) {
		var ret string
		return ret
	}
	return *o.Output.Get()
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppRunRecordDto) GetOutputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Output.Get(), o.Output.IsSet()
}

// HasOutput returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasOutput() bool {
	if o != nil && o.Output.IsSet() {
		return true
	}

	return false
}

// SetOutput gets a reference to the given NullableString and assigns it to the Output field.
func (o *AppRunRecordDto) SetOutput(v string) {
	o.Output.Set(&v)
}
// SetOutputNil sets the value for Output to be an explicit nil
func (o *AppRunRecordDto) SetOutputNil() {
	o.Output.Set(nil)
}

// UnsetOutput ensures that no value is present for Output, not even an explicit nil
func (o *AppRunRecordDto) UnsetOutput() {
	o.Output.Unset()
}

// GetWorkerId returns the WorkerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppRunRecordDto) GetWorkerId() string {
	if o == nil || IsNil(o.WorkerId.Get()) {
		var ret string
		return ret
	}
	return *o.WorkerId.Get()
}

// GetWorkerIdOk returns a tuple with the WorkerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppRunRecordDto) GetWorkerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkerId.Get(), o.WorkerId.IsSet()
}

// HasWorkerId returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasWorkerId() bool {
	if o != nil && o.WorkerId.IsSet() {
		return true
	}

	return false
}

// SetWorkerId gets a reference to the given NullableString and assigns it to the WorkerId field.
func (o *AppRunRecordDto) SetWorkerId(v string) {
	o.WorkerId.Set(&v)
}
// SetWorkerIdNil sets the value for WorkerId to be an explicit nil
func (o *AppRunRecordDto) SetWorkerIdNil() {
	o.WorkerId.Set(nil)
}

// UnsetWorkerId ensures that no value is present for WorkerId, not even an explicit nil
func (o *AppRunRecordDto) UnsetWorkerId() {
	o.WorkerId.Unset()
}

// GetWorkerName returns the WorkerName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppRunRecordDto) GetWorkerName() string {
	if o == nil || IsNil(o.WorkerName.Get()) {
		var ret string
		return ret
	}
	return *o.WorkerName.Get()
}

// GetWorkerNameOk returns a tuple with the WorkerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppRunRecordDto) GetWorkerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkerName.Get(), o.WorkerName.IsSet()
}

// HasWorkerName returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasWorkerName() bool {
	if o != nil && o.WorkerName.IsSet() {
		return true
	}

	return false
}

// SetWorkerName gets a reference to the given NullableString and assigns it to the WorkerName field.
func (o *AppRunRecordDto) SetWorkerName(v string) {
	o.WorkerName.Set(&v)
}
// SetWorkerNameNil sets the value for WorkerName to be an explicit nil
func (o *AppRunRecordDto) SetWorkerNameNil() {
	o.WorkerName.Set(nil)
}

// UnsetWorkerName ensures that no value is present for WorkerName, not even an explicit nil
func (o *AppRunRecordDto) UnsetWorkerName() {
	o.WorkerName.Unset()
}

func (o AppRunRecordDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppRunRecordDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creationTime"] = o.CreationTime
	}
	if o.CreatorId.IsSet() {
		toSerialize["creatorId"] = o.CreatorId.Get()
	}
	if o.LastModificationTime.IsSet() {
		toSerialize["lastModificationTime"] = o.LastModificationTime.Get()
	}
	if o.LastModifierId.IsSet() {
		toSerialize["lastModifierId"] = o.LastModifierId.Get()
	}
	if !IsNil(o.IsDeleted) {
		toSerialize["isDeleted"] = o.IsDeleted
	}
	if o.DeleterId.IsSet() {
		toSerialize["deleterId"] = o.DeleterId.Get()
	}
	if o.DeletionTime.IsSet() {
		toSerialize["deletionTime"] = o.DeletionTime.Get()
	}
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if o.AppName.IsSet() {
		toSerialize["appName"] = o.AppName.Get()
	}
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	if o.Envs != nil {
		toSerialize["envs"] = o.Envs
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Result.IsSet() {
		toSerialize["result"] = o.Result.Get()
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.FinishAt.IsSet() {
		toSerialize["finishAt"] = o.FinishAt.Get()
	}
	if o.Output.IsSet() {
		toSerialize["output"] = o.Output.Get()
	}
	if o.WorkerId.IsSet() {
		toSerialize["workerId"] = o.WorkerId.Get()
	}
	if o.WorkerName.IsSet() {
		toSerialize["workerName"] = o.WorkerName.Get()
	}
	return toSerialize, nil
}

type NullableAppRunRecordDto struct {
	value *AppRunRecordDto
	isSet bool
}

func (v NullableAppRunRecordDto) Get() *AppRunRecordDto {
	return v.value
}

func (v *NullableAppRunRecordDto) Set(val *AppRunRecordDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAppRunRecordDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAppRunRecordDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppRunRecordDto(val *AppRunRecordDto) *NullableAppRunRecordDto {
	return &NullableAppRunRecordDto{value: val, isSet: true}
}

func (v NullableAppRunRecordDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppRunRecordDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


