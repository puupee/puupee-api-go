/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"time"
)

// checks if the AppRunRecordDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppRunRecordDto{}

// AppRunRecordDto struct for AppRunRecordDto
type AppRunRecordDto struct {
	Id *string `json:"id,omitempty"`
	CreationTime *time.Time `json:"creationTime,omitempty"`
	CreatorId *string `json:"creatorId,omitempty"`
	LastModificationTime *time.Time `json:"lastModificationTime,omitempty"`
	LastModifierId *string `json:"lastModifierId,omitempty"`
	IsDeleted *bool `json:"isDeleted,omitempty"`
	DeleterId *string `json:"deleterId,omitempty"`
	DeletionTime *time.Time `json:"deletionTime,omitempty"`
	AppId *string `json:"appId,omitempty"`
	AppName *string `json:"appName,omitempty"`
	Args map[string]interface{} `json:"args,omitempty"`
	Envs map[string]interface{} `json:"envs,omitempty"`
	Status *AppRunStatus `json:"status,omitempty"`
	Result *string `json:"result,omitempty"`
	Error *string `json:"error,omitempty"`
	FinishAt *time.Time `json:"finishAt,omitempty"`
	Output *string `json:"output,omitempty"`
	WorkerId *string `json:"workerId,omitempty"`
	WorkerName *string `json:"workerName,omitempty"`
}

// NewAppRunRecordDto instantiates a new AppRunRecordDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppRunRecordDto() *AppRunRecordDto {
	this := AppRunRecordDto{}
	return &this
}

// NewAppRunRecordDtoWithDefaults instantiates a new AppRunRecordDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppRunRecordDtoWithDefaults() *AppRunRecordDto {
	this := AppRunRecordDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AppRunRecordDto) SetId(v string) {
	o.Id = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetCreationTime() time.Time {
	if o == nil || IsNil(o.CreationTime) {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *AppRunRecordDto) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *AppRunRecordDto) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetLastModificationTime returns the LastModificationTime field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetLastModificationTime() time.Time {
	if o == nil || IsNil(o.LastModificationTime) {
		var ret time.Time
		return ret
	}
	return *o.LastModificationTime
}

// GetLastModificationTimeOk returns a tuple with the LastModificationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetLastModificationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastModificationTime) {
		return nil, false
	}
	return o.LastModificationTime, true
}

// HasLastModificationTime returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasLastModificationTime() bool {
	if o != nil && !IsNil(o.LastModificationTime) {
		return true
	}

	return false
}

// SetLastModificationTime gets a reference to the given time.Time and assigns it to the LastModificationTime field.
func (o *AppRunRecordDto) SetLastModificationTime(v time.Time) {
	o.LastModificationTime = &v
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetLastModifierId() string {
	if o == nil || IsNil(o.LastModifierId) {
		var ret string
		return ret
	}
	return *o.LastModifierId
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetLastModifierIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifierId) {
		return nil, false
	}
	return o.LastModifierId, true
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasLastModifierId() bool {
	if o != nil && !IsNil(o.LastModifierId) {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given string and assigns it to the LastModifierId field.
func (o *AppRunRecordDto) SetLastModifierId(v string) {
	o.LastModifierId = &v
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetIsDeleted() bool {
	if o == nil || IsNil(o.IsDeleted) {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetIsDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeleted) {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasIsDeleted() bool {
	if o != nil && !IsNil(o.IsDeleted) {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *AppRunRecordDto) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetDeleterId returns the DeleterId field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetDeleterId() string {
	if o == nil || IsNil(o.DeleterId) {
		var ret string
		return ret
	}
	return *o.DeleterId
}

// GetDeleterIdOk returns a tuple with the DeleterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetDeleterIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeleterId) {
		return nil, false
	}
	return o.DeleterId, true
}

// HasDeleterId returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasDeleterId() bool {
	if o != nil && !IsNil(o.DeleterId) {
		return true
	}

	return false
}

// SetDeleterId gets a reference to the given string and assigns it to the DeleterId field.
func (o *AppRunRecordDto) SetDeleterId(v string) {
	o.DeleterId = &v
}

// GetDeletionTime returns the DeletionTime field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetDeletionTime() time.Time {
	if o == nil || IsNil(o.DeletionTime) {
		var ret time.Time
		return ret
	}
	return *o.DeletionTime
}

// GetDeletionTimeOk returns a tuple with the DeletionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetDeletionTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletionTime) {
		return nil, false
	}
	return o.DeletionTime, true
}

// HasDeletionTime returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasDeletionTime() bool {
	if o != nil && !IsNil(o.DeletionTime) {
		return true
	}

	return false
}

// SetDeletionTime gets a reference to the given time.Time and assigns it to the DeletionTime field.
func (o *AppRunRecordDto) SetDeletionTime(v time.Time) {
	o.DeletionTime = &v
}

// GetAppId returns the AppId field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetAppId() string {
	if o == nil || IsNil(o.AppId) {
		var ret string
		return ret
	}
	return *o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.AppId) {
		return nil, false
	}
	return o.AppId, true
}

// HasAppId returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasAppId() bool {
	if o != nil && !IsNil(o.AppId) {
		return true
	}

	return false
}

// SetAppId gets a reference to the given string and assigns it to the AppId field.
func (o *AppRunRecordDto) SetAppId(v string) {
	o.AppId = &v
}

// GetAppName returns the AppName field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetAppName() string {
	if o == nil || IsNil(o.AppName) {
		var ret string
		return ret
	}
	return *o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetAppNameOk() (*string, bool) {
	if o == nil || IsNil(o.AppName) {
		return nil, false
	}
	return o.AppName, true
}

// HasAppName returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasAppName() bool {
	if o != nil && !IsNil(o.AppName) {
		return true
	}

	return false
}

// SetAppName gets a reference to the given string and assigns it to the AppName field.
func (o *AppRunRecordDto) SetAppName(v string) {
	o.AppName = &v
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetArgs() map[string]interface{} {
	if o == nil || IsNil(o.Args) {
		var ret map[string]interface{}
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetArgsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Args) {
		return map[string]interface{}{}, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given map[string]interface{} and assigns it to the Args field.
func (o *AppRunRecordDto) SetArgs(v map[string]interface{}) {
	o.Args = v
}

// GetEnvs returns the Envs field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetEnvs() map[string]interface{} {
	if o == nil || IsNil(o.Envs) {
		var ret map[string]interface{}
		return ret
	}
	return o.Envs
}

// GetEnvsOk returns a tuple with the Envs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetEnvsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Envs) {
		return map[string]interface{}{}, false
	}
	return o.Envs, true
}

// HasEnvs returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasEnvs() bool {
	if o != nil && !IsNil(o.Envs) {
		return true
	}

	return false
}

// SetEnvs gets a reference to the given map[string]interface{} and assigns it to the Envs field.
func (o *AppRunRecordDto) SetEnvs(v map[string]interface{}) {
	o.Envs = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetStatus() AppRunStatus {
	if o == nil || IsNil(o.Status) {
		var ret AppRunStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetStatusOk() (*AppRunStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AppRunStatus and assigns it to the Status field.
func (o *AppRunRecordDto) SetStatus(v AppRunStatus) {
	o.Status = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetResult() string {
	if o == nil || IsNil(o.Result) {
		var ret string
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetResultOk() (*string, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given string and assigns it to the Result field.
func (o *AppRunRecordDto) SetResult(v string) {
	o.Result = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *AppRunRecordDto) SetError(v string) {
	o.Error = &v
}

// GetFinishAt returns the FinishAt field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetFinishAt() time.Time {
	if o == nil || IsNil(o.FinishAt) {
		var ret time.Time
		return ret
	}
	return *o.FinishAt
}

// GetFinishAtOk returns a tuple with the FinishAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetFinishAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FinishAt) {
		return nil, false
	}
	return o.FinishAt, true
}

// HasFinishAt returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasFinishAt() bool {
	if o != nil && !IsNil(o.FinishAt) {
		return true
	}

	return false
}

// SetFinishAt gets a reference to the given time.Time and assigns it to the FinishAt field.
func (o *AppRunRecordDto) SetFinishAt(v time.Time) {
	o.FinishAt = &v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetOutput() string {
	if o == nil || IsNil(o.Output) {
		var ret string
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetOutputOk() (*string, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given string and assigns it to the Output field.
func (o *AppRunRecordDto) SetOutput(v string) {
	o.Output = &v
}

// GetWorkerId returns the WorkerId field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetWorkerId() string {
	if o == nil || IsNil(o.WorkerId) {
		var ret string
		return ret
	}
	return *o.WorkerId
}

// GetWorkerIdOk returns a tuple with the WorkerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetWorkerIdOk() (*string, bool) {
	if o == nil || IsNil(o.WorkerId) {
		return nil, false
	}
	return o.WorkerId, true
}

// HasWorkerId returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasWorkerId() bool {
	if o != nil && !IsNil(o.WorkerId) {
		return true
	}

	return false
}

// SetWorkerId gets a reference to the given string and assigns it to the WorkerId field.
func (o *AppRunRecordDto) SetWorkerId(v string) {
	o.WorkerId = &v
}

// GetWorkerName returns the WorkerName field value if set, zero value otherwise.
func (o *AppRunRecordDto) GetWorkerName() string {
	if o == nil || IsNil(o.WorkerName) {
		var ret string
		return ret
	}
	return *o.WorkerName
}

// GetWorkerNameOk returns a tuple with the WorkerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunRecordDto) GetWorkerNameOk() (*string, bool) {
	if o == nil || IsNil(o.WorkerName) {
		return nil, false
	}
	return o.WorkerName, true
}

// HasWorkerName returns a boolean if a field has been set.
func (o *AppRunRecordDto) HasWorkerName() bool {
	if o != nil && !IsNil(o.WorkerName) {
		return true
	}

	return false
}

// SetWorkerName gets a reference to the given string and assigns it to the WorkerName field.
func (o *AppRunRecordDto) SetWorkerName(v string) {
	o.WorkerName = &v
}

func (o AppRunRecordDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppRunRecordDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creationTime"] = o.CreationTime
	}
	if !IsNil(o.CreatorId) {
		toSerialize["creatorId"] = o.CreatorId
	}
	if !IsNil(o.LastModificationTime) {
		toSerialize["lastModificationTime"] = o.LastModificationTime
	}
	if !IsNil(o.LastModifierId) {
		toSerialize["lastModifierId"] = o.LastModifierId
	}
	if !IsNil(o.IsDeleted) {
		toSerialize["isDeleted"] = o.IsDeleted
	}
	if !IsNil(o.DeleterId) {
		toSerialize["deleterId"] = o.DeleterId
	}
	if !IsNil(o.DeletionTime) {
		toSerialize["deletionTime"] = o.DeletionTime
	}
	if !IsNil(o.AppId) {
		toSerialize["appId"] = o.AppId
	}
	if !IsNil(o.AppName) {
		toSerialize["appName"] = o.AppName
	}
	if !IsNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	if !IsNil(o.Envs) {
		toSerialize["envs"] = o.Envs
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.FinishAt) {
		toSerialize["finishAt"] = o.FinishAt
	}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	if !IsNil(o.WorkerId) {
		toSerialize["workerId"] = o.WorkerId
	}
	if !IsNil(o.WorkerName) {
		toSerialize["workerName"] = o.WorkerName
	}
	return toSerialize, nil
}

type NullableAppRunRecordDto struct {
	value *AppRunRecordDto
	isSet bool
}

func (v NullableAppRunRecordDto) Get() *AppRunRecordDto {
	return v.value
}

func (v *NullableAppRunRecordDto) Set(val *AppRunRecordDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAppRunRecordDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAppRunRecordDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppRunRecordDto(val *AppRunRecordDto) *NullableAppRunRecordDto {
	return &NullableAppRunRecordDto{value: val, isSet: true}
}

func (v NullableAppRunRecordDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppRunRecordDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


