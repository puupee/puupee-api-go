/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
)

// ObjectExtensionsDto struct for ObjectExtensionsDto
type ObjectExtensionsDto struct {
	Modules *map[string]ModuleExtensionDto `json:"modules,omitempty"`
	Enums *map[string]ExtensionEnumDto `json:"enums,omitempty"`
}

// NewObjectExtensionsDto instantiates a new ObjectExtensionsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectExtensionsDto() *ObjectExtensionsDto {
	this := ObjectExtensionsDto{}
	return &this
}

// NewObjectExtensionsDtoWithDefaults instantiates a new ObjectExtensionsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectExtensionsDtoWithDefaults() *ObjectExtensionsDto {
	this := ObjectExtensionsDto{}
	return &this
}

// GetModules returns the Modules field value if set, zero value otherwise.
func (o *ObjectExtensionsDto) GetModules() map[string]ModuleExtensionDto {
	if o == nil || isNil(o.Modules) {
		var ret map[string]ModuleExtensionDto
		return ret
	}
	return *o.Modules
}

// GetModulesOk returns a tuple with the Modules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectExtensionsDto) GetModulesOk() (*map[string]ModuleExtensionDto, bool) {
	if o == nil || isNil(o.Modules) {
    return nil, false
	}
	return o.Modules, true
}

// HasModules returns a boolean if a field has been set.
func (o *ObjectExtensionsDto) HasModules() bool {
	if o != nil && !isNil(o.Modules) {
		return true
	}

	return false
}

// SetModules gets a reference to the given map[string]ModuleExtensionDto and assigns it to the Modules field.
func (o *ObjectExtensionsDto) SetModules(v map[string]ModuleExtensionDto) {
	o.Modules = &v
}

// GetEnums returns the Enums field value if set, zero value otherwise.
func (o *ObjectExtensionsDto) GetEnums() map[string]ExtensionEnumDto {
	if o == nil || isNil(o.Enums) {
		var ret map[string]ExtensionEnumDto
		return ret
	}
	return *o.Enums
}

// GetEnumsOk returns a tuple with the Enums field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectExtensionsDto) GetEnumsOk() (*map[string]ExtensionEnumDto, bool) {
	if o == nil || isNil(o.Enums) {
    return nil, false
	}
	return o.Enums, true
}

// HasEnums returns a boolean if a field has been set.
func (o *ObjectExtensionsDto) HasEnums() bool {
	if o != nil && !isNil(o.Enums) {
		return true
	}

	return false
}

// SetEnums gets a reference to the given map[string]ExtensionEnumDto and assigns it to the Enums field.
func (o *ObjectExtensionsDto) SetEnums(v map[string]ExtensionEnumDto) {
	o.Enums = &v
}

func (o ObjectExtensionsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Modules) {
		toSerialize["modules"] = o.Modules
	}
	if !isNil(o.Enums) {
		toSerialize["enums"] = o.Enums
	}
	return json.Marshal(toSerialize)
}

type NullableObjectExtensionsDto struct {
	value *ObjectExtensionsDto
	isSet bool
}

func (v NullableObjectExtensionsDto) Get() *ObjectExtensionsDto {
	return v.value
}

func (v *NullableObjectExtensionsDto) Set(val *ObjectExtensionsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectExtensionsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectExtensionsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectExtensionsDto(val *ObjectExtensionsDto) *NullableObjectExtensionsDto {
	return &NullableObjectExtensionsDto{value: val, isSet: true}
}

func (v NullableObjectExtensionsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectExtensionsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


