/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.17.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"fmt"
)

// AppPriceNaming the model 'AppPriceNaming'
type AppPriceNaming string

// List of AppPriceNaming
const (
	APPPRICENAMING_FREE AppPriceNaming = "Free"
	APPPRICENAMING_PREMIUM AppPriceNaming = "Premium"
	APPPRICENAMING_PRO AppPriceNaming = "Pro"
	APPPRICENAMING_ENTERPRISE AppPriceNaming = "Enterprise"
)

// All allowed values of AppPriceNaming enum
var AllowedAppPriceNamingEnumValues = []AppPriceNaming{
	"Free",
	"Premium",
	"Pro",
	"Enterprise",
}

func (v *AppPriceNaming) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppPriceNaming(value)
	for _, existing := range AllowedAppPriceNamingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppPriceNaming", value)
}

// NewAppPriceNamingFromValue returns a pointer to a valid AppPriceNaming
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppPriceNamingFromValue(v string) (*AppPriceNaming, error) {
	ev := AppPriceNaming(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppPriceNaming: valid values are %v", v, AllowedAppPriceNamingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppPriceNaming) IsValid() bool {
	for _, existing := range AllowedAppPriceNamingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppPriceNaming value
func (v AppPriceNaming) Ptr() *AppPriceNaming {
	return &v
}

type NullableAppPriceNaming struct {
	value *AppPriceNaming
	isSet bool
}

func (v NullableAppPriceNaming) Get() *AppPriceNaming {
	return v.value
}

func (v *NullableAppPriceNaming) Set(val *AppPriceNaming) {
	v.value = val
	v.isSet = true
}

func (v NullableAppPriceNaming) IsSet() bool {
	return v.isSet
}

func (v *NullableAppPriceNaming) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppPriceNaming(val *AppPriceNaming) *NullableAppPriceNaming {
	return &NullableAppPriceNaming{value: val, isSet: true}
}

func (v NullableAppPriceNaming) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppPriceNaming) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

