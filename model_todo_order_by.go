/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"fmt"
)

// TodoOrderBy the model 'TodoOrderBy'
type TodoOrderBy string

// List of TodoOrderBy
const (
	TODOORDERBY_CREATION_TIME TodoOrderBy = "CreationTime"
	TODOORDERBY_CREATION_TIME_DESC TodoOrderBy = "CreationTimeDesc"
	TODOORDERBY_LAST_MODIFICATION_TIME TodoOrderBy = "LastModificationTime"
	TODOORDERBY_LAST_MODIFICATION_TIME_DESC TodoOrderBy = "LastModificationTimeDesc"
	TODOORDERBY_TITLE TodoOrderBy = "Title"
	TODOORDERBY_TITLE_DESC TodoOrderBy = "TitleDesc"
	TODOORDERBY_PRIORITY TodoOrderBy = "Priority"
	TODOORDERBY_PRIORITY_DESC TodoOrderBy = "PriorityDesc"
	TODOORDERBY_TAG TodoOrderBy = "Tag"
	TODOORDERBY_TAG_DESC TodoOrderBy = "TagDesc"
)

// All allowed values of TodoOrderBy enum
var AllowedTodoOrderByEnumValues = []TodoOrderBy{
	"CreationTime",
	"CreationTimeDesc",
	"LastModificationTime",
	"LastModificationTimeDesc",
	"Title",
	"TitleDesc",
	"Priority",
	"PriorityDesc",
	"Tag",
	"TagDesc",
}

func (v *TodoOrderBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TodoOrderBy(value)
	for _, existing := range AllowedTodoOrderByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TodoOrderBy", value)
}

// NewTodoOrderByFromValue returns a pointer to a valid TodoOrderBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTodoOrderByFromValue(v string) (*TodoOrderBy, error) {
	ev := TodoOrderBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TodoOrderBy: valid values are %v", v, AllowedTodoOrderByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TodoOrderBy) IsValid() bool {
	for _, existing := range AllowedTodoOrderByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TodoOrderBy value
func (v TodoOrderBy) Ptr() *TodoOrderBy {
	return &v
}

type NullableTodoOrderBy struct {
	value *TodoOrderBy
	isSet bool
}

func (v NullableTodoOrderBy) Get() *TodoOrderBy {
	return v.value
}

func (v *NullableTodoOrderBy) Set(val *TodoOrderBy) {
	v.value = val
	v.isSet = true
}

func (v NullableTodoOrderBy) IsSet() bool {
	return v.isSet
}

func (v *NullableTodoOrderBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTodoOrderBy(val *TodoOrderBy) *NullableTodoOrderBy {
	return &NullableTodoOrderBy{value: val, isSet: true}
}

func (v NullableTodoOrderBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTodoOrderBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

