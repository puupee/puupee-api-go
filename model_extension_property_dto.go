/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.17.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
)

// checks if the ExtensionPropertyDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionPropertyDto{}

// ExtensionPropertyDto struct for ExtensionPropertyDto
type ExtensionPropertyDto struct {
	Type *string `json:"type,omitempty"`
	TypeSimple *string `json:"typeSimple,omitempty"`
	DisplayName *LocalizableStringDto `json:"displayName,omitempty"`
	Api *ExtensionPropertyApiDto `json:"api,omitempty"`
	Ui *ExtensionPropertyUiDto `json:"ui,omitempty"`
	Attributes []ExtensionPropertyAttributeDto `json:"attributes,omitempty"`
	Configuration map[string]map[string]interface{} `json:"configuration,omitempty"`
	DefaultValue map[string]interface{} `json:"defaultValue,omitempty"`
}

// NewExtensionPropertyDto instantiates a new ExtensionPropertyDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionPropertyDto() *ExtensionPropertyDto {
	this := ExtensionPropertyDto{}
	return &this
}

// NewExtensionPropertyDtoWithDefaults instantiates a new ExtensionPropertyDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionPropertyDtoWithDefaults() *ExtensionPropertyDto {
	this := ExtensionPropertyDto{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ExtensionPropertyDto) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionPropertyDto) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ExtensionPropertyDto) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ExtensionPropertyDto) SetType(v string) {
	o.Type = &v
}

// GetTypeSimple returns the TypeSimple field value if set, zero value otherwise.
func (o *ExtensionPropertyDto) GetTypeSimple() string {
	if o == nil || IsNil(o.TypeSimple) {
		var ret string
		return ret
	}
	return *o.TypeSimple
}

// GetTypeSimpleOk returns a tuple with the TypeSimple field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionPropertyDto) GetTypeSimpleOk() (*string, bool) {
	if o == nil || IsNil(o.TypeSimple) {
		return nil, false
	}
	return o.TypeSimple, true
}

// HasTypeSimple returns a boolean if a field has been set.
func (o *ExtensionPropertyDto) HasTypeSimple() bool {
	if o != nil && !IsNil(o.TypeSimple) {
		return true
	}

	return false
}

// SetTypeSimple gets a reference to the given string and assigns it to the TypeSimple field.
func (o *ExtensionPropertyDto) SetTypeSimple(v string) {
	o.TypeSimple = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ExtensionPropertyDto) GetDisplayName() LocalizableStringDto {
	if o == nil || IsNil(o.DisplayName) {
		var ret LocalizableStringDto
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionPropertyDto) GetDisplayNameOk() (*LocalizableStringDto, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ExtensionPropertyDto) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given LocalizableStringDto and assigns it to the DisplayName field.
func (o *ExtensionPropertyDto) SetDisplayName(v LocalizableStringDto) {
	o.DisplayName = &v
}

// GetApi returns the Api field value if set, zero value otherwise.
func (o *ExtensionPropertyDto) GetApi() ExtensionPropertyApiDto {
	if o == nil || IsNil(o.Api) {
		var ret ExtensionPropertyApiDto
		return ret
	}
	return *o.Api
}

// GetApiOk returns a tuple with the Api field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionPropertyDto) GetApiOk() (*ExtensionPropertyApiDto, bool) {
	if o == nil || IsNil(o.Api) {
		return nil, false
	}
	return o.Api, true
}

// HasApi returns a boolean if a field has been set.
func (o *ExtensionPropertyDto) HasApi() bool {
	if o != nil && !IsNil(o.Api) {
		return true
	}

	return false
}

// SetApi gets a reference to the given ExtensionPropertyApiDto and assigns it to the Api field.
func (o *ExtensionPropertyDto) SetApi(v ExtensionPropertyApiDto) {
	o.Api = &v
}

// GetUi returns the Ui field value if set, zero value otherwise.
func (o *ExtensionPropertyDto) GetUi() ExtensionPropertyUiDto {
	if o == nil || IsNil(o.Ui) {
		var ret ExtensionPropertyUiDto
		return ret
	}
	return *o.Ui
}

// GetUiOk returns a tuple with the Ui field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionPropertyDto) GetUiOk() (*ExtensionPropertyUiDto, bool) {
	if o == nil || IsNil(o.Ui) {
		return nil, false
	}
	return o.Ui, true
}

// HasUi returns a boolean if a field has been set.
func (o *ExtensionPropertyDto) HasUi() bool {
	if o != nil && !IsNil(o.Ui) {
		return true
	}

	return false
}

// SetUi gets a reference to the given ExtensionPropertyUiDto and assigns it to the Ui field.
func (o *ExtensionPropertyDto) SetUi(v ExtensionPropertyUiDto) {
	o.Ui = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *ExtensionPropertyDto) GetAttributes() []ExtensionPropertyAttributeDto {
	if o == nil || IsNil(o.Attributes) {
		var ret []ExtensionPropertyAttributeDto
		return ret
	}
	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionPropertyDto) GetAttributesOk() ([]ExtensionPropertyAttributeDto, bool) {
	if o == nil || IsNil(o.Attributes) {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *ExtensionPropertyDto) HasAttributes() bool {
	if o != nil && !IsNil(o.Attributes) {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given []ExtensionPropertyAttributeDto and assigns it to the Attributes field.
func (o *ExtensionPropertyDto) SetAttributes(v []ExtensionPropertyAttributeDto) {
	o.Attributes = v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *ExtensionPropertyDto) GetConfiguration() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Configuration) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionPropertyDto) GetConfigurationOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Configuration) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *ExtensionPropertyDto) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]map[string]interface{} and assigns it to the Configuration field.
func (o *ExtensionPropertyDto) SetConfiguration(v map[string]map[string]interface{}) {
	o.Configuration = v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *ExtensionPropertyDto) GetDefaultValue() map[string]interface{} {
	if o == nil || IsNil(o.DefaultValue) {
		var ret map[string]interface{}
		return ret
	}
	return o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionPropertyDto) GetDefaultValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return map[string]interface{}{}, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *ExtensionPropertyDto) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given map[string]interface{} and assigns it to the DefaultValue field.
func (o *ExtensionPropertyDto) SetDefaultValue(v map[string]interface{}) {
	o.DefaultValue = v
}

func (o ExtensionPropertyDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionPropertyDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.TypeSimple) {
		toSerialize["typeSimple"] = o.TypeSimple
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Api) {
		toSerialize["api"] = o.Api
	}
	if !IsNil(o.Ui) {
		toSerialize["ui"] = o.Ui
	}
	if !IsNil(o.Attributes) {
		toSerialize["attributes"] = o.Attributes
	}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["defaultValue"] = o.DefaultValue
	}
	return toSerialize, nil
}

type NullableExtensionPropertyDto struct {
	value *ExtensionPropertyDto
	isSet bool
}

func (v NullableExtensionPropertyDto) Get() *ExtensionPropertyDto {
	return v.value
}

func (v *NullableExtensionPropertyDto) Set(val *ExtensionPropertyDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionPropertyDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionPropertyDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionPropertyDto(val *ExtensionPropertyDto) *NullableExtensionPropertyDto {
	return &NullableExtensionPropertyDto{value: val, isSet: true}
}

func (v NullableExtensionPropertyDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionPropertyDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


