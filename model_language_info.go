/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
)

// checks if the LanguageInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LanguageInfo{}

// LanguageInfo struct for LanguageInfo
type LanguageInfo struct {
	CultureName NullableString `json:"cultureName,omitempty"`
	UiCultureName NullableString `json:"uiCultureName,omitempty"`
	DisplayName NullableString `json:"displayName,omitempty"`
	TwoLetterISOLanguageName NullableString `json:"twoLetterISOLanguageName,omitempty"`
	FlagIcon NullableString `json:"flagIcon,omitempty"`
}

// NewLanguageInfo instantiates a new LanguageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguageInfo() *LanguageInfo {
	this := LanguageInfo{}
	return &this
}

// NewLanguageInfoWithDefaults instantiates a new LanguageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguageInfoWithDefaults() *LanguageInfo {
	this := LanguageInfo{}
	return &this
}

// GetCultureName returns the CultureName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LanguageInfo) GetCultureName() string {
	if o == nil || IsNil(o.CultureName.Get()) {
		var ret string
		return ret
	}
	return *o.CultureName.Get()
}

// GetCultureNameOk returns a tuple with the CultureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LanguageInfo) GetCultureNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CultureName.Get(), o.CultureName.IsSet()
}

// HasCultureName returns a boolean if a field has been set.
func (o *LanguageInfo) HasCultureName() bool {
	if o != nil && o.CultureName.IsSet() {
		return true
	}

	return false
}

// SetCultureName gets a reference to the given NullableString and assigns it to the CultureName field.
func (o *LanguageInfo) SetCultureName(v string) {
	o.CultureName.Set(&v)
}
// SetCultureNameNil sets the value for CultureName to be an explicit nil
func (o *LanguageInfo) SetCultureNameNil() {
	o.CultureName.Set(nil)
}

// UnsetCultureName ensures that no value is present for CultureName, not even an explicit nil
func (o *LanguageInfo) UnsetCultureName() {
	o.CultureName.Unset()
}

// GetUiCultureName returns the UiCultureName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LanguageInfo) GetUiCultureName() string {
	if o == nil || IsNil(o.UiCultureName.Get()) {
		var ret string
		return ret
	}
	return *o.UiCultureName.Get()
}

// GetUiCultureNameOk returns a tuple with the UiCultureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LanguageInfo) GetUiCultureNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UiCultureName.Get(), o.UiCultureName.IsSet()
}

// HasUiCultureName returns a boolean if a field has been set.
func (o *LanguageInfo) HasUiCultureName() bool {
	if o != nil && o.UiCultureName.IsSet() {
		return true
	}

	return false
}

// SetUiCultureName gets a reference to the given NullableString and assigns it to the UiCultureName field.
func (o *LanguageInfo) SetUiCultureName(v string) {
	o.UiCultureName.Set(&v)
}
// SetUiCultureNameNil sets the value for UiCultureName to be an explicit nil
func (o *LanguageInfo) SetUiCultureNameNil() {
	o.UiCultureName.Set(nil)
}

// UnsetUiCultureName ensures that no value is present for UiCultureName, not even an explicit nil
func (o *LanguageInfo) UnsetUiCultureName() {
	o.UiCultureName.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LanguageInfo) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName.Get()) {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LanguageInfo) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *LanguageInfo) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *LanguageInfo) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *LanguageInfo) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *LanguageInfo) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetTwoLetterISOLanguageName returns the TwoLetterISOLanguageName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LanguageInfo) GetTwoLetterISOLanguageName() string {
	if o == nil || IsNil(o.TwoLetterISOLanguageName.Get()) {
		var ret string
		return ret
	}
	return *o.TwoLetterISOLanguageName.Get()
}

// GetTwoLetterISOLanguageNameOk returns a tuple with the TwoLetterISOLanguageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LanguageInfo) GetTwoLetterISOLanguageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TwoLetterISOLanguageName.Get(), o.TwoLetterISOLanguageName.IsSet()
}

// HasTwoLetterISOLanguageName returns a boolean if a field has been set.
func (o *LanguageInfo) HasTwoLetterISOLanguageName() bool {
	if o != nil && o.TwoLetterISOLanguageName.IsSet() {
		return true
	}

	return false
}

// SetTwoLetterISOLanguageName gets a reference to the given NullableString and assigns it to the TwoLetterISOLanguageName field.
func (o *LanguageInfo) SetTwoLetterISOLanguageName(v string) {
	o.TwoLetterISOLanguageName.Set(&v)
}
// SetTwoLetterISOLanguageNameNil sets the value for TwoLetterISOLanguageName to be an explicit nil
func (o *LanguageInfo) SetTwoLetterISOLanguageNameNil() {
	o.TwoLetterISOLanguageName.Set(nil)
}

// UnsetTwoLetterISOLanguageName ensures that no value is present for TwoLetterISOLanguageName, not even an explicit nil
func (o *LanguageInfo) UnsetTwoLetterISOLanguageName() {
	o.TwoLetterISOLanguageName.Unset()
}

// GetFlagIcon returns the FlagIcon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LanguageInfo) GetFlagIcon() string {
	if o == nil || IsNil(o.FlagIcon.Get()) {
		var ret string
		return ret
	}
	return *o.FlagIcon.Get()
}

// GetFlagIconOk returns a tuple with the FlagIcon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LanguageInfo) GetFlagIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FlagIcon.Get(), o.FlagIcon.IsSet()
}

// HasFlagIcon returns a boolean if a field has been set.
func (o *LanguageInfo) HasFlagIcon() bool {
	if o != nil && o.FlagIcon.IsSet() {
		return true
	}

	return false
}

// SetFlagIcon gets a reference to the given NullableString and assigns it to the FlagIcon field.
func (o *LanguageInfo) SetFlagIcon(v string) {
	o.FlagIcon.Set(&v)
}
// SetFlagIconNil sets the value for FlagIcon to be an explicit nil
func (o *LanguageInfo) SetFlagIconNil() {
	o.FlagIcon.Set(nil)
}

// UnsetFlagIcon ensures that no value is present for FlagIcon, not even an explicit nil
func (o *LanguageInfo) UnsetFlagIcon() {
	o.FlagIcon.Unset()
}

func (o LanguageInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LanguageInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CultureName.IsSet() {
		toSerialize["cultureName"] = o.CultureName.Get()
	}
	if o.UiCultureName.IsSet() {
		toSerialize["uiCultureName"] = o.UiCultureName.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.TwoLetterISOLanguageName.IsSet() {
		toSerialize["twoLetterISOLanguageName"] = o.TwoLetterISOLanguageName.Get()
	}
	if o.FlagIcon.IsSet() {
		toSerialize["flagIcon"] = o.FlagIcon.Get()
	}
	return toSerialize, nil
}

type NullableLanguageInfo struct {
	value *LanguageInfo
	isSet bool
}

func (v NullableLanguageInfo) Get() *LanguageInfo {
	return v.value
}

func (v *NullableLanguageInfo) Set(val *LanguageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguageInfo(val *LanguageInfo) *NullableLanguageInfo {
	return &NullableLanguageInfo{value: val, isSet: true}
}

func (v NullableLanguageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


