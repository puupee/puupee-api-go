/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
)

// checks if the SettingsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SettingsDto{}

// SettingsDto struct for SettingsDto
type SettingsDto struct {
	AppTheme *AppTheme `json:"appTheme,omitempty"`
	Language NullableString `json:"language,omitempty"`
	TodoSettings *TodoSettingsDto `json:"todoSettings,omitempty"`
}

// NewSettingsDto instantiates a new SettingsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsDto() *SettingsDto {
	this := SettingsDto{}
	return &this
}

// NewSettingsDtoWithDefaults instantiates a new SettingsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsDtoWithDefaults() *SettingsDto {
	this := SettingsDto{}
	return &this
}

// GetAppTheme returns the AppTheme field value if set, zero value otherwise.
func (o *SettingsDto) GetAppTheme() AppTheme {
	if o == nil || IsNil(o.AppTheme) {
		var ret AppTheme
		return ret
	}
	return *o.AppTheme
}

// GetAppThemeOk returns a tuple with the AppTheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsDto) GetAppThemeOk() (*AppTheme, bool) {
	if o == nil || IsNil(o.AppTheme) {
		return nil, false
	}
	return o.AppTheme, true
}

// HasAppTheme returns a boolean if a field has been set.
func (o *SettingsDto) HasAppTheme() bool {
	if o != nil && !IsNil(o.AppTheme) {
		return true
	}

	return false
}

// SetAppTheme gets a reference to the given AppTheme and assigns it to the AppTheme field.
func (o *SettingsDto) SetAppTheme(v AppTheme) {
	o.AppTheme = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingsDto) GetLanguage() string {
	if o == nil || IsNil(o.Language.Get()) {
		var ret string
		return ret
	}
	return *o.Language.Get()
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingsDto) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Language.Get(), o.Language.IsSet()
}

// HasLanguage returns a boolean if a field has been set.
func (o *SettingsDto) HasLanguage() bool {
	if o != nil && o.Language.IsSet() {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given NullableString and assigns it to the Language field.
func (o *SettingsDto) SetLanguage(v string) {
	o.Language.Set(&v)
}
// SetLanguageNil sets the value for Language to be an explicit nil
func (o *SettingsDto) SetLanguageNil() {
	o.Language.Set(nil)
}

// UnsetLanguage ensures that no value is present for Language, not even an explicit nil
func (o *SettingsDto) UnsetLanguage() {
	o.Language.Unset()
}

// GetTodoSettings returns the TodoSettings field value if set, zero value otherwise.
func (o *SettingsDto) GetTodoSettings() TodoSettingsDto {
	if o == nil || IsNil(o.TodoSettings) {
		var ret TodoSettingsDto
		return ret
	}
	return *o.TodoSettings
}

// GetTodoSettingsOk returns a tuple with the TodoSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsDto) GetTodoSettingsOk() (*TodoSettingsDto, bool) {
	if o == nil || IsNil(o.TodoSettings) {
		return nil, false
	}
	return o.TodoSettings, true
}

// HasTodoSettings returns a boolean if a field has been set.
func (o *SettingsDto) HasTodoSettings() bool {
	if o != nil && !IsNil(o.TodoSettings) {
		return true
	}

	return false
}

// SetTodoSettings gets a reference to the given TodoSettingsDto and assigns it to the TodoSettings field.
func (o *SettingsDto) SetTodoSettings(v TodoSettingsDto) {
	o.TodoSettings = &v
}

func (o SettingsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SettingsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppTheme) {
		toSerialize["appTheme"] = o.AppTheme
	}
	if o.Language.IsSet() {
		toSerialize["language"] = o.Language.Get()
	}
	if !IsNil(o.TodoSettings) {
		toSerialize["todoSettings"] = o.TodoSettings
	}
	return toSerialize, nil
}

type NullableSettingsDto struct {
	value *SettingsDto
	isSet bool
}

func (v NullableSettingsDto) Get() *SettingsDto {
	return v.value
}

func (v *NullableSettingsDto) Set(val *SettingsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsDto(val *SettingsDto) *NullableSettingsDto {
	return &NullableSettingsDto{value: val, isSet: true}
}

func (v NullableSettingsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


