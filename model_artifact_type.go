/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.17.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"fmt"
)

// ArtifactType Represents the type of an artifact.
type ArtifactType string

// List of ArtifactType
const (
	ARTIFACTTYPE_APK ArtifactType = "Apk"
	ARTIFACTTYPE_IPA ArtifactType = "Ipa"
	ARTIFACTTYPE_EXE ArtifactType = "Exe"
	ARTIFACTTYPE_MSI ArtifactType = "Msi"
	ARTIFACTTYPE_DMG ArtifactType = "Dmg"
	ARTIFACTTYPE_PKG ArtifactType = "Pkg"
	ARTIFACTTYPE_APP_IMAGE ArtifactType = "AppImage"
	ARTIFACTTYPE_WEB ArtifactType = "Web"
	ARTIFACTTYPE_SERVICE ArtifactType = "Service"
	ARTIFACTTYPE_APP_STORE ArtifactType = "AppStore"
	ARTIFACTTYPE_GOOGLE_PLAY ArtifactType = "GooglePlay"
	ARTIFACTTYPE_MAC_APP_STORE ArtifactType = "MacAppStore"
	ARTIFACTTYPE_MICROSOFT_STORE ArtifactType = "MicrosoftStore"
	ARTIFACTTYPE_OTHER ArtifactType = "Other"
)

// All allowed values of ArtifactType enum
var AllowedArtifactTypeEnumValues = []ArtifactType{
	"Apk",
	"Ipa",
	"Exe",
	"Msi",
	"Dmg",
	"Pkg",
	"AppImage",
	"Web",
	"Service",
	"AppStore",
	"GooglePlay",
	"MacAppStore",
	"MicrosoftStore",
	"Other",
}

func (v *ArtifactType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ArtifactType(value)
	for _, existing := range AllowedArtifactTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ArtifactType", value)
}

// NewArtifactTypeFromValue returns a pointer to a valid ArtifactType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewArtifactTypeFromValue(v string) (*ArtifactType, error) {
	ev := ArtifactType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ArtifactType: valid values are %v", v, AllowedArtifactTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ArtifactType) IsValid() bool {
	for _, existing := range AllowedArtifactTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ArtifactType value
func (v ArtifactType) Ptr() *ArtifactType {
	return &v
}

type NullableArtifactType struct {
	value *ArtifactType
	isSet bool
}

func (v NullableArtifactType) Get() *ArtifactType {
	return v.value
}

func (v *NullableArtifactType) Set(val *ArtifactType) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactType) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactType(val *ArtifactType) *NullableArtifactType {
	return &NullableArtifactType{value: val, isSet: true}
}

func (v NullableArtifactType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

