/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
)

// UserStorageItemDto struct for UserStorageItemDto
type UserStorageItemDto struct {
	Name *string `json:"name,omitempty"`
	Title *string `json:"title,omitempty"`
	Count *int32 `json:"count,omitempty"`
	Size *int64 `json:"size,omitempty"`
}

// NewUserStorageItemDto instantiates a new UserStorageItemDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserStorageItemDto() *UserStorageItemDto {
	this := UserStorageItemDto{}
	return &this
}

// NewUserStorageItemDtoWithDefaults instantiates a new UserStorageItemDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserStorageItemDtoWithDefaults() *UserStorageItemDto {
	this := UserStorageItemDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserStorageItemDto) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStorageItemDto) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserStorageItemDto) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserStorageItemDto) SetName(v string) {
	o.Name = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *UserStorageItemDto) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStorageItemDto) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
    return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *UserStorageItemDto) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *UserStorageItemDto) SetTitle(v string) {
	o.Title = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *UserStorageItemDto) GetCount() int32 {
	if o == nil || isNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStorageItemDto) GetCountOk() (*int32, bool) {
	if o == nil || isNil(o.Count) {
    return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *UserStorageItemDto) HasCount() bool {
	if o != nil && !isNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *UserStorageItemDto) SetCount(v int32) {
	o.Count = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *UserStorageItemDto) GetSize() int64 {
	if o == nil || isNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserStorageItemDto) GetSizeOk() (*int64, bool) {
	if o == nil || isNil(o.Size) {
    return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *UserStorageItemDto) HasSize() bool {
	if o != nil && !isNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *UserStorageItemDto) SetSize(v int64) {
	o.Size = &v
}

func (o UserStorageItemDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !isNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableUserStorageItemDto struct {
	value *UserStorageItemDto
	isSet bool
}

func (v NullableUserStorageItemDto) Get() *UserStorageItemDto {
	return v.value
}

func (v *NullableUserStorageItemDto) Set(val *UserStorageItemDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUserStorageItemDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUserStorageItemDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserStorageItemDto(val *UserStorageItemDto) *NullableUserStorageItemDto {
	return &NullableUserStorageItemDto{value: val, isSet: true}
}

func (v NullableUserStorageItemDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserStorageItemDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


