/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"time"
)

// checks if the StorageObjectDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageObjectDto{}

// StorageObjectDto struct for StorageObjectDto
type StorageObjectDto struct {
	Id *string `json:"id,omitempty"`
	CreationTime *time.Time `json:"creationTime,omitempty"`
	CreatorId *string `json:"creatorId,omitempty"`
	LastModificationTime *time.Time `json:"lastModificationTime,omitempty"`
	LastModifierId *string `json:"lastModifierId,omitempty"`
	IsDeleted *bool `json:"isDeleted,omitempty"`
	DeleterId *string `json:"deleterId,omitempty"`
	DeletionTime *time.Time `json:"deletionTime,omitempty"`
	Name *string `json:"name,omitempty"`
	Url *string `json:"url,omitempty"`
	SyncVersion *int64 `json:"syncVersion,omitempty"`
	Key *string `json:"key,omitempty"`
	Size *int64 `json:"size,omitempty"`
	Md5 *string `json:"md5,omitempty"`
	SliceMd5 *string `json:"sliceMd5,omitempty"`
	RapidCode *string `json:"rapidCode,omitempty"`
	ContentType *string `json:"contentType,omitempty"`
	Extension *string `json:"extension,omitempty"`
	StorageClass *string `json:"storageClass,omitempty"`
	StorageObjectCreatedAt *time.Time `json:"storageObjectCreatedAt,omitempty"`
	StorageObjectUpdatedAt *time.Time `json:"storageObjectUpdatedAt,omitempty"`
	Password *string `json:"password,omitempty"`
}

// NewStorageObjectDto instantiates a new StorageObjectDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageObjectDto() *StorageObjectDto {
	this := StorageObjectDto{}
	return &this
}

// NewStorageObjectDtoWithDefaults instantiates a new StorageObjectDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageObjectDtoWithDefaults() *StorageObjectDto {
	this := StorageObjectDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StorageObjectDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StorageObjectDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *StorageObjectDto) SetId(v string) {
	o.Id = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *StorageObjectDto) GetCreationTime() time.Time {
	if o == nil || IsNil(o.CreationTime) {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *StorageObjectDto) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *StorageObjectDto) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *StorageObjectDto) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *StorageObjectDto) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *StorageObjectDto) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetLastModificationTime returns the LastModificationTime field value if set, zero value otherwise.
func (o *StorageObjectDto) GetLastModificationTime() time.Time {
	if o == nil || IsNil(o.LastModificationTime) {
		var ret time.Time
		return ret
	}
	return *o.LastModificationTime
}

// GetLastModificationTimeOk returns a tuple with the LastModificationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetLastModificationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastModificationTime) {
		return nil, false
	}
	return o.LastModificationTime, true
}

// HasLastModificationTime returns a boolean if a field has been set.
func (o *StorageObjectDto) HasLastModificationTime() bool {
	if o != nil && !IsNil(o.LastModificationTime) {
		return true
	}

	return false
}

// SetLastModificationTime gets a reference to the given time.Time and assigns it to the LastModificationTime field.
func (o *StorageObjectDto) SetLastModificationTime(v time.Time) {
	o.LastModificationTime = &v
}

// GetLastModifierId returns the LastModifierId field value if set, zero value otherwise.
func (o *StorageObjectDto) GetLastModifierId() string {
	if o == nil || IsNil(o.LastModifierId) {
		var ret string
		return ret
	}
	return *o.LastModifierId
}

// GetLastModifierIdOk returns a tuple with the LastModifierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetLastModifierIdOk() (*string, bool) {
	if o == nil || IsNil(o.LastModifierId) {
		return nil, false
	}
	return o.LastModifierId, true
}

// HasLastModifierId returns a boolean if a field has been set.
func (o *StorageObjectDto) HasLastModifierId() bool {
	if o != nil && !IsNil(o.LastModifierId) {
		return true
	}

	return false
}

// SetLastModifierId gets a reference to the given string and assigns it to the LastModifierId field.
func (o *StorageObjectDto) SetLastModifierId(v string) {
	o.LastModifierId = &v
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *StorageObjectDto) GetIsDeleted() bool {
	if o == nil || IsNil(o.IsDeleted) {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetIsDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeleted) {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *StorageObjectDto) HasIsDeleted() bool {
	if o != nil && !IsNil(o.IsDeleted) {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *StorageObjectDto) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetDeleterId returns the DeleterId field value if set, zero value otherwise.
func (o *StorageObjectDto) GetDeleterId() string {
	if o == nil || IsNil(o.DeleterId) {
		var ret string
		return ret
	}
	return *o.DeleterId
}

// GetDeleterIdOk returns a tuple with the DeleterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetDeleterIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeleterId) {
		return nil, false
	}
	return o.DeleterId, true
}

// HasDeleterId returns a boolean if a field has been set.
func (o *StorageObjectDto) HasDeleterId() bool {
	if o != nil && !IsNil(o.DeleterId) {
		return true
	}

	return false
}

// SetDeleterId gets a reference to the given string and assigns it to the DeleterId field.
func (o *StorageObjectDto) SetDeleterId(v string) {
	o.DeleterId = &v
}

// GetDeletionTime returns the DeletionTime field value if set, zero value otherwise.
func (o *StorageObjectDto) GetDeletionTime() time.Time {
	if o == nil || IsNil(o.DeletionTime) {
		var ret time.Time
		return ret
	}
	return *o.DeletionTime
}

// GetDeletionTimeOk returns a tuple with the DeletionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetDeletionTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletionTime) {
		return nil, false
	}
	return o.DeletionTime, true
}

// HasDeletionTime returns a boolean if a field has been set.
func (o *StorageObjectDto) HasDeletionTime() bool {
	if o != nil && !IsNil(o.DeletionTime) {
		return true
	}

	return false
}

// SetDeletionTime gets a reference to the given time.Time and assigns it to the DeletionTime field.
func (o *StorageObjectDto) SetDeletionTime(v time.Time) {
	o.DeletionTime = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StorageObjectDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StorageObjectDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StorageObjectDto) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *StorageObjectDto) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *StorageObjectDto) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *StorageObjectDto) SetUrl(v string) {
	o.Url = &v
}

// GetSyncVersion returns the SyncVersion field value if set, zero value otherwise.
func (o *StorageObjectDto) GetSyncVersion() int64 {
	if o == nil || IsNil(o.SyncVersion) {
		var ret int64
		return ret
	}
	return *o.SyncVersion
}

// GetSyncVersionOk returns a tuple with the SyncVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetSyncVersionOk() (*int64, bool) {
	if o == nil || IsNil(o.SyncVersion) {
		return nil, false
	}
	return o.SyncVersion, true
}

// HasSyncVersion returns a boolean if a field has been set.
func (o *StorageObjectDto) HasSyncVersion() bool {
	if o != nil && !IsNil(o.SyncVersion) {
		return true
	}

	return false
}

// SetSyncVersion gets a reference to the given int64 and assigns it to the SyncVersion field.
func (o *StorageObjectDto) SetSyncVersion(v int64) {
	o.SyncVersion = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *StorageObjectDto) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *StorageObjectDto) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *StorageObjectDto) SetKey(v string) {
	o.Key = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *StorageObjectDto) GetSize() int64 {
	if o == nil || IsNil(o.Size) {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *StorageObjectDto) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *StorageObjectDto) SetSize(v int64) {
	o.Size = &v
}

// GetMd5 returns the Md5 field value if set, zero value otherwise.
func (o *StorageObjectDto) GetMd5() string {
	if o == nil || IsNil(o.Md5) {
		var ret string
		return ret
	}
	return *o.Md5
}

// GetMd5Ok returns a tuple with the Md5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetMd5Ok() (*string, bool) {
	if o == nil || IsNil(o.Md5) {
		return nil, false
	}
	return o.Md5, true
}

// HasMd5 returns a boolean if a field has been set.
func (o *StorageObjectDto) HasMd5() bool {
	if o != nil && !IsNil(o.Md5) {
		return true
	}

	return false
}

// SetMd5 gets a reference to the given string and assigns it to the Md5 field.
func (o *StorageObjectDto) SetMd5(v string) {
	o.Md5 = &v
}

// GetSliceMd5 returns the SliceMd5 field value if set, zero value otherwise.
func (o *StorageObjectDto) GetSliceMd5() string {
	if o == nil || IsNil(o.SliceMd5) {
		var ret string
		return ret
	}
	return *o.SliceMd5
}

// GetSliceMd5Ok returns a tuple with the SliceMd5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetSliceMd5Ok() (*string, bool) {
	if o == nil || IsNil(o.SliceMd5) {
		return nil, false
	}
	return o.SliceMd5, true
}

// HasSliceMd5 returns a boolean if a field has been set.
func (o *StorageObjectDto) HasSliceMd5() bool {
	if o != nil && !IsNil(o.SliceMd5) {
		return true
	}

	return false
}

// SetSliceMd5 gets a reference to the given string and assigns it to the SliceMd5 field.
func (o *StorageObjectDto) SetSliceMd5(v string) {
	o.SliceMd5 = &v
}

// GetRapidCode returns the RapidCode field value if set, zero value otherwise.
func (o *StorageObjectDto) GetRapidCode() string {
	if o == nil || IsNil(o.RapidCode) {
		var ret string
		return ret
	}
	return *o.RapidCode
}

// GetRapidCodeOk returns a tuple with the RapidCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetRapidCodeOk() (*string, bool) {
	if o == nil || IsNil(o.RapidCode) {
		return nil, false
	}
	return o.RapidCode, true
}

// HasRapidCode returns a boolean if a field has been set.
func (o *StorageObjectDto) HasRapidCode() bool {
	if o != nil && !IsNil(o.RapidCode) {
		return true
	}

	return false
}

// SetRapidCode gets a reference to the given string and assigns it to the RapidCode field.
func (o *StorageObjectDto) SetRapidCode(v string) {
	o.RapidCode = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *StorageObjectDto) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *StorageObjectDto) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *StorageObjectDto) SetContentType(v string) {
	o.ContentType = &v
}

// GetExtension returns the Extension field value if set, zero value otherwise.
func (o *StorageObjectDto) GetExtension() string {
	if o == nil || IsNil(o.Extension) {
		var ret string
		return ret
	}
	return *o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.Extension) {
		return nil, false
	}
	return o.Extension, true
}

// HasExtension returns a boolean if a field has been set.
func (o *StorageObjectDto) HasExtension() bool {
	if o != nil && !IsNil(o.Extension) {
		return true
	}

	return false
}

// SetExtension gets a reference to the given string and assigns it to the Extension field.
func (o *StorageObjectDto) SetExtension(v string) {
	o.Extension = &v
}

// GetStorageClass returns the StorageClass field value if set, zero value otherwise.
func (o *StorageObjectDto) GetStorageClass() string {
	if o == nil || IsNil(o.StorageClass) {
		var ret string
		return ret
	}
	return *o.StorageClass
}

// GetStorageClassOk returns a tuple with the StorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetStorageClassOk() (*string, bool) {
	if o == nil || IsNil(o.StorageClass) {
		return nil, false
	}
	return o.StorageClass, true
}

// HasStorageClass returns a boolean if a field has been set.
func (o *StorageObjectDto) HasStorageClass() bool {
	if o != nil && !IsNil(o.StorageClass) {
		return true
	}

	return false
}

// SetStorageClass gets a reference to the given string and assigns it to the StorageClass field.
func (o *StorageObjectDto) SetStorageClass(v string) {
	o.StorageClass = &v
}

// GetStorageObjectCreatedAt returns the StorageObjectCreatedAt field value if set, zero value otherwise.
func (o *StorageObjectDto) GetStorageObjectCreatedAt() time.Time {
	if o == nil || IsNil(o.StorageObjectCreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.StorageObjectCreatedAt
}

// GetStorageObjectCreatedAtOk returns a tuple with the StorageObjectCreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetStorageObjectCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StorageObjectCreatedAt) {
		return nil, false
	}
	return o.StorageObjectCreatedAt, true
}

// HasStorageObjectCreatedAt returns a boolean if a field has been set.
func (o *StorageObjectDto) HasStorageObjectCreatedAt() bool {
	if o != nil && !IsNil(o.StorageObjectCreatedAt) {
		return true
	}

	return false
}

// SetStorageObjectCreatedAt gets a reference to the given time.Time and assigns it to the StorageObjectCreatedAt field.
func (o *StorageObjectDto) SetStorageObjectCreatedAt(v time.Time) {
	o.StorageObjectCreatedAt = &v
}

// GetStorageObjectUpdatedAt returns the StorageObjectUpdatedAt field value if set, zero value otherwise.
func (o *StorageObjectDto) GetStorageObjectUpdatedAt() time.Time {
	if o == nil || IsNil(o.StorageObjectUpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.StorageObjectUpdatedAt
}

// GetStorageObjectUpdatedAtOk returns a tuple with the StorageObjectUpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetStorageObjectUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StorageObjectUpdatedAt) {
		return nil, false
	}
	return o.StorageObjectUpdatedAt, true
}

// HasStorageObjectUpdatedAt returns a boolean if a field has been set.
func (o *StorageObjectDto) HasStorageObjectUpdatedAt() bool {
	if o != nil && !IsNil(o.StorageObjectUpdatedAt) {
		return true
	}

	return false
}

// SetStorageObjectUpdatedAt gets a reference to the given time.Time and assigns it to the StorageObjectUpdatedAt field.
func (o *StorageObjectDto) SetStorageObjectUpdatedAt(v time.Time) {
	o.StorageObjectUpdatedAt = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *StorageObjectDto) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageObjectDto) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *StorageObjectDto) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *StorageObjectDto) SetPassword(v string) {
	o.Password = &v
}

func (o StorageObjectDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageObjectDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creationTime"] = o.CreationTime
	}
	if !IsNil(o.CreatorId) {
		toSerialize["creatorId"] = o.CreatorId
	}
	if !IsNil(o.LastModificationTime) {
		toSerialize["lastModificationTime"] = o.LastModificationTime
	}
	if !IsNil(o.LastModifierId) {
		toSerialize["lastModifierId"] = o.LastModifierId
	}
	if !IsNil(o.IsDeleted) {
		toSerialize["isDeleted"] = o.IsDeleted
	}
	if !IsNil(o.DeleterId) {
		toSerialize["deleterId"] = o.DeleterId
	}
	if !IsNil(o.DeletionTime) {
		toSerialize["deletionTime"] = o.DeletionTime
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.SyncVersion) {
		toSerialize["syncVersion"] = o.SyncVersion
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Md5) {
		toSerialize["md5"] = o.Md5
	}
	if !IsNil(o.SliceMd5) {
		toSerialize["sliceMd5"] = o.SliceMd5
	}
	if !IsNil(o.RapidCode) {
		toSerialize["rapidCode"] = o.RapidCode
	}
	if !IsNil(o.ContentType) {
		toSerialize["contentType"] = o.ContentType
	}
	if !IsNil(o.Extension) {
		toSerialize["extension"] = o.Extension
	}
	if !IsNil(o.StorageClass) {
		toSerialize["storageClass"] = o.StorageClass
	}
	if !IsNil(o.StorageObjectCreatedAt) {
		toSerialize["storageObjectCreatedAt"] = o.StorageObjectCreatedAt
	}
	if !IsNil(o.StorageObjectUpdatedAt) {
		toSerialize["storageObjectUpdatedAt"] = o.StorageObjectUpdatedAt
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableStorageObjectDto struct {
	value *StorageObjectDto
	isSet bool
}

func (v NullableStorageObjectDto) Get() *StorageObjectDto {
	return v.value
}

func (v *NullableStorageObjectDto) Set(val *StorageObjectDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageObjectDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageObjectDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageObjectDto(val *StorageObjectDto) *NullableStorageObjectDto {
	return &NullableStorageObjectDto{value: val, isSet: true}
}

func (v NullableStorageObjectDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageObjectDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


