openapi: 3.0.1
info:
  title: Puupee API
  version: v1
servers:
- url: /
security:
- oauth2: []
paths:
  /api/abp/api-definition:
    get:
      parameters:
      - in: query
        name: IncludeTypes
        schema:
          type: boolean
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApplicationApiDescriptionModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationApiDescriptionModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ApplicationApiDescriptionModel'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - AbpApiDefinition
  /api/abp/application-configuration:
    get:
      parameters:
      - in: query
        name: IncludeLocalizationResources
        schema:
          type: boolean
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApplicationConfigurationDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationConfigurationDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ApplicationConfigurationDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - AbpApplicationConfiguration
  /api/abp/application-localization:
    get:
      parameters:
      - in: query
        name: CultureName
        required: true
        schema:
          type: string
      - in: query
        name: OnlyDynamics
        schema:
          type: boolean
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApplicationLocalizationDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationLocalizationDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ApplicationLocalizationDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - AbpApplicationLocalization
  /api/abp/multi-tenancy/tenants/by-name/{name}:
    get:
      parameters:
      - in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FindTenantResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/FindTenantResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/FindTenantResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - AbpTenant
  /api/abp/multi-tenancy/tenants/by-id/{id}:
    get:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FindTenantResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/FindTenantResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/FindTenantResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - AbpTenant
  /api/account/register:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
          text/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Account
      x-codegen-request-body-name: body
  /api/account/send-password-reset-code:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendPasswordResetCodeDto'
          text/json:
            schema:
              $ref: '#/components/schemas/SendPasswordResetCodeDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SendPasswordResetCodeDto'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Account
      x-codegen-request-body-name: body
  /api/account/verify-password-reset-token:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyPasswordResetTokenInput'
          text/json:
            schema:
              $ref: '#/components/schemas/VerifyPasswordResetTokenInput'
          application/*+json:
            schema:
              $ref: '#/components/schemas/VerifyPasswordResetTokenInput'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Account
      x-codegen-request-body-name: body
  /api/account/reset-password:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordDto'
          text/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ResetPasswordDto'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Account
      x-codegen-request-body-name: body
  /api/app/app:
    get:
      parameters:
      - in: query
        name: CreatorId
        schema:
          format: uuid
          type: string
      - in: query
        name: Sorting
        schema:
          type: string
      - in: query
        name: SkipCount
        schema:
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
      - in: query
        name: MaxResultCount
        schema:
          format: int32
          maximum: 2147483647
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AppDtoPagedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AppDtoPagedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AppDtoPagedResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - App
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateAppDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateAppDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateAppDto'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AppDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AppDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AppDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - App
      x-codegen-request-body-name: body
  /api/app/app/{id}:
    delete:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - App
    get:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AppDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AppDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AppDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - App
    put:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateAppDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateAppDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateAppDto'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AppDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AppDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AppDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - App
      x-codegen-request-body-name: body
  /api/app/app/by-name:
    get:
      parameters:
      - in: query
        name: name
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AppDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AppDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AppDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - App
  /api/app/app/storage-object-or-credentials:
    get:
      parameters:
      - in: query
        name: rapidCode
        schema:
          type: string
      - in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StorageObjectOrCredentialsDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StorageObjectOrCredentialsDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StorageObjectOrCredentialsDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - App
  /api/app/app/by-developer:
    get:
      parameters:
      - in: query
        name: developerAccount
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AppDtoPagedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AppDtoPagedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AppDtoPagedResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - App
  /api/app/app-release:
    get:
      parameters:
      - in: query
        name: AppId
        schema:
          format: uuid
          type: string
      - in: query
        name: Environment
        schema:
          type: string
      - in: query
        name: Platform.Name
        schema:
          type: string
      - in: query
        name: Platform.Value
        schema:
          type: string
      - in: query
        name: Sorting
        schema:
          type: string
      - in: query
        name: SkipCount
        schema:
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
      - in: query
        name: MaxResultCount
        schema:
          format: int32
          maximum: 2147483647
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AppReleaseDtoPagedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AppReleaseDtoPagedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AppReleaseDtoPagedResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - AppRelease
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateAppReleaseDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateAppReleaseDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateAppReleaseDto'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AppReleaseDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AppReleaseDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AppReleaseDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - AppRelease
      x-codegen-request-body-name: body
  /api/app/app-release/{id}:
    delete:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - AppRelease
    get:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AppReleaseDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AppReleaseDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AppReleaseDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - AppRelease
    put:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateAppReleaseDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateAppReleaseDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateAppReleaseDto'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AppReleaseDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AppReleaseDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AppReleaseDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - AppRelease
      x-codegen-request-body-name: body
  /api/app/app-user-score:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateAppUserScoreDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateUpdateAppUserScoreDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateUpdateAppUserScoreDto'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AppUserScoreDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AppUserScoreDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AppUserScoreDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - AppUserScore
      x-codegen-request-body-name: body
  /api/app/device/bind:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BindDeviceDto'
          text/json:
            schema:
              $ref: '#/components/schemas/BindDeviceDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BindDeviceDto'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Device
      x-codegen-request-body-name: body
  /api/app/device:
    delete:
      parameters:
      - in: query
        name: token
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Device
    get:
      parameters:
      - in: query
        name: Sorting
        schema:
          type: string
      - in: query
        name: SkipCount
        schema:
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
      - in: query
        name: MaxResultCount
        schema:
          format: int32
          maximum: 2147483647
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DeviceDtoPagedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceDtoPagedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/DeviceDtoPagedResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Device
  /api/app/device/refresh:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshDeviceStatusDto'
          text/json:
            schema:
              $ref: '#/components/schemas/RefreshDeviceStatusDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RefreshDeviceStatusDto'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Device
      x-codegen-request-body-name: body
  /api/setting-management/emailing:
    get:
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EmailSettingsDto'
            application/json:
              schema:
                $ref: '#/components/schemas/EmailSettingsDto'
            text/json:
              schema:
                $ref: '#/components/schemas/EmailSettingsDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - EmailSettings
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailSettingsDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailSettingsDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateEmailSettingsDto'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - EmailSettings
      x-codegen-request-body-name: body
  /api/setting-management/emailing/send-test-email:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendTestEmailInput'
          text/json:
            schema:
              $ref: '#/components/schemas/SendTestEmailInput'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SendTestEmailInput'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - EmailSettings
      x-codegen-request-body-name: body
  /api/feature-management/features:
    delete:
      parameters:
      - in: query
        name: providerName
        schema:
          type: string
      - in: query
        name: providerKey
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Features
    get:
      parameters:
      - in: query
        name: providerName
        schema:
          type: string
      - in: query
        name: providerKey
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GetFeatureListResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/GetFeatureListResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/GetFeatureListResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Features
    put:
      parameters:
      - in: query
        name: providerName
        schema:
          type: string
      - in: query
        name: providerKey
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFeaturesDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateFeaturesDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateFeaturesDto'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Features
      x-codegen-request-body-name: body
  /api/app/key-value/bool:
    get:
      parameters:
      - in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BooleanKeyValue'
            application/json:
              schema:
                $ref: '#/components/schemas/BooleanKeyValue'
            text/json:
              schema:
                $ref: '#/components/schemas/BooleanKeyValue'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - KeyValue
  /api/app/key-value/date-time:
    get:
      parameters:
      - in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DateTimeKeyValue'
            application/json:
              schema:
                $ref: '#/components/schemas/DateTimeKeyValue'
            text/json:
              schema:
                $ref: '#/components/schemas/DateTimeKeyValue'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - KeyValue
  /api/app/key-value/decimal:
    get:
      parameters:
      - in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DecimalKeyValue'
            application/json:
              schema:
                $ref: '#/components/schemas/DecimalKeyValue'
            text/json:
              schema:
                $ref: '#/components/schemas/DecimalKeyValue'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - KeyValue
  /api/app/key-value/double:
    get:
      parameters:
      - in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DoubleKeyValue'
            application/json:
              schema:
                $ref: '#/components/schemas/DoubleKeyValue'
            text/json:
              schema:
                $ref: '#/components/schemas/DoubleKeyValue'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - KeyValue
  /api/app/key-value/int:
    get:
      parameters:
      - in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Int32KeyValue'
            application/json:
              schema:
                $ref: '#/components/schemas/Int32KeyValue'
            text/json:
              schema:
                $ref: '#/components/schemas/Int32KeyValue'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - KeyValue
  /api/app/key-value/string:
    get:
      parameters:
      - in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StringKeyValue'
            application/json:
              schema:
                $ref: '#/components/schemas/StringKeyValue'
            text/json:
              schema:
                $ref: '#/components/schemas/StringKeyValue'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - KeyValue
  /api/app/key-value/set-bool:
    post:
      parameters:
      - in: query
        name: key
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BooleanSetKeyValueDto'
          text/json:
            schema:
              $ref: '#/components/schemas/BooleanSetKeyValueDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BooleanSetKeyValueDto'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - KeyValue
      x-codegen-request-body-name: body
  /api/app/key-value/set-date-time:
    post:
      parameters:
      - in: query
        name: key
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DateTimeSetKeyValueDto'
          text/json:
            schema:
              $ref: '#/components/schemas/DateTimeSetKeyValueDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DateTimeSetKeyValueDto'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - KeyValue
      x-codegen-request-body-name: body
  /api/app/key-value/set-decimal:
    post:
      parameters:
      - in: query
        name: key
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecimalSetKeyValueDto'
          text/json:
            schema:
              $ref: '#/components/schemas/DecimalSetKeyValueDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DecimalSetKeyValueDto'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - KeyValue
      x-codegen-request-body-name: body
  /api/app/key-value/set-double:
    post:
      parameters:
      - in: query
        name: key
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DoubleSetKeyValueDto'
          text/json:
            schema:
              $ref: '#/components/schemas/DoubleSetKeyValueDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DoubleSetKeyValueDto'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - KeyValue
      x-codegen-request-body-name: body
  /api/app/key-value/set-int:
    post:
      parameters:
      - in: query
        name: key
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Int32SetKeyValueDto'
          text/json:
            schema:
              $ref: '#/components/schemas/Int32SetKeyValueDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Int32SetKeyValueDto'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - KeyValue
      x-codegen-request-body-name: body
  /api/app/key-value/set-string:
    post:
      parameters:
      - in: query
        name: key
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StringSetKeyValueDto'
          text/json:
            schema:
              $ref: '#/components/schemas/StringSetKeyValueDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/StringSetKeyValueDto'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - KeyValue
      x-codegen-request-body-name: body
  /api/account/login:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/UserLoginInfo'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserLoginInfo'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AbpLoginResult'
            application/json:
              schema:
                $ref: '#/components/schemas/AbpLoginResult'
            text/json:
              schema:
                $ref: '#/components/schemas/AbpLoginResult'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Login
      x-codegen-request-body-name: body
  /api/account/logout:
    get:
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Login
  /api/account/check-password:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginInfo'
          text/json:
            schema:
              $ref: '#/components/schemas/UserLoginInfo'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserLoginInfo'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AbpLoginResult'
            application/json:
              schema:
                $ref: '#/components/schemas/AbpLoginResult'
            text/json:
              schema:
                $ref: '#/components/schemas/AbpLoginResult'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Login
      x-codegen-request-body-name: body
  /api/permission-management/permissions:
    get:
      parameters:
      - in: query
        name: providerName
        schema:
          type: string
      - in: query
        name: providerKey
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GetPermissionListResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/GetPermissionListResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/GetPermissionListResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Permissions
    put:
      parameters:
      - in: query
        name: providerName
        schema:
          type: string
      - in: query
        name: providerKey
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePermissionsDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdatePermissionsDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdatePermissionsDto'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Permissions
      x-codegen-request-body-name: body
  /api/account/my-profile:
    get:
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProfileDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Profile
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileDto'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateProfileDto'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProfileDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Profile
      x-codegen-request-body-name: body
  /api/account/my-profile/change-password:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordInput'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordInput'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangePasswordInput'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Profile
      x-codegen-request-body-name: body
  /api/app/puupee/pull:
    get:
      parameters:
      - in: query
        name: afterVersion
        schema:
          format: int64
          type: integer
      - in: query
        name: skipCount
        schema:
          format: int32
          type: integer
      - in: query
        name: maxResultCount
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PuupeeDtoPagedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PuupeeDtoPagedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PuupeeDtoPagedResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Puupee
  /api/app/puupee/push:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUpdatePuupeeDto'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateUpdatePuupeeDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateUpdatePuupeeDto'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PuupeeDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PuupeeDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PuupeeDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Puupee
      x-codegen-request-body-name: body
  /api/identity/roles/all:
    get:
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityRoleDtoListResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityRoleDtoListResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityRoleDtoListResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Role
  /api/identity/roles:
    get:
      parameters:
      - in: query
        name: Filter
        schema:
          type: string
      - in: query
        name: Sorting
        schema:
          type: string
      - in: query
        name: SkipCount
        schema:
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
      - in: query
        name: MaxResultCount
        schema:
          format: int32
          maximum: 2147483647
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityRoleDtoPagedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityRoleDtoPagedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityRoleDtoPagedResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Role
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityRoleCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityRoleCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityRoleCreateDto'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityRoleDto'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityRoleDto'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityRoleDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Role
      x-codegen-request-body-name: body
  /api/identity/roles/{id}:
    delete:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Role
    get:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityRoleDto'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityRoleDto'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityRoleDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Role
    put:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityRoleUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityRoleUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityRoleUpdateDto'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityRoleDto'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityRoleDto'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityRoleDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Role
      x-codegen-request-body-name: body
  /api/app/settings:
    get:
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SettingsDto'
            application/json:
              schema:
                $ref: '#/components/schemas/SettingsDto'
            text/json:
              schema:
                $ref: '#/components/schemas/SettingsDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Settings
  /api/app/settings/set:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingsDto'
          text/json:
            schema:
              $ref: '#/components/schemas/SettingsDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SettingsDto'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Settings
      x-codegen-request-body-name: body
  /api/app/simple-data/{id}:
    delete:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - SimpleData
    get:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SimpleDataDto'
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleDataDto'
            text/json:
              schema:
                $ref: '#/components/schemas/SimpleDataDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - SimpleData
  /api/app/simple-data:
    get:
      parameters:
      - in: query
        name: Collection
        schema:
          type: string
      - in: query
        name: Sorting
        schema:
          type: string
      - in: query
        name: SkipCount
        schema:
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
      - in: query
        name: MaxResultCount
        schema:
          format: int32
          maximum: 2147483647
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SimpleDataDtoPagedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleDataDtoPagedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/SimpleDataDtoPagedResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - SimpleData
  /api/app/simple-data/save:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleDataDto'
          text/json:
            schema:
              $ref: '#/components/schemas/SimpleDataDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SimpleDataDto'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SimpleDataDto'
            application/json:
              schema:
                $ref: '#/components/schemas/SimpleDataDto'
            text/json:
              schema:
                $ref: '#/components/schemas/SimpleDataDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - SimpleData
      x-codegen-request-body-name: body
  /api/app/storage-object/file:
    get:
      parameters:
      - in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
      tags:
      - StorageObject
  /api/app/storage-object/thumb:
    get:
      parameters:
      - in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
      tags:
      - StorageObject
  /api/app/storage-object/file-or-credentials:
    get:
      parameters:
      - in: query
        name: rapidCode
        schema:
          type: string
      - in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/StorageObjectOrCredentialsDto'
            application/json:
              schema:
                $ref: '#/components/schemas/StorageObjectOrCredentialsDto'
            text/json:
              schema:
                $ref: '#/components/schemas/StorageObjectOrCredentialsDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - StorageObject
  /api/app/storage-object/pre-sign-url:
    post:
      parameters:
      - in: query
        name: key
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - StorageObject
  /api/app/sync-state:
    get:
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SyncStateDto'
            application/json:
              schema:
                $ref: '#/components/schemas/SyncStateDto'
            text/json:
              schema:
                $ref: '#/components/schemas/SyncStateDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - SyncState
  /api/app/sync-state/puupee-changed-eto:
    post:
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PuupeeChangedEto'
            application/json:
              schema:
                $ref: '#/components/schemas/PuupeeChangedEto'
            text/json:
              schema:
                $ref: '#/components/schemas/PuupeeChangedEto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - SyncState
  /api/multi-tenancy/tenants/{id}:
    delete:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Tenant
    get:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TenantDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TenantDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TenantDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Tenant
    put:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/TenantUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TenantUpdateDto'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TenantDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TenantDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TenantDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Tenant
      x-codegen-request-body-name: body
  /api/multi-tenancy/tenants:
    get:
      parameters:
      - in: query
        name: Filter
        schema:
          type: string
      - in: query
        name: Sorting
        schema:
          type: string
      - in: query
        name: SkipCount
        schema:
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
      - in: query
        name: MaxResultCount
        schema:
          format: int32
          maximum: 2147483647
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TenantDtoPagedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TenantDtoPagedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TenantDtoPagedResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Tenant
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/TenantCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TenantCreateDto'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TenantDto'
            application/json:
              schema:
                $ref: '#/components/schemas/TenantDto'
            text/json:
              schema:
                $ref: '#/components/schemas/TenantDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Tenant
      x-codegen-request-body-name: body
  /api/multi-tenancy/tenants/{id}/default-connection-string:
    delete:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Tenant
    get:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Tenant
    put:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      - in: query
        name: defaultConnectionString
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Tenant
  /api/Test/datetime:
    get:
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/TestDateTime'
            application/json:
              schema:
                $ref: '#/components/schemas/TestDateTime'
            text/json:
              schema:
                $ref: '#/components/schemas/TestDateTime'
          description: Success
      tags:
      - Test
  /api/identity/users/{id}:
    delete:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - User
    get:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - User
    put:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityUserUpdateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityUserUpdateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityUserUpdateDto'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - User
      x-codegen-request-body-name: body
  /api/identity/users:
    get:
      parameters:
      - in: query
        name: Filter
        schema:
          type: string
      - in: query
        name: Sorting
        schema:
          type: string
      - in: query
        name: SkipCount
        schema:
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
      - in: query
        name: MaxResultCount
        schema:
          format: int32
          maximum: 2147483647
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityUserDtoPagedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityUserDtoPagedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityUserDtoPagedResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - User
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityUserCreateDto'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityUserCreateDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityUserCreateDto'
        required: false
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - User
      x-codegen-request-body-name: body
  /api/identity/users/{id}/roles:
    get:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityRoleDtoListResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityRoleDtoListResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityRoleDtoListResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - User
    put:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentityUserUpdateRolesDto'
          text/json:
            schema:
              $ref: '#/components/schemas/IdentityUserUpdateRolesDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/IdentityUserUpdateRolesDto'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - User
      x-codegen-request-body-name: body
  /api/identity/users/assignable-roles:
    get:
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityRoleDtoListResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityRoleDtoListResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityRoleDtoListResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - User
  /api/identity/users/by-username/{userName}:
    get:
      parameters:
      - in: path
        name: userName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - User
  /api/identity/users/by-email/{email}:
    get:
      parameters:
      - in: path
        name: email
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityUserDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - User
  /api/identity/users/lookup/{id}:
    get:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserData'
            application/json:
              schema:
                $ref: '#/components/schemas/UserData'
            text/json:
              schema:
                $ref: '#/components/schemas/UserData'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - UserLookup
  /api/identity/users/lookup/by-username/{userName}:
    get:
      parameters:
      - in: path
        name: userName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserData'
            application/json:
              schema:
                $ref: '#/components/schemas/UserData'
            text/json:
              schema:
                $ref: '#/components/schemas/UserData'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - UserLookup
  /api/identity/users/lookup/search:
    get:
      parameters:
      - in: query
        name: Filter
        schema:
          type: string
      - in: query
        name: Sorting
        schema:
          type: string
      - in: query
        name: SkipCount
        schema:
          format: int32
          maximum: 2147483647
          minimum: 0
          type: integer
      - in: query
        name: MaxResultCount
        schema:
          format: int32
          maximum: 2147483647
          minimum: 1
          type: integer
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserDataListResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/UserDataListResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserDataListResultDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - UserLookup
  /api/identity/users/lookup/count:
    get:
      parameters:
      - in: query
        name: Filter
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                format: int64
                type: integer
            application/json:
              schema:
                format: int64
                type: integer
            text/json:
              schema:
                format: int64
                type: integer
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - UserLookup
  /api/app/user-storage:
    get:
      responses:
        "200":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserStorageDto'
            application/json:
              schema:
                $ref: '#/components/schemas/UserStorageDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserStorageDto'
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - UserStorage
  /api/app/verification/send-code:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendVerificationCodeDto'
          text/json:
            schema:
              $ref: '#/components/schemas/SendVerificationCodeDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SendVerificationCodeDto'
        required: false
      responses:
        "200":
          content: {}
          description: Success
        "403":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Forbidden
        "401":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Unauthorized
        "400":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Bad Request
        "404":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Not Found
        "501":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
        "500":
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/RemoteServiceErrorResponse'
          description: Server Error
      tags:
      - Verification
      x-codegen-request-body-name: body
components:
  schemas:
    AbpLoginResult:
      example:
        result: null
        description: description
      properties:
        result:
          $ref: '#/components/schemas/LoginResultType'
        description:
          readOnly: true
          type: string
      type: object
    ActionApiDescriptionModel:
      example:
        allowAnonymous: true
        uniqueName: uniqueName
        supportedVersions:
        - supportedVersions
        - supportedVersions
        parametersOnMethod:
        - typeAsString: typeAsString
          defaultValue: "{}"
          name: name
          typeSimple: typeSimple
          isOptional: true
          type: type
        - typeAsString: typeAsString
          defaultValue: "{}"
          name: name
          typeSimple: typeSimple
          isOptional: true
          type: type
        returnValue:
          typeSimple: typeSimple
          type: type
        implementFrom: implementFrom
        name: name
        httpMethod: httpMethod
        parameters:
        - jsonName: jsonName
          defaultValue: "{}"
          bindingSourceId: bindingSourceId
          name: name
          typeSimple: typeSimple
          constraintTypes:
          - constraintTypes
          - constraintTypes
          isOptional: true
          type: type
          nameOnMethod: nameOnMethod
          descriptorName: descriptorName
        - jsonName: jsonName
          defaultValue: "{}"
          bindingSourceId: bindingSourceId
          name: name
          typeSimple: typeSimple
          constraintTypes:
          - constraintTypes
          - constraintTypes
          isOptional: true
          type: type
          nameOnMethod: nameOnMethod
          descriptorName: descriptorName
        url: url
      properties:
        uniqueName:
          type: string
        name:
          type: string
        httpMethod:
          type: string
        url:
          type: string
        supportedVersions:
          items:
            type: string
          type: array
        parametersOnMethod:
          items:
            $ref: '#/components/schemas/MethodParameterApiDescriptionModel'
          type: array
        parameters:
          items:
            $ref: '#/components/schemas/ParameterApiDescriptionModel'
          type: array
        returnValue:
          $ref: '#/components/schemas/ReturnValueApiDescriptionModel'
        allowAnonymous:
          type: boolean
        implementFrom:
          type: string
      type: object
    AppDto:
      example:
        creationTime: 2000-01-23T04:56:07.000+00:00
        lastModificationTime: 2000-01-23T04:56:07.000+00:00
        displayName: displayName
        creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        icon: icon
        fromework: fromework
        description: description
        deletionTime: 2000-01-23T04:56:07.000+00:00
        gitRepositoryType: gitRepositoryType
        gitRepository: gitRepository
        isDeleted: true
        appType: appType
        name: name
        lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        latestReleases:
        - notes: notes
          creationTime: 2000-01-23T04:56:07.000+00:00
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          downloadUrl: downloadUrl
          channel: channel
          deletionTime: 2000-01-23T04:56:07.000+00:00
          version: version
          platform: platform
          environment: environment
          isDeleted: true
          size: 0
          appId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          isEnabled: true
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          rapidCode: rapidCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sliceMd5: sliceMd5
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          key: key
          productType: productType
          isForceUpdate: true
          md5: md5
        - notes: notes
          creationTime: 2000-01-23T04:56:07.000+00:00
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          downloadUrl: downloadUrl
          channel: channel
          deletionTime: 2000-01-23T04:56:07.000+00:00
          version: version
          platform: platform
          environment: environment
          isDeleted: true
          size: 0
          appId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          isEnabled: true
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          rapidCode: rapidCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sliceMd5: sliceMd5
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          key: key
          productType: productType
          isForceUpdate: true
          md5: md5
      properties:
        id:
          format: uuid
          type: string
        creationTime:
          format: date-time
          type: string
        creatorId:
          format: uuid
          type: string
        lastModificationTime:
          format: date-time
          type: string
        lastModifierId:
          format: uuid
          type: string
        isDeleted:
          type: boolean
        deleterId:
          format: uuid
          type: string
        deletionTime:
          format: date-time
          type: string
        name:
          type: string
        displayName:
          type: string
        fromework:
          type: string
        appType:
          type: string
        description:
          type: string
        icon:
          type: string
        gitRepository:
          type: string
        gitRepositoryType:
          type: string
        latestReleases:
          items:
            $ref: '#/components/schemas/AppReleaseDto'
          type: array
      type: object
    AppDtoPagedResultDto:
      example:
        totalCount: 6
        items:
        - creationTime: 2000-01-23T04:56:07.000+00:00
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          displayName: displayName
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          icon: icon
          fromework: fromework
          description: description
          deletionTime: 2000-01-23T04:56:07.000+00:00
          gitRepositoryType: gitRepositoryType
          gitRepository: gitRepository
          isDeleted: true
          appType: appType
          name: name
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          latestReleases:
          - notes: notes
            creationTime: 2000-01-23T04:56:07.000+00:00
            lastModificationTime: 2000-01-23T04:56:07.000+00:00
            creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            downloadUrl: downloadUrl
            channel: channel
            deletionTime: 2000-01-23T04:56:07.000+00:00
            version: version
            platform: platform
            environment: environment
            isDeleted: true
            size: 0
            appId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            isEnabled: true
            lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            rapidCode: rapidCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            sliceMd5: sliceMd5
            deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            key: key
            productType: productType
            isForceUpdate: true
            md5: md5
          - notes: notes
            creationTime: 2000-01-23T04:56:07.000+00:00
            lastModificationTime: 2000-01-23T04:56:07.000+00:00
            creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            downloadUrl: downloadUrl
            channel: channel
            deletionTime: 2000-01-23T04:56:07.000+00:00
            version: version
            platform: platform
            environment: environment
            isDeleted: true
            size: 0
            appId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            isEnabled: true
            lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            rapidCode: rapidCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            sliceMd5: sliceMd5
            deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            key: key
            productType: productType
            isForceUpdate: true
            md5: md5
        - creationTime: 2000-01-23T04:56:07.000+00:00
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          displayName: displayName
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          icon: icon
          fromework: fromework
          description: description
          deletionTime: 2000-01-23T04:56:07.000+00:00
          gitRepositoryType: gitRepositoryType
          gitRepository: gitRepository
          isDeleted: true
          appType: appType
          name: name
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          latestReleases:
          - notes: notes
            creationTime: 2000-01-23T04:56:07.000+00:00
            lastModificationTime: 2000-01-23T04:56:07.000+00:00
            creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            downloadUrl: downloadUrl
            channel: channel
            deletionTime: 2000-01-23T04:56:07.000+00:00
            version: version
            platform: platform
            environment: environment
            isDeleted: true
            size: 0
            appId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            isEnabled: true
            lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            rapidCode: rapidCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            sliceMd5: sliceMd5
            deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            key: key
            productType: productType
            isForceUpdate: true
            md5: md5
          - notes: notes
            creationTime: 2000-01-23T04:56:07.000+00:00
            lastModificationTime: 2000-01-23T04:56:07.000+00:00
            creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            downloadUrl: downloadUrl
            channel: channel
            deletionTime: 2000-01-23T04:56:07.000+00:00
            version: version
            platform: platform
            environment: environment
            isDeleted: true
            size: 0
            appId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            isEnabled: true
            lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            rapidCode: rapidCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            sliceMd5: sliceMd5
            deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            key: key
            productType: productType
            isForceUpdate: true
            md5: md5
      properties:
        items:
          items:
            $ref: '#/components/schemas/AppDto'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    AppReleaseDto:
      example:
        notes: notes
        creationTime: 2000-01-23T04:56:07.000+00:00
        lastModificationTime: 2000-01-23T04:56:07.000+00:00
        creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        downloadUrl: downloadUrl
        channel: channel
        deletionTime: 2000-01-23T04:56:07.000+00:00
        version: version
        platform: platform
        environment: environment
        isDeleted: true
        size: 0
        appId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        isEnabled: true
        lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        rapidCode: rapidCode
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sliceMd5: sliceMd5
        deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        key: key
        productType: productType
        isForceUpdate: true
        md5: md5
      properties:
        id:
          format: uuid
          type: string
        creationTime:
          format: date-time
          type: string
        creatorId:
          format: uuid
          type: string
        lastModificationTime:
          format: date-time
          type: string
        lastModifierId:
          format: uuid
          type: string
        isDeleted:
          type: boolean
        deleterId:
          format: uuid
          type: string
        deletionTime:
          format: date-time
          type: string
        version:
          type: string
        notes:
          type: string
        platform:
          type: string
        key:
          type: string
        rapidCode:
          type: string
        size:
          format: int64
          type: integer
        md5:
          type: string
        sliceMd5:
          type: string
        downloadUrl:
          type: string
        productType:
          type: string
        isForceUpdate:
          type: boolean
        appId:
          format: uuid
          type: string
        isEnabled:
          type: boolean
        channel:
          type: string
        environment:
          type: string
      type: object
    AppReleaseDtoPagedResultDto:
      example:
        totalCount: 0
        items:
        - notes: notes
          creationTime: 2000-01-23T04:56:07.000+00:00
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          downloadUrl: downloadUrl
          channel: channel
          deletionTime: 2000-01-23T04:56:07.000+00:00
          version: version
          platform: platform
          environment: environment
          isDeleted: true
          size: 0
          appId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          isEnabled: true
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          rapidCode: rapidCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sliceMd5: sliceMd5
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          key: key
          productType: productType
          isForceUpdate: true
          md5: md5
        - notes: notes
          creationTime: 2000-01-23T04:56:07.000+00:00
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          downloadUrl: downloadUrl
          channel: channel
          deletionTime: 2000-01-23T04:56:07.000+00:00
          version: version
          platform: platform
          environment: environment
          isDeleted: true
          size: 0
          appId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          isEnabled: true
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          rapidCode: rapidCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sliceMd5: sliceMd5
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          key: key
          productType: productType
          isForceUpdate: true
          md5: md5
      properties:
        items:
          items:
            $ref: '#/components/schemas/AppReleaseDto'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    AppTheme:
      example:
        themeMode: null
        sourceColor: sourceColor
      properties:
        sourceColor:
          type: string
        themeMode:
          $ref: '#/components/schemas/AppThemeMode'
      type: object
    AppThemeMode:
      enum:
      - System
      - Light
      - Dark
      type: string
    AppUserScoreDto:
      example:
        score: 0
        creationTime: 2000-01-23T04:56:07.000+00:00
        isDeleted: true
        lastModificationTime: 2000-01-23T04:56:07.000+00:00
        appId: appId
        creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        deletionTime: 2000-01-23T04:56:07.000+00:00
        comment: comment
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        creationTime:
          format: date-time
          type: string
        creatorId:
          format: uuid
          type: string
        lastModificationTime:
          format: date-time
          type: string
        lastModifierId:
          format: uuid
          type: string
        isDeleted:
          type: boolean
        deleterId:
          format: uuid
          type: string
        deletionTime:
          format: date-time
          type: string
        appId:
          type: string
        score:
          format: int32
          type: integer
        comment:
          type: string
      type: object
    ApplicationApiDescriptionModel:
      example:
        types:
          key:
            genericArguments:
            - genericArguments
            - genericArguments
            enumNames:
            - enumNames
            - enumNames
            isEnum: true
            properties:
            - isRequired: true
              regex: regex
              jsonName: jsonName
              minLength: 0
              name: name
              typeSimple: typeSimple
              maximum: maximum
              type: type
              minimum: minimum
              maxLength: 6
            - isRequired: true
              regex: regex
              jsonName: jsonName
              minLength: 0
              name: name
              typeSimple: typeSimple
              maximum: maximum
              type: type
              minimum: minimum
              maxLength: 6
            baseType: baseType
            enumValues:
            - "{}"
            - "{}"
        modules:
          key:
            remoteServiceName: remoteServiceName
            controllers:
              key:
                isIntegrationService: true
                controllerGroupName: controllerGroupName
                interfaces:
                - methods:
                  - parametersOnMethod:
                    - typeAsString: typeAsString
                      defaultValue: "{}"
                      name: name
                      typeSimple: typeSimple
                      isOptional: true
                      type: type
                    - typeAsString: typeAsString
                      defaultValue: "{}"
                      name: name
                      typeSimple: typeSimple
                      isOptional: true
                      type: type
                    returnValue:
                      typeSimple: typeSimple
                      type: type
                    name: name
                  - parametersOnMethod:
                    - typeAsString: typeAsString
                      defaultValue: "{}"
                      name: name
                      typeSimple: typeSimple
                      isOptional: true
                      type: type
                    - typeAsString: typeAsString
                      defaultValue: "{}"
                      name: name
                      typeSimple: typeSimple
                      isOptional: true
                      type: type
                    returnValue:
                      typeSimple: typeSimple
                      type: type
                    name: name
                  name: name
                  type: type
                - methods:
                  - parametersOnMethod:
                    - typeAsString: typeAsString
                      defaultValue: "{}"
                      name: name
                      typeSimple: typeSimple
                      isOptional: true
                      type: type
                    - typeAsString: typeAsString
                      defaultValue: "{}"
                      name: name
                      typeSimple: typeSimple
                      isOptional: true
                      type: type
                    returnValue:
                      typeSimple: typeSimple
                      type: type
                    name: name
                  - parametersOnMethod:
                    - typeAsString: typeAsString
                      defaultValue: "{}"
                      name: name
                      typeSimple: typeSimple
                      isOptional: true
                      type: type
                    - typeAsString: typeAsString
                      defaultValue: "{}"
                      name: name
                      typeSimple: typeSimple
                      isOptional: true
                      type: type
                    returnValue:
                      typeSimple: typeSimple
                      type: type
                    name: name
                  name: name
                  type: type
                apiVersion: apiVersion
                controllerName: controllerName
                isRemoteService: true
                type: type
                actions:
                  key:
                    allowAnonymous: true
                    uniqueName: uniqueName
                    supportedVersions:
                    - supportedVersions
                    - supportedVersions
                    parametersOnMethod:
                    - typeAsString: typeAsString
                      defaultValue: "{}"
                      name: name
                      typeSimple: typeSimple
                      isOptional: true
                      type: type
                    - typeAsString: typeAsString
                      defaultValue: "{}"
                      name: name
                      typeSimple: typeSimple
                      isOptional: true
                      type: type
                    returnValue:
                      typeSimple: typeSimple
                      type: type
                    implementFrom: implementFrom
                    name: name
                    httpMethod: httpMethod
                    parameters:
                    - jsonName: jsonName
                      defaultValue: "{}"
                      bindingSourceId: bindingSourceId
                      name: name
                      typeSimple: typeSimple
                      constraintTypes:
                      - constraintTypes
                      - constraintTypes
                      isOptional: true
                      type: type
                      nameOnMethod: nameOnMethod
                      descriptorName: descriptorName
                    - jsonName: jsonName
                      defaultValue: "{}"
                      bindingSourceId: bindingSourceId
                      name: name
                      typeSimple: typeSimple
                      constraintTypes:
                      - constraintTypes
                      - constraintTypes
                      isOptional: true
                      type: type
                      nameOnMethod: nameOnMethod
                      descriptorName: descriptorName
                    url: url
            rootPath: rootPath
      properties:
        modules:
          additionalProperties:
            $ref: '#/components/schemas/ModuleApiDescriptionModel'
          type: object
        types:
          additionalProperties:
            $ref: '#/components/schemas/TypeApiDescriptionModel'
          type: object
      type: object
    ApplicationAuthConfigurationDto:
      example:
        grantedPolicies:
          key: true
      properties:
        grantedPolicies:
          additionalProperties:
            type: boolean
          type: object
      type: object
    ApplicationConfigurationDto:
      example:
        localization:
          currentCulture:
            englishName: englishName
            threeLetterIsoLanguageName: threeLetterIsoLanguageName
            nativeName: nativeName
            twoLetterIsoLanguageName: twoLetterIsoLanguageName
            dateTimeFormat:
              longTimePattern: longTimePattern
              dateTimeFormatLong: dateTimeFormatLong
              dateSeparator: dateSeparator
              shortTimePattern: shortTimePattern
              fullDateTimePattern: fullDateTimePattern
              calendarAlgorithmType: calendarAlgorithmType
              shortDatePattern: shortDatePattern
            displayName: displayName
            cultureName: cultureName
            name: name
            isRightToLeft: true
          languages:
          - uiCultureName: uiCultureName
            displayName: displayName
            cultureName: cultureName
            flagIcon: flagIcon
          - uiCultureName: uiCultureName
            displayName: displayName
            cultureName: cultureName
            flagIcon: flagIcon
          values:
            key:
              key: values
          resources:
            key:
              texts:
                key: texts
              baseResources:
              - baseResources
              - baseResources
          languageFilesMap:
            key:
            - name: name
              value: value
            - name: name
              value: value
          defaultResourceName: defaultResourceName
          languagesMap:
            key:
            - name: name
              value: value
            - name: name
              value: value
        features:
          values:
            key: values
        currentUser:
          impersonatorTenantName: impersonatorTenantName
          surName: surName
          roles:
          - roles
          - roles
          isAuthenticated: true
          userName: userName
          impersonatorTenantId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          impersonatorUserId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          emailVerified: true
          phoneNumber: phoneNumber
          tenantId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          phoneNumberVerified: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          impersonatorUserName: impersonatorUserName
          email: email
        objectExtensions:
          enums:
            key:
              localizationResource: localizationResource
              fields:
              - name: name
                value: "{}"
              - name: name
                value: "{}"
          modules:
            key:
              entities:
                key:
                  configuration:
                    key: "{}"
                  properties:
                    key:
                      ui:
                        lookup:
                          resultListPropertyName: resultListPropertyName
                          valuePropertyName: valuePropertyName
                          url: url
                          filterParamName: filterParamName
                          displayPropertyName: displayPropertyName
                        onTable:
                          isVisible: true
                        onCreateForm:
                          isVisible: true
                        onEditForm:
                          isVisible: true
                      configuration:
                        key: "{}"
                      displayName:
                        resource: resource
                        name: name
                      defaultValue: "{}"
                      typeSimple: typeSimple
                      attributes:
                      - typeSimple: typeSimple
                        config:
                          key: "{}"
                      - typeSimple: typeSimple
                        config:
                          key: "{}"
                      api:
                        onCreate:
                          isAvailable: true
                        onGet:
                          isAvailable: true
                        onUpdate:
                          isAvailable: true
                      type: type
              configuration:
                key: "{}"
        multiTenancy:
          isEnabled: true
        auth:
          grantedPolicies:
            key: true
        currentTenant:
          isAvailable: true
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        timing:
          timeZone:
            iana:
              timeZoneName: timeZoneName
            windows:
              timeZoneId: timeZoneId
        extraProperties:
          key: "{}"
        clock:
          kind: kind
        setting:
          values:
            key: values
        globalFeatures:
          enabledFeatures:
          - enabledFeatures
          - enabledFeatures
      properties:
        localization:
          $ref: '#/components/schemas/ApplicationLocalizationConfigurationDto'
        auth:
          $ref: '#/components/schemas/ApplicationAuthConfigurationDto'
        setting:
          $ref: '#/components/schemas/ApplicationSettingConfigurationDto'
        currentUser:
          $ref: '#/components/schemas/CurrentUserDto'
        features:
          $ref: '#/components/schemas/ApplicationFeatureConfigurationDto'
        globalFeatures:
          $ref: '#/components/schemas/ApplicationGlobalFeatureConfigurationDto'
        multiTenancy:
          $ref: '#/components/schemas/MultiTenancyInfoDto'
        currentTenant:
          $ref: '#/components/schemas/CurrentTenantDto'
        timing:
          $ref: '#/components/schemas/TimingDto'
        clock:
          $ref: '#/components/schemas/ClockDto'
        objectExtensions:
          $ref: '#/components/schemas/ObjectExtensionsDto'
        extraProperties:
          additionalProperties:
            type: object
          type: object
      type: object
    ApplicationFeatureConfigurationDto:
      example:
        values:
          key: values
      properties:
        values:
          additionalProperties:
            type: string
          type: object
      type: object
    ApplicationGlobalFeatureConfigurationDto:
      example:
        enabledFeatures:
        - enabledFeatures
        - enabledFeatures
      properties:
        enabledFeatures:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    ApplicationLocalizationConfigurationDto:
      example:
        currentCulture:
          englishName: englishName
          threeLetterIsoLanguageName: threeLetterIsoLanguageName
          nativeName: nativeName
          twoLetterIsoLanguageName: twoLetterIsoLanguageName
          dateTimeFormat:
            longTimePattern: longTimePattern
            dateTimeFormatLong: dateTimeFormatLong
            dateSeparator: dateSeparator
            shortTimePattern: shortTimePattern
            fullDateTimePattern: fullDateTimePattern
            calendarAlgorithmType: calendarAlgorithmType
            shortDatePattern: shortDatePattern
          displayName: displayName
          cultureName: cultureName
          name: name
          isRightToLeft: true
        languages:
        - uiCultureName: uiCultureName
          displayName: displayName
          cultureName: cultureName
          flagIcon: flagIcon
        - uiCultureName: uiCultureName
          displayName: displayName
          cultureName: cultureName
          flagIcon: flagIcon
        values:
          key:
            key: values
        resources:
          key:
            texts:
              key: texts
            baseResources:
            - baseResources
            - baseResources
        languageFilesMap:
          key:
          - name: name
            value: value
          - name: name
            value: value
        defaultResourceName: defaultResourceName
        languagesMap:
          key:
          - name: name
            value: value
          - name: name
            value: value
      properties:
        values:
          additionalProperties:
            additionalProperties:
              type: string
            type: object
          type: object
        resources:
          additionalProperties:
            $ref: '#/components/schemas/ApplicationLocalizationResourceDto'
          type: object
        languages:
          items:
            $ref: '#/components/schemas/LanguageInfo'
          type: array
        currentCulture:
          $ref: '#/components/schemas/CurrentCultureDto'
        defaultResourceName:
          type: string
        languagesMap:
          additionalProperties:
            items:
              $ref: '#/components/schemas/NameValue'
            type: array
          type: object
        languageFilesMap:
          additionalProperties:
            items:
              $ref: '#/components/schemas/NameValue'
            type: array
          type: object
      type: object
    ApplicationLocalizationDto:
      example:
        resources:
          key:
            texts:
              key: texts
            baseResources:
            - baseResources
            - baseResources
      properties:
        resources:
          additionalProperties:
            $ref: '#/components/schemas/ApplicationLocalizationResourceDto'
          type: object
      type: object
    ApplicationLocalizationResourceDto:
      example:
        texts:
          key: texts
        baseResources:
        - baseResources
        - baseResources
      properties:
        texts:
          additionalProperties:
            type: string
          type: object
        baseResources:
          items:
            type: string
          type: array
      type: object
    ApplicationSettingConfigurationDto:
      example:
        values:
          key: values
      properties:
        values:
          additionalProperties:
            type: string
          type: object
      type: object
    BindDeviceDto:
      example:
        name: name
        type: type
        brand: brand
        systemVersion: systemVersion
        token: token
      properties:
        token:
          type: string
        name:
          type: string
        type:
          type: string
        brand:
          type: string
        systemVersion:
          type: string
      type: object
    BooleanKeyValue:
      example:
        expiredAt: 2000-01-23T04:56:07.000+00:00
        createdAt: 2000-01-23T04:56:07.000+00:00
        durationSeconds: 0.8008281904610115
        value: true
      properties:
        value:
          type: boolean
        durationSeconds:
          format: double
          type: number
        expiredAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
      type: object
    BooleanSetKeyValueDto:
      example:
        durationSeconds: 0.8008281904610115
        value: true
      properties:
        value:
          type: boolean
        durationSeconds:
          format: double
          type: number
      type: object
    ChangePasswordInput:
      example:
        newPassword: newPassword
        currentPassword: currentPassword
      properties:
        currentPassword:
          maxLength: 128
          minLength: 0
          type: string
        newPassword:
          maxLength: 128
          minLength: 0
          type: string
      required:
      - newPassword
      type: object
    ClockDto:
      example:
        kind: kind
      properties:
        kind:
          type: string
      type: object
    ControllerApiDescriptionModel:
      example:
        isIntegrationService: true
        controllerGroupName: controllerGroupName
        interfaces:
        - methods:
          - parametersOnMethod:
            - typeAsString: typeAsString
              defaultValue: "{}"
              name: name
              typeSimple: typeSimple
              isOptional: true
              type: type
            - typeAsString: typeAsString
              defaultValue: "{}"
              name: name
              typeSimple: typeSimple
              isOptional: true
              type: type
            returnValue:
              typeSimple: typeSimple
              type: type
            name: name
          - parametersOnMethod:
            - typeAsString: typeAsString
              defaultValue: "{}"
              name: name
              typeSimple: typeSimple
              isOptional: true
              type: type
            - typeAsString: typeAsString
              defaultValue: "{}"
              name: name
              typeSimple: typeSimple
              isOptional: true
              type: type
            returnValue:
              typeSimple: typeSimple
              type: type
            name: name
          name: name
          type: type
        - methods:
          - parametersOnMethod:
            - typeAsString: typeAsString
              defaultValue: "{}"
              name: name
              typeSimple: typeSimple
              isOptional: true
              type: type
            - typeAsString: typeAsString
              defaultValue: "{}"
              name: name
              typeSimple: typeSimple
              isOptional: true
              type: type
            returnValue:
              typeSimple: typeSimple
              type: type
            name: name
          - parametersOnMethod:
            - typeAsString: typeAsString
              defaultValue: "{}"
              name: name
              typeSimple: typeSimple
              isOptional: true
              type: type
            - typeAsString: typeAsString
              defaultValue: "{}"
              name: name
              typeSimple: typeSimple
              isOptional: true
              type: type
            returnValue:
              typeSimple: typeSimple
              type: type
            name: name
          name: name
          type: type
        apiVersion: apiVersion
        controllerName: controllerName
        isRemoteService: true
        type: type
        actions:
          key:
            allowAnonymous: true
            uniqueName: uniqueName
            supportedVersions:
            - supportedVersions
            - supportedVersions
            parametersOnMethod:
            - typeAsString: typeAsString
              defaultValue: "{}"
              name: name
              typeSimple: typeSimple
              isOptional: true
              type: type
            - typeAsString: typeAsString
              defaultValue: "{}"
              name: name
              typeSimple: typeSimple
              isOptional: true
              type: type
            returnValue:
              typeSimple: typeSimple
              type: type
            implementFrom: implementFrom
            name: name
            httpMethod: httpMethod
            parameters:
            - jsonName: jsonName
              defaultValue: "{}"
              bindingSourceId: bindingSourceId
              name: name
              typeSimple: typeSimple
              constraintTypes:
              - constraintTypes
              - constraintTypes
              isOptional: true
              type: type
              nameOnMethod: nameOnMethod
              descriptorName: descriptorName
            - jsonName: jsonName
              defaultValue: "{}"
              bindingSourceId: bindingSourceId
              name: name
              typeSimple: typeSimple
              constraintTypes:
              - constraintTypes
              - constraintTypes
              isOptional: true
              type: type
              nameOnMethod: nameOnMethod
              descriptorName: descriptorName
            url: url
      properties:
        controllerName:
          type: string
        controllerGroupName:
          type: string
        isRemoteService:
          type: boolean
        isIntegrationService:
          type: boolean
        apiVersion:
          type: string
        type:
          type: string
        interfaces:
          items:
            $ref: '#/components/schemas/ControllerInterfaceApiDescriptionModel'
          type: array
        actions:
          additionalProperties:
            $ref: '#/components/schemas/ActionApiDescriptionModel'
          type: object
      type: object
    ControllerInterfaceApiDescriptionModel:
      example:
        methods:
        - parametersOnMethod:
          - typeAsString: typeAsString
            defaultValue: "{}"
            name: name
            typeSimple: typeSimple
            isOptional: true
            type: type
          - typeAsString: typeAsString
            defaultValue: "{}"
            name: name
            typeSimple: typeSimple
            isOptional: true
            type: type
          returnValue:
            typeSimple: typeSimple
            type: type
          name: name
        - parametersOnMethod:
          - typeAsString: typeAsString
            defaultValue: "{}"
            name: name
            typeSimple: typeSimple
            isOptional: true
            type: type
          - typeAsString: typeAsString
            defaultValue: "{}"
            name: name
            typeSimple: typeSimple
            isOptional: true
            type: type
          returnValue:
            typeSimple: typeSimple
            type: type
          name: name
        name: name
        type: type
      properties:
        type:
          type: string
        name:
          type: string
        methods:
          items:
            $ref: '#/components/schemas/InterfaceMethodApiDescriptionModel'
          type: array
      type: object
    CreateOrUpdateAppDto:
      example:
        gitRepository: gitRepository
        framework: framework
        displayName: displayName
        appType: appType
        name: name
        icon: icon
        description: description
        gitRepositoryType: gitRepositoryType
      properties:
        name:
          type: string
        displayName:
          type: string
        framework:
          type: string
        appType:
          type: string
        description:
          type: string
        icon:
          type: string
        gitRepository:
          type: string
        gitRepositoryType:
          type: string
      type: object
    CreateOrUpdateAppReleaseDto:
      example:
        notes: notes
        channel: channel
        version: version
        platform: platform
        environment: environment
        size: 0
        appId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        isEnabled: true
        rapidCode: rapidCode
        sliceMd5: sliceMd5
        key: key
        productType: productType
        isForceUpdate: true
        md5: md5
      properties:
        version:
          type: string
        notes:
          type: string
        platform:
          type: string
        key:
          type: string
        rapidCode:
          type: string
        size:
          format: int64
          type: integer
        md5:
          type: string
        sliceMd5:
          type: string
        productType:
          type: string
        isForceUpdate:
          type: boolean
        appId:
          format: uuid
          type: string
        isEnabled:
          type: boolean
        channel:
          type: string
        environment:
          type: string
      type: object
    CreateUpdateAppUserScoreDto:
      example:
        score: 0
        appId: appId
        comment: comment
      properties:
        appId:
          type: string
        score:
          format: int32
          type: integer
        comment:
          type: string
      type: object
    CreateUpdatePuupeeDto:
      example:
        tagging: tagging
        extension: extension
        creationTime: 2000-01-23T04:56:07.000+00:00
        repeatOffTimes: 5
        lastModificationTime: 2000-01-23T04:56:07.000+00:00
        creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        description: description
        deletionTime: 2000-01-23T04:56:07.000+00:00
        title: title
        type: type
        displayStyle: displayStyle
        password: password
        storageClass: storageClass
        isDeleted: true
        repeat: repeat
        lastModifierDevice: lastModifierDevice
        lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        rapidCode: rapidCode
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        text: text
        sliceMd5: sliceMd5
        contentType: contentType
        storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
        key: key
        startAt: 2000-01-23T04:56:07.000+00:00
        storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
        syncVersion: 0
        doneAt: 2000-01-23T04:56:07.000+00:00
        notifyAt: 2000-01-23T04:56:07.000+00:00
        notifyTimingType: notifyTimingType
        format: format
        priority: 6
        endAt: 2000-01-23T04:56:07.000+00:00
        lastModifierDeviceToken: lastModifierDeviceToken
        isDone: true
        parentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        url: url
        isHidden: true
        notifyTimingValue: 1
        size: 5
        repeatOffAt: 2000-01-23T04:56:07.000+00:00
        name: name
        notifyTimingUnit: notifyTimingUnit
        deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        md5: md5
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        title:
          type: string
        isHidden:
          type: boolean
        description:
          type: string
        text:
          type: string
        format:
          type: string
        password:
          type: string
        parentId:
          format: uuid
          type: string
        key:
          type: string
        md5:
          type: string
        sliceMd5:
          type: string
        rapidCode:
          type: string
        contentType:
          type: string
        type:
          type: string
        displayStyle:
          type: string
        extension:
          type: string
        storageClass:
          type: string
        storageObjectCreatedAt:
          format: date-time
          type: string
        storageObjectUpdatedAt:
          format: date-time
          type: string
        syncVersion:
          format: int64
          type: integer
        isDeleted:
          type: boolean
        deletionTime:
          format: date-time
          type: string
        creationTime:
          format: date-time
          type: string
        lastModificationTime:
          format: date-time
          type: string
        priority:
          type: integer
        startAt:
          format: date-time
          type: string
        endAt:
          format: date-time
          type: string
        notifyAt:
          format: date-time
          type: string
        notifyTimingType:
          type: string
        notifyTimingUnit:
          type: string
        notifyTimingValue:
          format: int32
          type: integer
        repeat:
          type: string
        repeatOffAt:
          format: date-time
          type: string
        repeatOffTimes:
          format: int32
          type: integer
        isDone:
          type: boolean
        doneAt:
          format: date-time
          type: string
        creatorId:
          format: uuid
          type: string
        lastModifierId:
          format: uuid
          type: string
        deleterId:
          format: uuid
          type: string
        tagging:
          type: string
        url:
          type: string
        size:
          format: int64
          type: integer
        lastModifierDeviceToken:
          type: string
        lastModifierDevice:
          type: string
      required:
      - id
      - name
      type: object
    CurrentCultureDto:
      example:
        englishName: englishName
        threeLetterIsoLanguageName: threeLetterIsoLanguageName
        nativeName: nativeName
        twoLetterIsoLanguageName: twoLetterIsoLanguageName
        dateTimeFormat:
          longTimePattern: longTimePattern
          dateTimeFormatLong: dateTimeFormatLong
          dateSeparator: dateSeparator
          shortTimePattern: shortTimePattern
          fullDateTimePattern: fullDateTimePattern
          calendarAlgorithmType: calendarAlgorithmType
          shortDatePattern: shortDatePattern
        displayName: displayName
        cultureName: cultureName
        name: name
        isRightToLeft: true
      properties:
        displayName:
          type: string
        englishName:
          type: string
        threeLetterIsoLanguageName:
          type: string
        twoLetterIsoLanguageName:
          type: string
        isRightToLeft:
          type: boolean
        cultureName:
          type: string
        name:
          type: string
        nativeName:
          type: string
        dateTimeFormat:
          $ref: '#/components/schemas/DateTimeFormatDto'
      type: object
    CurrentTenantDto:
      example:
        isAvailable: true
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
        isAvailable:
          type: boolean
      type: object
    CurrentUserDto:
      example:
        impersonatorTenantName: impersonatorTenantName
        surName: surName
        roles:
        - roles
        - roles
        isAuthenticated: true
        userName: userName
        impersonatorTenantId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        impersonatorUserId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        emailVerified: true
        phoneNumber: phoneNumber
        tenantId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        phoneNumberVerified: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        impersonatorUserName: impersonatorUserName
        email: email
      properties:
        isAuthenticated:
          type: boolean
        id:
          format: uuid
          type: string
        tenantId:
          format: uuid
          type: string
        impersonatorUserId:
          format: uuid
          type: string
        impersonatorTenantId:
          format: uuid
          type: string
        impersonatorUserName:
          type: string
        impersonatorTenantName:
          type: string
        userName:
          type: string
        name:
          type: string
        surName:
          type: string
        email:
          type: string
        emailVerified:
          type: boolean
        phoneNumber:
          type: string
        phoneNumberVerified:
          type: boolean
        roles:
          items:
            type: string
          type: array
      type: object
    DateTimeFormatDto:
      example:
        longTimePattern: longTimePattern
        dateTimeFormatLong: dateTimeFormatLong
        dateSeparator: dateSeparator
        shortTimePattern: shortTimePattern
        fullDateTimePattern: fullDateTimePattern
        calendarAlgorithmType: calendarAlgorithmType
        shortDatePattern: shortDatePattern
      properties:
        calendarAlgorithmType:
          type: string
        dateTimeFormatLong:
          type: string
        shortDatePattern:
          type: string
        fullDateTimePattern:
          type: string
        dateSeparator:
          type: string
        shortTimePattern:
          type: string
        longTimePattern:
          type: string
      type: object
    DateTimeKeyValue:
      example:
        expiredAt: 2000-01-23T04:56:07.000+00:00
        createdAt: 2000-01-23T04:56:07.000+00:00
        durationSeconds: 0.8008281904610115
        value: 2000-01-23T04:56:07.000+00:00
      properties:
        value:
          format: date-time
          type: string
        durationSeconds:
          format: double
          type: number
        expiredAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
      type: object
    DateTimeSetKeyValueDto:
      example:
        durationSeconds: 0.8008281904610115
        value: 2000-01-23T04:56:07.000+00:00
      properties:
        value:
          format: date-time
          type: string
        durationSeconds:
          format: double
          type: number
      type: object
    DecimalKeyValue:
      example:
        expiredAt: 2000-01-23T04:56:07.000+00:00
        createdAt: 2000-01-23T04:56:07.000+00:00
        durationSeconds: 6.027456183070403
        value: 0.8008281904610115
      properties:
        value:
          format: double
          type: number
        durationSeconds:
          format: double
          type: number
        expiredAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
      type: object
    DecimalSetKeyValueDto:
      example:
        durationSeconds: 6.027456183070403
        value: 0.8008281904610115
      properties:
        value:
          format: double
          type: number
        durationSeconds:
          format: double
          type: number
      type: object
    DeviceDto:
      example:
        creationTime: 2000-01-23T04:56:07.000+00:00
        lastModificationTime: 2000-01-23T04:56:07.000+00:00
        creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        deletionTime: 2000-01-23T04:56:07.000+00:00
        systemVersion: systemVersion
        platform: platform
        token: token
        isDeleted: true
        name: name
        lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        brand: brand
      properties:
        id:
          format: uuid
          type: string
        creationTime:
          format: date-time
          type: string
        creatorId:
          format: uuid
          type: string
        lastModificationTime:
          format: date-time
          type: string
        lastModifierId:
          format: uuid
          type: string
        isDeleted:
          type: boolean
        deleterId:
          format: uuid
          type: string
        deletionTime:
          format: date-time
          type: string
        token:
          type: string
        name:
          type: string
        platform:
          type: string
        brand:
          type: string
        systemVersion:
          type: string
      type: object
    DeviceDtoPagedResultDto:
      example:
        totalCount: 0
        items:
        - creationTime: 2000-01-23T04:56:07.000+00:00
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          deletionTime: 2000-01-23T04:56:07.000+00:00
          systemVersion: systemVersion
          platform: platform
          token: token
          isDeleted: true
          name: name
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          brand: brand
        - creationTime: 2000-01-23T04:56:07.000+00:00
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          deletionTime: 2000-01-23T04:56:07.000+00:00
          systemVersion: systemVersion
          platform: platform
          token: token
          isDeleted: true
          name: name
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          brand: brand
      properties:
        items:
          items:
            $ref: '#/components/schemas/DeviceDto'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    DoubleKeyValue:
      example:
        expiredAt: 2000-01-23T04:56:07.000+00:00
        createdAt: 2000-01-23T04:56:07.000+00:00
        durationSeconds: 6.027456183070403
        value: 0.8008281904610115
      properties:
        value:
          format: double
          type: number
        durationSeconds:
          format: double
          type: number
        expiredAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
      type: object
    DoubleSetKeyValueDto:
      example:
        durationSeconds: 6.027456183070403
        value: 0.8008281904610115
      properties:
        value:
          format: double
          type: number
        durationSeconds:
          format: double
          type: number
      type: object
    EmailSettingsDto:
      example:
        smtpHost: smtpHost
        smtpUseDefaultCredentials: true
        smtpUserName: smtpUserName
        smtpDomain: smtpDomain
        defaultFromAddress: defaultFromAddress
        smtpPort: 0
        smtpPassword: smtpPassword
        defaultFromDisplayName: defaultFromDisplayName
        smtpEnableSsl: true
      properties:
        smtpHost:
          type: string
        smtpPort:
          format: int32
          type: integer
        smtpUserName:
          type: string
        smtpPassword:
          type: string
        smtpDomain:
          type: string
        smtpEnableSsl:
          type: boolean
        smtpUseDefaultCredentials:
          type: boolean
        defaultFromAddress:
          type: string
        defaultFromDisplayName:
          type: string
      type: object
    EntityExtensionDto:
      example:
        configuration:
          key: "{}"
        properties:
          key:
            ui:
              lookup:
                resultListPropertyName: resultListPropertyName
                valuePropertyName: valuePropertyName
                url: url
                filterParamName: filterParamName
                displayPropertyName: displayPropertyName
              onTable:
                isVisible: true
              onCreateForm:
                isVisible: true
              onEditForm:
                isVisible: true
            configuration:
              key: "{}"
            displayName:
              resource: resource
              name: name
            defaultValue: "{}"
            typeSimple: typeSimple
            attributes:
            - typeSimple: typeSimple
              config:
                key: "{}"
            - typeSimple: typeSimple
              config:
                key: "{}"
            api:
              onCreate:
                isAvailable: true
              onGet:
                isAvailable: true
              onUpdate:
                isAvailable: true
            type: type
      properties:
        properties:
          additionalProperties:
            $ref: '#/components/schemas/ExtensionPropertyDto'
          type: object
        configuration:
          additionalProperties:
            type: object
          type: object
      type: object
    ExtensionEnumDto:
      example:
        localizationResource: localizationResource
        fields:
        - name: name
          value: "{}"
        - name: name
          value: "{}"
      properties:
        fields:
          items:
            $ref: '#/components/schemas/ExtensionEnumFieldDto'
          type: array
        localizationResource:
          type: string
      type: object
    ExtensionEnumFieldDto:
      example:
        name: name
        value: "{}"
      properties:
        name:
          type: string
        value:
          type: object
      type: object
    ExtensionPropertyApiCreateDto:
      example:
        isAvailable: true
      properties:
        isAvailable:
          type: boolean
      type: object
    ExtensionPropertyApiDto:
      example:
        onCreate:
          isAvailable: true
        onGet:
          isAvailable: true
        onUpdate:
          isAvailable: true
      properties:
        onGet:
          $ref: '#/components/schemas/ExtensionPropertyApiGetDto'
        onCreate:
          $ref: '#/components/schemas/ExtensionPropertyApiCreateDto'
        onUpdate:
          $ref: '#/components/schemas/ExtensionPropertyApiUpdateDto'
      type: object
    ExtensionPropertyApiGetDto:
      example:
        isAvailable: true
      properties:
        isAvailable:
          type: boolean
      type: object
    ExtensionPropertyApiUpdateDto:
      example:
        isAvailable: true
      properties:
        isAvailable:
          type: boolean
      type: object
    ExtensionPropertyAttributeDto:
      example:
        typeSimple: typeSimple
        config:
          key: "{}"
      properties:
        typeSimple:
          type: string
        config:
          additionalProperties:
            type: object
          type: object
      type: object
    ExtensionPropertyDto:
      example:
        ui:
          lookup:
            resultListPropertyName: resultListPropertyName
            valuePropertyName: valuePropertyName
            url: url
            filterParamName: filterParamName
            displayPropertyName: displayPropertyName
          onTable:
            isVisible: true
          onCreateForm:
            isVisible: true
          onEditForm:
            isVisible: true
        configuration:
          key: "{}"
        displayName:
          resource: resource
          name: name
        defaultValue: "{}"
        typeSimple: typeSimple
        attributes:
        - typeSimple: typeSimple
          config:
            key: "{}"
        - typeSimple: typeSimple
          config:
            key: "{}"
        api:
          onCreate:
            isAvailable: true
          onGet:
            isAvailable: true
          onUpdate:
            isAvailable: true
        type: type
      properties:
        type:
          type: string
        typeSimple:
          type: string
        displayName:
          $ref: '#/components/schemas/LocalizableStringDto'
        api:
          $ref: '#/components/schemas/ExtensionPropertyApiDto'
        ui:
          $ref: '#/components/schemas/ExtensionPropertyUiDto'
        attributes:
          items:
            $ref: '#/components/schemas/ExtensionPropertyAttributeDto'
          type: array
        configuration:
          additionalProperties:
            type: object
          type: object
        defaultValue:
          type: object
      type: object
    ExtensionPropertyUiDto:
      example:
        lookup:
          resultListPropertyName: resultListPropertyName
          valuePropertyName: valuePropertyName
          url: url
          filterParamName: filterParamName
          displayPropertyName: displayPropertyName
        onTable:
          isVisible: true
        onCreateForm:
          isVisible: true
        onEditForm:
          isVisible: true
      properties:
        onTable:
          $ref: '#/components/schemas/ExtensionPropertyUiTableDto'
        onCreateForm:
          $ref: '#/components/schemas/ExtensionPropertyUiFormDto'
        onEditForm:
          $ref: '#/components/schemas/ExtensionPropertyUiFormDto'
        lookup:
          $ref: '#/components/schemas/ExtensionPropertyUiLookupDto'
      type: object
    ExtensionPropertyUiFormDto:
      example:
        isVisible: true
      properties:
        isVisible:
          type: boolean
      type: object
    ExtensionPropertyUiLookupDto:
      example:
        resultListPropertyName: resultListPropertyName
        valuePropertyName: valuePropertyName
        url: url
        filterParamName: filterParamName
        displayPropertyName: displayPropertyName
      properties:
        url:
          type: string
        resultListPropertyName:
          type: string
        displayPropertyName:
          type: string
        valuePropertyName:
          type: string
        filterParamName:
          type: string
      type: object
    ExtensionPropertyUiTableDto:
      example:
        isVisible: true
      properties:
        isVisible:
          type: boolean
      type: object
    FeatureDto:
      example:
        parentName: parentName
        depth: 0
        provider:
          name: name
          key: key
        displayName: displayName
        valueType:
          name: name
          validator:
            name: name
            properties:
              key: "{}"
          properties:
            key: "{}"
        name: name
        description: description
        value: value
      properties:
        name:
          type: string
        displayName:
          type: string
        value:
          type: string
        provider:
          $ref: '#/components/schemas/FeatureProviderDto'
        description:
          type: string
        valueType:
          $ref: '#/components/schemas/IStringValueType'
        depth:
          format: int32
          type: integer
        parentName:
          type: string
      type: object
    FeatureGroupDto:
      example:
        features:
        - parentName: parentName
          depth: 0
          provider:
            name: name
            key: key
          displayName: displayName
          valueType:
            name: name
            validator:
              name: name
              properties:
                key: "{}"
            properties:
              key: "{}"
          name: name
          description: description
          value: value
        - parentName: parentName
          depth: 0
          provider:
            name: name
            key: key
          displayName: displayName
          valueType:
            name: name
            validator:
              name: name
              properties:
                key: "{}"
            properties:
              key: "{}"
          name: name
          description: description
          value: value
        displayName: displayName
        name: name
      properties:
        name:
          type: string
        displayName:
          type: string
        features:
          items:
            $ref: '#/components/schemas/FeatureDto'
          type: array
      type: object
    FeatureProviderDto:
      example:
        name: name
        key: key
      properties:
        name:
          type: string
        key:
          type: string
      type: object
    FindTenantResultDto:
      example:
        success: true
        tenantId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        isActive: true
      properties:
        success:
          type: boolean
        tenantId:
          format: uuid
          type: string
        name:
          type: string
        isActive:
          type: boolean
      type: object
    GetFeatureListResultDto:
      example:
        groups:
        - features:
          - parentName: parentName
            depth: 0
            provider:
              name: name
              key: key
            displayName: displayName
            valueType:
              name: name
              validator:
                name: name
                properties:
                  key: "{}"
              properties:
                key: "{}"
            name: name
            description: description
            value: value
          - parentName: parentName
            depth: 0
            provider:
              name: name
              key: key
            displayName: displayName
            valueType:
              name: name
              validator:
                name: name
                properties:
                  key: "{}"
              properties:
                key: "{}"
            name: name
            description: description
            value: value
          displayName: displayName
          name: name
        - features:
          - parentName: parentName
            depth: 0
            provider:
              name: name
              key: key
            displayName: displayName
            valueType:
              name: name
              validator:
                name: name
                properties:
                  key: "{}"
              properties:
                key: "{}"
            name: name
            description: description
            value: value
          - parentName: parentName
            depth: 0
            provider:
              name: name
              key: key
            displayName: displayName
            valueType:
              name: name
              validator:
                name: name
                properties:
                  key: "{}"
              properties:
                key: "{}"
            name: name
            description: description
            value: value
          displayName: displayName
          name: name
      properties:
        groups:
          items:
            $ref: '#/components/schemas/FeatureGroupDto'
          type: array
      type: object
    GetPermissionListResultDto:
      example:
        groups:
        - displayNameResource: displayNameResource
          displayName: displayName
          permissions:
          - parentName: parentName
            grantedProviders:
            - providerName: providerName
              providerKey: providerKey
            - providerName: providerName
              providerKey: providerKey
            displayName: displayName
            isGranted: true
            name: name
            allowedProviders:
            - allowedProviders
            - allowedProviders
          - parentName: parentName
            grantedProviders:
            - providerName: providerName
              providerKey: providerKey
            - providerName: providerName
              providerKey: providerKey
            displayName: displayName
            isGranted: true
            name: name
            allowedProviders:
            - allowedProviders
            - allowedProviders
          name: name
          displayNameKey: displayNameKey
        - displayNameResource: displayNameResource
          displayName: displayName
          permissions:
          - parentName: parentName
            grantedProviders:
            - providerName: providerName
              providerKey: providerKey
            - providerName: providerName
              providerKey: providerKey
            displayName: displayName
            isGranted: true
            name: name
            allowedProviders:
            - allowedProviders
            - allowedProviders
          - parentName: parentName
            grantedProviders:
            - providerName: providerName
              providerKey: providerKey
            - providerName: providerName
              providerKey: providerKey
            displayName: displayName
            isGranted: true
            name: name
            allowedProviders:
            - allowedProviders
            - allowedProviders
          name: name
          displayNameKey: displayNameKey
        entityDisplayName: entityDisplayName
      properties:
        entityDisplayName:
          type: string
        groups:
          items:
            $ref: '#/components/schemas/PermissionGroupDto'
          type: array
      type: object
    IStringValueType:
      example:
        name: name
        validator:
          name: name
          properties:
            key: "{}"
        properties:
          key: "{}"
      properties:
        name:
          readOnly: true
          type: string
        properties:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        validator:
          $ref: '#/components/schemas/IValueValidator'
      type: object
    IValueValidator:
      example:
        name: name
        properties:
          key: "{}"
      properties:
        name:
          readOnly: true
          type: string
        properties:
          additionalProperties:
            type: object
          readOnly: true
          type: object
      type: object
    IanaTimeZone:
      example:
        timeZoneName: timeZoneName
      properties:
        timeZoneName:
          type: string
      type: object
    IdentityRoleCreateDto:
      example:
        isDefault: true
        name: name
        isPublic: true
        extraProperties:
          key: "{}"
      properties:
        extraProperties:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        name:
          maxLength: 256
          minLength: 0
          type: string
        isDefault:
          type: boolean
        isPublic:
          type: boolean
      required:
      - name
      type: object
    IdentityRoleDto:
      example:
        isDefault: true
        isStatic: true
        name: name
        isPublic: true
        extraProperties:
          key: "{}"
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        concurrencyStamp: concurrencyStamp
      properties:
        extraProperties:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        id:
          format: uuid
          type: string
        name:
          type: string
        isDefault:
          type: boolean
        isStatic:
          type: boolean
        isPublic:
          type: boolean
        concurrencyStamp:
          type: string
      type: object
    IdentityRoleDtoListResultDto:
      example:
        items:
        - isDefault: true
          isStatic: true
          name: name
          isPublic: true
          extraProperties:
            key: "{}"
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          concurrencyStamp: concurrencyStamp
        - isDefault: true
          isStatic: true
          name: name
          isPublic: true
          extraProperties:
            key: "{}"
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          concurrencyStamp: concurrencyStamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/IdentityRoleDto'
          type: array
      type: object
    IdentityRoleDtoPagedResultDto:
      example:
        totalCount: 0
        items:
        - isDefault: true
          isStatic: true
          name: name
          isPublic: true
          extraProperties:
            key: "{}"
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          concurrencyStamp: concurrencyStamp
        - isDefault: true
          isStatic: true
          name: name
          isPublic: true
          extraProperties:
            key: "{}"
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          concurrencyStamp: concurrencyStamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/IdentityRoleDto'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    IdentityRoleUpdateDto:
      example:
        isDefault: true
        name: name
        isPublic: true
        extraProperties:
          key: "{}"
        concurrencyStamp: concurrencyStamp
      properties:
        extraProperties:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        name:
          maxLength: 256
          minLength: 0
          type: string
        isDefault:
          type: boolean
        isPublic:
          type: boolean
        concurrencyStamp:
          type: string
      required:
      - name
      type: object
    IdentityUserCreateDto:
      example:
        password: password
        phoneNumber: phoneNumber
        surname: surname
        lockoutEnabled: true
        name: name
        extraProperties:
          key: "{}"
        userName: userName
        isActive: true
        roleNames:
        - roleNames
        - roleNames
        email: email
      properties:
        extraProperties:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        userName:
          maxLength: 256
          minLength: 0
          type: string
        name:
          maxLength: 64
          minLength: 0
          type: string
        surname:
          maxLength: 64
          minLength: 0
          type: string
        email:
          format: email
          maxLength: 256
          minLength: 0
          type: string
        phoneNumber:
          maxLength: 16
          minLength: 0
          type: string
        isActive:
          type: boolean
        lockoutEnabled:
          type: boolean
        roleNames:
          items:
            type: string
          type: array
        password:
          maxLength: 128
          minLength: 0
          type: string
      required:
      - email
      - password
      - userName
      type: object
    IdentityUserDto:
      example:
        creationTime: 2000-01-23T04:56:07.000+00:00
        emailConfirmed: true
        lastModificationTime: 2000-01-23T04:56:07.000+00:00
        lockoutEnabled: true
        creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        extraProperties:
          key: "{}"
        deletionTime: 2000-01-23T04:56:07.000+00:00
        userName: userName
        isActive: true
        phoneNumberConfirmed: true
        phoneNumber: phoneNumber
        isDeleted: true
        surname: surname
        tenantId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        concurrencyStamp: concurrencyStamp
        email: email
        lockoutEnd: 2000-01-23T04:56:07.000+00:00
      properties:
        extraProperties:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        id:
          format: uuid
          type: string
        creationTime:
          format: date-time
          type: string
        creatorId:
          format: uuid
          type: string
        lastModificationTime:
          format: date-time
          type: string
        lastModifierId:
          format: uuid
          type: string
        isDeleted:
          type: boolean
        deleterId:
          format: uuid
          type: string
        deletionTime:
          format: date-time
          type: string
        tenantId:
          format: uuid
          type: string
        userName:
          type: string
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        emailConfirmed:
          type: boolean
        phoneNumber:
          type: string
        phoneNumberConfirmed:
          type: boolean
        isActive:
          type: boolean
        lockoutEnabled:
          type: boolean
        lockoutEnd:
          format: date-time
          type: string
        concurrencyStamp:
          type: string
      type: object
    IdentityUserDtoPagedResultDto:
      example:
        totalCount: 0
        items:
        - creationTime: 2000-01-23T04:56:07.000+00:00
          emailConfirmed: true
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          lockoutEnabled: true
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          extraProperties:
            key: "{}"
          deletionTime: 2000-01-23T04:56:07.000+00:00
          userName: userName
          isActive: true
          phoneNumberConfirmed: true
          phoneNumber: phoneNumber
          isDeleted: true
          surname: surname
          tenantId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          concurrencyStamp: concurrencyStamp
          email: email
          lockoutEnd: 2000-01-23T04:56:07.000+00:00
        - creationTime: 2000-01-23T04:56:07.000+00:00
          emailConfirmed: true
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          lockoutEnabled: true
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          extraProperties:
            key: "{}"
          deletionTime: 2000-01-23T04:56:07.000+00:00
          userName: userName
          isActive: true
          phoneNumberConfirmed: true
          phoneNumber: phoneNumber
          isDeleted: true
          surname: surname
          tenantId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          concurrencyStamp: concurrencyStamp
          email: email
          lockoutEnd: 2000-01-23T04:56:07.000+00:00
      properties:
        items:
          items:
            $ref: '#/components/schemas/IdentityUserDto'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    IdentityUserUpdateDto:
      example:
        password: password
        phoneNumber: phoneNumber
        surname: surname
        lockoutEnabled: true
        name: name
        extraProperties:
          key: "{}"
        userName: userName
        isActive: true
        concurrencyStamp: concurrencyStamp
        roleNames:
        - roleNames
        - roleNames
        email: email
      properties:
        extraProperties:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        userName:
          maxLength: 256
          minLength: 0
          type: string
        name:
          maxLength: 64
          minLength: 0
          type: string
        surname:
          maxLength: 64
          minLength: 0
          type: string
        email:
          format: email
          maxLength: 256
          minLength: 0
          type: string
        phoneNumber:
          maxLength: 16
          minLength: 0
          type: string
        isActive:
          type: boolean
        lockoutEnabled:
          type: boolean
        roleNames:
          items:
            type: string
          type: array
        password:
          maxLength: 128
          minLength: 0
          type: string
        concurrencyStamp:
          type: string
      required:
      - email
      - userName
      type: object
    IdentityUserUpdateRolesDto:
      example:
        roleNames:
        - roleNames
        - roleNames
      properties:
        roleNames:
          items:
            type: string
          type: array
      required:
      - roleNames
      type: object
    Int32KeyValue:
      example:
        expiredAt: 2000-01-23T04:56:07.000+00:00
        createdAt: 2000-01-23T04:56:07.000+00:00
        durationSeconds: 6.027456183070403
        value: 0
      properties:
        value:
          format: int32
          type: integer
        durationSeconds:
          format: double
          type: number
        expiredAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
      type: object
    Int32SetKeyValueDto:
      example:
        durationSeconds: 6.027456183070403
        value: 0
      properties:
        value:
          format: int32
          type: integer
        durationSeconds:
          format: double
          type: number
      type: object
    InterfaceMethodApiDescriptionModel:
      example:
        parametersOnMethod:
        - typeAsString: typeAsString
          defaultValue: "{}"
          name: name
          typeSimple: typeSimple
          isOptional: true
          type: type
        - typeAsString: typeAsString
          defaultValue: "{}"
          name: name
          typeSimple: typeSimple
          isOptional: true
          type: type
        returnValue:
          typeSimple: typeSimple
          type: type
        name: name
      properties:
        name:
          type: string
        parametersOnMethod:
          items:
            $ref: '#/components/schemas/MethodParameterApiDescriptionModel'
          type: array
        returnValue:
          $ref: '#/components/schemas/ReturnValueApiDescriptionModel'
      type: object
    LanguageInfo:
      example:
        uiCultureName: uiCultureName
        displayName: displayName
        cultureName: cultureName
        flagIcon: flagIcon
      properties:
        cultureName:
          type: string
        uiCultureName:
          type: string
        displayName:
          type: string
        flagIcon:
          type: string
      type: object
    LocalizableStringDto:
      example:
        resource: resource
        name: name
      properties:
        name:
          type: string
        resource:
          type: string
      type: object
    LoginResultType:
      enum:
      - Success
      - InvalidUserNameOrPassword
      - NotAllowed
      - LockedOut
      - RequiresTwoFactor
      type: string
    MethodParameterApiDescriptionModel:
      example:
        typeAsString: typeAsString
        defaultValue: "{}"
        name: name
        typeSimple: typeSimple
        isOptional: true
        type: type
      properties:
        name:
          type: string
        typeAsString:
          type: string
        type:
          type: string
        typeSimple:
          type: string
        isOptional:
          type: boolean
        defaultValue:
          type: object
      type: object
    ModuleApiDescriptionModel:
      example:
        remoteServiceName: remoteServiceName
        controllers:
          key:
            isIntegrationService: true
            controllerGroupName: controllerGroupName
            interfaces:
            - methods:
              - parametersOnMethod:
                - typeAsString: typeAsString
                  defaultValue: "{}"
                  name: name
                  typeSimple: typeSimple
                  isOptional: true
                  type: type
                - typeAsString: typeAsString
                  defaultValue: "{}"
                  name: name
                  typeSimple: typeSimple
                  isOptional: true
                  type: type
                returnValue:
                  typeSimple: typeSimple
                  type: type
                name: name
              - parametersOnMethod:
                - typeAsString: typeAsString
                  defaultValue: "{}"
                  name: name
                  typeSimple: typeSimple
                  isOptional: true
                  type: type
                - typeAsString: typeAsString
                  defaultValue: "{}"
                  name: name
                  typeSimple: typeSimple
                  isOptional: true
                  type: type
                returnValue:
                  typeSimple: typeSimple
                  type: type
                name: name
              name: name
              type: type
            - methods:
              - parametersOnMethod:
                - typeAsString: typeAsString
                  defaultValue: "{}"
                  name: name
                  typeSimple: typeSimple
                  isOptional: true
                  type: type
                - typeAsString: typeAsString
                  defaultValue: "{}"
                  name: name
                  typeSimple: typeSimple
                  isOptional: true
                  type: type
                returnValue:
                  typeSimple: typeSimple
                  type: type
                name: name
              - parametersOnMethod:
                - typeAsString: typeAsString
                  defaultValue: "{}"
                  name: name
                  typeSimple: typeSimple
                  isOptional: true
                  type: type
                - typeAsString: typeAsString
                  defaultValue: "{}"
                  name: name
                  typeSimple: typeSimple
                  isOptional: true
                  type: type
                returnValue:
                  typeSimple: typeSimple
                  type: type
                name: name
              name: name
              type: type
            apiVersion: apiVersion
            controllerName: controllerName
            isRemoteService: true
            type: type
            actions:
              key:
                allowAnonymous: true
                uniqueName: uniqueName
                supportedVersions:
                - supportedVersions
                - supportedVersions
                parametersOnMethod:
                - typeAsString: typeAsString
                  defaultValue: "{}"
                  name: name
                  typeSimple: typeSimple
                  isOptional: true
                  type: type
                - typeAsString: typeAsString
                  defaultValue: "{}"
                  name: name
                  typeSimple: typeSimple
                  isOptional: true
                  type: type
                returnValue:
                  typeSimple: typeSimple
                  type: type
                implementFrom: implementFrom
                name: name
                httpMethod: httpMethod
                parameters:
                - jsonName: jsonName
                  defaultValue: "{}"
                  bindingSourceId: bindingSourceId
                  name: name
                  typeSimple: typeSimple
                  constraintTypes:
                  - constraintTypes
                  - constraintTypes
                  isOptional: true
                  type: type
                  nameOnMethod: nameOnMethod
                  descriptorName: descriptorName
                - jsonName: jsonName
                  defaultValue: "{}"
                  bindingSourceId: bindingSourceId
                  name: name
                  typeSimple: typeSimple
                  constraintTypes:
                  - constraintTypes
                  - constraintTypes
                  isOptional: true
                  type: type
                  nameOnMethod: nameOnMethod
                  descriptorName: descriptorName
                url: url
        rootPath: rootPath
      properties:
        rootPath:
          type: string
        remoteServiceName:
          type: string
        controllers:
          additionalProperties:
            $ref: '#/components/schemas/ControllerApiDescriptionModel'
          type: object
      type: object
    ModuleExtensionDto:
      example:
        entities:
          key:
            configuration:
              key: "{}"
            properties:
              key:
                ui:
                  lookup:
                    resultListPropertyName: resultListPropertyName
                    valuePropertyName: valuePropertyName
                    url: url
                    filterParamName: filterParamName
                    displayPropertyName: displayPropertyName
                  onTable:
                    isVisible: true
                  onCreateForm:
                    isVisible: true
                  onEditForm:
                    isVisible: true
                configuration:
                  key: "{}"
                displayName:
                  resource: resource
                  name: name
                defaultValue: "{}"
                typeSimple: typeSimple
                attributes:
                - typeSimple: typeSimple
                  config:
                    key: "{}"
                - typeSimple: typeSimple
                  config:
                    key: "{}"
                api:
                  onCreate:
                    isAvailable: true
                  onGet:
                    isAvailable: true
                  onUpdate:
                    isAvailable: true
                type: type
        configuration:
          key: "{}"
      properties:
        entities:
          additionalProperties:
            $ref: '#/components/schemas/EntityExtensionDto'
          type: object
        configuration:
          additionalProperties:
            type: object
          type: object
      type: object
    MultiTenancyInfoDto:
      example:
        isEnabled: true
      properties:
        isEnabled:
          type: boolean
      type: object
    NameValue:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    ObjectExtensionsDto:
      example:
        enums:
          key:
            localizationResource: localizationResource
            fields:
            - name: name
              value: "{}"
            - name: name
              value: "{}"
        modules:
          key:
            entities:
              key:
                configuration:
                  key: "{}"
                properties:
                  key:
                    ui:
                      lookup:
                        resultListPropertyName: resultListPropertyName
                        valuePropertyName: valuePropertyName
                        url: url
                        filterParamName: filterParamName
                        displayPropertyName: displayPropertyName
                      onTable:
                        isVisible: true
                      onCreateForm:
                        isVisible: true
                      onEditForm:
                        isVisible: true
                    configuration:
                      key: "{}"
                    displayName:
                      resource: resource
                      name: name
                    defaultValue: "{}"
                    typeSimple: typeSimple
                    attributes:
                    - typeSimple: typeSimple
                      config:
                        key: "{}"
                    - typeSimple: typeSimple
                      config:
                        key: "{}"
                    api:
                      onCreate:
                        isAvailable: true
                      onGet:
                        isAvailable: true
                      onUpdate:
                        isAvailable: true
                    type: type
            configuration:
              key: "{}"
      properties:
        modules:
          additionalProperties:
            $ref: '#/components/schemas/ModuleExtensionDto'
          type: object
        enums:
          additionalProperties:
            $ref: '#/components/schemas/ExtensionEnumDto'
          type: object
      type: object
    ParameterApiDescriptionModel:
      example:
        jsonName: jsonName
        defaultValue: "{}"
        bindingSourceId: bindingSourceId
        name: name
        typeSimple: typeSimple
        constraintTypes:
        - constraintTypes
        - constraintTypes
        isOptional: true
        type: type
        nameOnMethod: nameOnMethod
        descriptorName: descriptorName
      properties:
        nameOnMethod:
          type: string
        name:
          type: string
        jsonName:
          type: string
        type:
          type: string
        typeSimple:
          type: string
        isOptional:
          type: boolean
        defaultValue:
          type: object
        constraintTypes:
          items:
            type: string
          type: array
        bindingSourceId:
          type: string
        descriptorName:
          type: string
      type: object
    PermissionGrantInfoDto:
      example:
        parentName: parentName
        grantedProviders:
        - providerName: providerName
          providerKey: providerKey
        - providerName: providerName
          providerKey: providerKey
        displayName: displayName
        isGranted: true
        name: name
        allowedProviders:
        - allowedProviders
        - allowedProviders
      properties:
        name:
          type: string
        displayName:
          type: string
        parentName:
          type: string
        isGranted:
          type: boolean
        allowedProviders:
          items:
            type: string
          type: array
        grantedProviders:
          items:
            $ref: '#/components/schemas/ProviderInfoDto'
          type: array
      type: object
    PermissionGroupDto:
      example:
        displayNameResource: displayNameResource
        displayName: displayName
        permissions:
        - parentName: parentName
          grantedProviders:
          - providerName: providerName
            providerKey: providerKey
          - providerName: providerName
            providerKey: providerKey
          displayName: displayName
          isGranted: true
          name: name
          allowedProviders:
          - allowedProviders
          - allowedProviders
        - parentName: parentName
          grantedProviders:
          - providerName: providerName
            providerKey: providerKey
          - providerName: providerName
            providerKey: providerKey
          displayName: displayName
          isGranted: true
          name: name
          allowedProviders:
          - allowedProviders
          - allowedProviders
        name: name
        displayNameKey: displayNameKey
      properties:
        name:
          type: string
        displayName:
          type: string
        displayNameKey:
          type: string
        displayNameResource:
          type: string
        permissions:
          items:
            $ref: '#/components/schemas/PermissionGrantInfoDto'
          type: array
      type: object
    ProfileDto:
      example:
        phoneNumber: phoneNumber
        isExternal: true
        surname: surname
        name: name
        extraProperties:
          key: "{}"
        hasPassword: true
        userName: userName
        concurrencyStamp: concurrencyStamp
        email: email
      properties:
        extraProperties:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        userName:
          type: string
        email:
          type: string
        name:
          type: string
        surname:
          type: string
        phoneNumber:
          type: string
        isExternal:
          type: boolean
        hasPassword:
          type: boolean
        concurrencyStamp:
          type: string
      type: object
    PropertyApiDescriptionModel:
      example:
        isRequired: true
        regex: regex
        jsonName: jsonName
        minLength: 0
        name: name
        typeSimple: typeSimple
        maximum: maximum
        type: type
        minimum: minimum
        maxLength: 6
      properties:
        name:
          type: string
        jsonName:
          type: string
        type:
          type: string
        typeSimple:
          type: string
        isRequired:
          type: boolean
        minLength:
          format: int32
          type: integer
        maxLength:
          format: int32
          type: integer
        minimum:
          type: string
        maximum:
          type: string
        regex:
          type: string
      type: object
    ProviderInfoDto:
      example:
        providerName: providerName
        providerKey: providerKey
      properties:
        providerName:
          type: string
        providerKey:
          type: string
      type: object
    PuupeeChangedEto:
      example:
        data:
          tagging: tagging
          extension: extension
          creationTime: 2000-01-23T04:56:07.000+00:00
          repeatOffTimes: 5
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          thumb:
            storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
            syncVersion: 6
            extension: extension
            creationTime: 2000-01-23T04:56:07.000+00:00
            lastModificationTime: 2000-01-23T04:56:07.000+00:00
            creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            deletionTime: 2000-01-23T04:56:07.000+00:00
            url: url
            storageClass: storageClass
            password: password
            isDeleted: true
            size: 0
            name: name
            lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            rapidCode: rapidCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            sliceMd5: sliceMd5
            deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            contentType: contentType
            storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
            key: key
            md5: md5
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          description: description
          deletionTime: 2000-01-23T04:56:07.000+00:00
          title: title
          type: type
          displayStyle: displayStyle
          password: password
          storageClass: storageClass
          isDeleted: true
          repeat: repeat
          lastModifierDevice: lastModifierDevice
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          rapidCode: rapidCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          text: text
          sliceMd5: sliceMd5
          contentType: contentType
          storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
          key: key
          startAt: 2000-01-23T04:56:07.000+00:00
          storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
          storageObject:
            storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
            syncVersion: 6
            extension: extension
            creationTime: 2000-01-23T04:56:07.000+00:00
            lastModificationTime: 2000-01-23T04:56:07.000+00:00
            creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            deletionTime: 2000-01-23T04:56:07.000+00:00
            url: url
            storageClass: storageClass
            password: password
            isDeleted: true
            size: 0
            name: name
            lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            rapidCode: rapidCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            sliceMd5: sliceMd5
            deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            contentType: contentType
            storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
            key: key
            md5: md5
          doneAt: 2000-01-23T04:56:07.000+00:00
          syncVersion: 5
          notifyAt: 2000-01-23T04:56:07.000+00:00
          notifyTimingType: notifyTimingType
          format: format
          priority: 6
          endAt: 2000-01-23T04:56:07.000+00:00
          lastModifierDeviceToken: lastModifierDeviceToken
          isDone: true
          parentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          url: url
          isHidden: true
          notifyTimingValue: 1
          size: 0
          repeatOffAt: 2000-01-23T04:56:07.000+00:00
          name: name
          notifyTimingUnit: notifyTimingUnit
          storageObjectId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          md5: md5
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        data:
          $ref: '#/components/schemas/PuupeeDto'
        userId:
          format: uuid
          type: string
      type: object
    PuupeeDto:
      example:
        tagging: tagging
        extension: extension
        creationTime: 2000-01-23T04:56:07.000+00:00
        repeatOffTimes: 5
        lastModificationTime: 2000-01-23T04:56:07.000+00:00
        thumb:
          storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
          syncVersion: 6
          extension: extension
          creationTime: 2000-01-23T04:56:07.000+00:00
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          deletionTime: 2000-01-23T04:56:07.000+00:00
          url: url
          storageClass: storageClass
          password: password
          isDeleted: true
          size: 0
          name: name
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          rapidCode: rapidCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sliceMd5: sliceMd5
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          contentType: contentType
          storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
          key: key
          md5: md5
        creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        description: description
        deletionTime: 2000-01-23T04:56:07.000+00:00
        title: title
        type: type
        displayStyle: displayStyle
        password: password
        storageClass: storageClass
        isDeleted: true
        repeat: repeat
        lastModifierDevice: lastModifierDevice
        lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        rapidCode: rapidCode
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        text: text
        sliceMd5: sliceMd5
        contentType: contentType
        storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
        key: key
        startAt: 2000-01-23T04:56:07.000+00:00
        storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
        storageObject:
          storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
          syncVersion: 6
          extension: extension
          creationTime: 2000-01-23T04:56:07.000+00:00
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          deletionTime: 2000-01-23T04:56:07.000+00:00
          url: url
          storageClass: storageClass
          password: password
          isDeleted: true
          size: 0
          name: name
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          rapidCode: rapidCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sliceMd5: sliceMd5
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          contentType: contentType
          storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
          key: key
          md5: md5
        doneAt: 2000-01-23T04:56:07.000+00:00
        syncVersion: 5
        notifyAt: 2000-01-23T04:56:07.000+00:00
        notifyTimingType: notifyTimingType
        format: format
        priority: 6
        endAt: 2000-01-23T04:56:07.000+00:00
        lastModifierDeviceToken: lastModifierDeviceToken
        isDone: true
        parentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        url: url
        isHidden: true
        notifyTimingValue: 1
        size: 0
        repeatOffAt: 2000-01-23T04:56:07.000+00:00
        name: name
        notifyTimingUnit: notifyTimingUnit
        storageObjectId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        md5: md5
      properties:
        id:
          format: uuid
          type: string
        creationTime:
          format: date-time
          type: string
        creatorId:
          format: uuid
          type: string
        lastModificationTime:
          format: date-time
          type: string
        lastModifierId:
          format: uuid
          type: string
        isDeleted:
          type: boolean
        deleterId:
          format: uuid
          type: string
        deletionTime:
          format: date-time
          type: string
        name:
          type: string
        title:
          type: string
        description:
          type: string
        text:
          type: string
        format:
          type: string
        password:
          type: string
        parentId:
          format: uuid
          type: string
        key:
          type: string
        url:
          type: string
        size:
          format: int64
          type: integer
        md5:
          type: string
        sliceMd5:
          type: string
        rapidCode:
          type: string
        contentType:
          type: string
        type:
          type: string
        displayStyle:
          type: string
        extension:
          type: string
        storageClass:
          type: string
        storageObjectCreatedAt:
          format: date-time
          type: string
        storageObjectUpdatedAt:
          format: date-time
          type: string
        storageObjectId:
          format: uuid
          type: string
        storageObject:
          $ref: '#/components/schemas/StorageObjectDto'
        thumb:
          $ref: '#/components/schemas/StorageObjectDto'
        priority:
          type: integer
        doneAt:
          format: date-time
          type: string
        isDone:
          type: boolean
        startAt:
          format: date-time
          type: string
        endAt:
          format: date-time
          type: string
        notifyAt:
          format: date-time
          type: string
        notifyTimingType:
          type: string
        notifyTimingUnit:
          type: string
        notifyTimingValue:
          format: int32
          type: integer
        repeat:
          type: string
        repeatOffAt:
          format: date-time
          type: string
        repeatOffTimes:
          format: int32
          type: integer
        syncVersion:
          format: int64
          type: integer
        isHidden:
          type: boolean
        tagging:
          type: string
        lastModifierDeviceToken:
          type: string
        lastModifierDevice:
          type: string
      type: object
    PuupeeDtoPagedResultDto:
      example:
        totalCount: 2
        items:
        - tagging: tagging
          extension: extension
          creationTime: 2000-01-23T04:56:07.000+00:00
          repeatOffTimes: 5
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          thumb:
            storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
            syncVersion: 6
            extension: extension
            creationTime: 2000-01-23T04:56:07.000+00:00
            lastModificationTime: 2000-01-23T04:56:07.000+00:00
            creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            deletionTime: 2000-01-23T04:56:07.000+00:00
            url: url
            storageClass: storageClass
            password: password
            isDeleted: true
            size: 0
            name: name
            lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            rapidCode: rapidCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            sliceMd5: sliceMd5
            deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            contentType: contentType
            storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
            key: key
            md5: md5
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          description: description
          deletionTime: 2000-01-23T04:56:07.000+00:00
          title: title
          type: type
          displayStyle: displayStyle
          password: password
          storageClass: storageClass
          isDeleted: true
          repeat: repeat
          lastModifierDevice: lastModifierDevice
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          rapidCode: rapidCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          text: text
          sliceMd5: sliceMd5
          contentType: contentType
          storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
          key: key
          startAt: 2000-01-23T04:56:07.000+00:00
          storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
          storageObject:
            storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
            syncVersion: 6
            extension: extension
            creationTime: 2000-01-23T04:56:07.000+00:00
            lastModificationTime: 2000-01-23T04:56:07.000+00:00
            creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            deletionTime: 2000-01-23T04:56:07.000+00:00
            url: url
            storageClass: storageClass
            password: password
            isDeleted: true
            size: 0
            name: name
            lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            rapidCode: rapidCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            sliceMd5: sliceMd5
            deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            contentType: contentType
            storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
            key: key
            md5: md5
          doneAt: 2000-01-23T04:56:07.000+00:00
          syncVersion: 5
          notifyAt: 2000-01-23T04:56:07.000+00:00
          notifyTimingType: notifyTimingType
          format: format
          priority: 6
          endAt: 2000-01-23T04:56:07.000+00:00
          lastModifierDeviceToken: lastModifierDeviceToken
          isDone: true
          parentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          url: url
          isHidden: true
          notifyTimingValue: 1
          size: 0
          repeatOffAt: 2000-01-23T04:56:07.000+00:00
          name: name
          notifyTimingUnit: notifyTimingUnit
          storageObjectId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          md5: md5
        - tagging: tagging
          extension: extension
          creationTime: 2000-01-23T04:56:07.000+00:00
          repeatOffTimes: 5
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          thumb:
            storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
            syncVersion: 6
            extension: extension
            creationTime: 2000-01-23T04:56:07.000+00:00
            lastModificationTime: 2000-01-23T04:56:07.000+00:00
            creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            deletionTime: 2000-01-23T04:56:07.000+00:00
            url: url
            storageClass: storageClass
            password: password
            isDeleted: true
            size: 0
            name: name
            lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            rapidCode: rapidCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            sliceMd5: sliceMd5
            deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            contentType: contentType
            storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
            key: key
            md5: md5
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          description: description
          deletionTime: 2000-01-23T04:56:07.000+00:00
          title: title
          type: type
          displayStyle: displayStyle
          password: password
          storageClass: storageClass
          isDeleted: true
          repeat: repeat
          lastModifierDevice: lastModifierDevice
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          rapidCode: rapidCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          text: text
          sliceMd5: sliceMd5
          contentType: contentType
          storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
          key: key
          startAt: 2000-01-23T04:56:07.000+00:00
          storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
          storageObject:
            storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
            syncVersion: 6
            extension: extension
            creationTime: 2000-01-23T04:56:07.000+00:00
            lastModificationTime: 2000-01-23T04:56:07.000+00:00
            creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            deletionTime: 2000-01-23T04:56:07.000+00:00
            url: url
            storageClass: storageClass
            password: password
            isDeleted: true
            size: 0
            name: name
            lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            rapidCode: rapidCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            sliceMd5: sliceMd5
            deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            contentType: contentType
            storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
            key: key
            md5: md5
          doneAt: 2000-01-23T04:56:07.000+00:00
          syncVersion: 5
          notifyAt: 2000-01-23T04:56:07.000+00:00
          notifyTimingType: notifyTimingType
          format: format
          priority: 6
          endAt: 2000-01-23T04:56:07.000+00:00
          lastModifierDeviceToken: lastModifierDeviceToken
          isDone: true
          parentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          url: url
          isHidden: true
          notifyTimingValue: 1
          size: 0
          repeatOffAt: 2000-01-23T04:56:07.000+00:00
          name: name
          notifyTimingUnit: notifyTimingUnit
          storageObjectId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          md5: md5
      properties:
        items:
          items:
            $ref: '#/components/schemas/PuupeeDto'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    RefreshDeviceStatusDto:
      example:
        token: token
        status: status
      properties:
        token:
          type: string
        status:
          type: string
      type: object
    RegisterDto:
      example:
        emailAddress: emailAddress
        password: password
        appName: appName
        extraProperties:
          key: "{}"
        userName: userName
      properties:
        extraProperties:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        userName:
          maxLength: 256
          minLength: 0
          type: string
        emailAddress:
          format: email
          maxLength: 256
          minLength: 0
          type: string
        password:
          format: password
          maxLength: 128
          minLength: 0
          type: string
        appName:
          type: string
      required:
      - appName
      - emailAddress
      - password
      - userName
      type: object
    RemoteServiceErrorInfo:
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: string
        data:
          additionalProperties:
            type: object
          type: object
        validationErrors:
          items:
            $ref: '#/components/schemas/RemoteServiceValidationErrorInfo'
          type: array
      type: object
    RemoteServiceErrorResponse:
      properties:
        error:
          $ref: '#/components/schemas/RemoteServiceErrorInfo'
      type: object
    RemoteServiceValidationErrorInfo:
      properties:
        message:
          type: string
        members:
          items:
            type: string
          type: array
      type: object
    ResetPasswordDto:
      example:
        password: password
        resetToken: resetToken
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        userId:
          format: uuid
          type: string
        resetToken:
          type: string
        password:
          type: string
      required:
      - password
      - resetToken
      type: object
    ReturnValueApiDescriptionModel:
      example:
        typeSimple: typeSimple
        type: type
      properties:
        type:
          type: string
        typeSimple:
          type: string
      type: object
    SendPasswordResetCodeDto:
      example:
        returnUrlHash: returnUrlHash
        appName: appName
        returnUrl: returnUrl
        email: email
      properties:
        email:
          format: email
          maxLength: 256
          minLength: 0
          type: string
        appName:
          type: string
        returnUrl:
          type: string
        returnUrlHash:
          type: string
      required:
      - appName
      - email
      type: object
    SendTestEmailInput:
      example:
        targetEmailAddress: targetEmailAddress
        senderEmailAddress: senderEmailAddress
        subject: subject
        body: body
      properties:
        senderEmailAddress:
          type: string
        targetEmailAddress:
          type: string
        subject:
          type: string
        body:
          type: string
      required:
      - senderEmailAddress
      - subject
      - targetEmailAddress
      type: object
    SendVerificationCodeDto:
      example:
        codeSender: codeSender
        purpose: purpose
        account: account
      properties:
        codeSender:
          type: string
        account:
          type: string
        purpose:
          type: string
      type: object
    SettingsDto:
      example:
        appTheme:
          themeMode: null
          sourceColor: sourceColor
        todoSettings:
          showCompleted: true
          orderBy: null
          showDetails: true
        language: language
      properties:
        appTheme:
          $ref: '#/components/schemas/AppTheme'
        language:
          type: string
        todoSettings:
          $ref: '#/components/schemas/TodoSettingsDto'
      type: object
    SimpleDataDto:
      example:
        creationTime: 2000-01-23T04:56:07.000+00:00
        creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        extraProperties:
          key: "{}"
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        collection: collection
      properties:
        extraProperties:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        id:
          format: uuid
          type: string
        creationTime:
          format: date-time
          type: string
        creatorId:
          format: uuid
          type: string
        collection:
          type: string
      type: object
    SimpleDataDtoPagedResultDto:
      example:
        totalCount: 0
        items:
        - creationTime: 2000-01-23T04:56:07.000+00:00
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          extraProperties:
            key: "{}"
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          collection: collection
        - creationTime: 2000-01-23T04:56:07.000+00:00
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          extraProperties:
            key: "{}"
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          collection: collection
      properties:
        items:
          items:
            $ref: '#/components/schemas/SimpleDataDto'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    StorageObjectCredentials:
      example:
        securityToken: securityToken
        accessKeyId: accessKeyId
        endPoint: endPoint
        bucketName: bucketName
        storageClass: storageClass
        accessKeySecret: accessKeySecret
        regionId: regionId
        appId: appId
        expiration: expiration
        protocal: protocal
        expiredTime: 1
      properties:
        storageClass:
          type: string
        endPoint:
          type: string
        protocal:
          type: string
        bucketName:
          type: string
        regionId:
          type: string
        securityToken:
          type: string
        accessKeyId:
          type: string
        accessKeySecret:
          type: string
        expiration:
          type: string
        expiredTime:
          format: int64
          type: integer
        appId:
          type: string
      type: object
    StorageObjectDto:
      example:
        storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
        syncVersion: 6
        extension: extension
        creationTime: 2000-01-23T04:56:07.000+00:00
        lastModificationTime: 2000-01-23T04:56:07.000+00:00
        creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        deletionTime: 2000-01-23T04:56:07.000+00:00
        url: url
        storageClass: storageClass
        password: password
        isDeleted: true
        size: 0
        name: name
        lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        rapidCode: rapidCode
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sliceMd5: sliceMd5
        deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        contentType: contentType
        storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
        key: key
        md5: md5
      properties:
        id:
          format: uuid
          type: string
        creationTime:
          format: date-time
          type: string
        creatorId:
          format: uuid
          type: string
        lastModificationTime:
          format: date-time
          type: string
        lastModifierId:
          format: uuid
          type: string
        isDeleted:
          type: boolean
        deleterId:
          format: uuid
          type: string
        deletionTime:
          format: date-time
          type: string
        name:
          type: string
        key:
          type: string
        url:
          type: string
        size:
          format: int64
          type: integer
        md5:
          type: string
        sliceMd5:
          type: string
        rapidCode:
          type: string
        contentType:
          type: string
        extension:
          type: string
        storageClass:
          type: string
        storageObjectCreatedAt:
          format: date-time
          type: string
        storageObjectUpdatedAt:
          format: date-time
          type: string
        syncVersion:
          format: int64
          type: integer
        password:
          type: string
      type: object
    StorageObjectOrCredentialsDto:
      example:
        storageObject:
          storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
          syncVersion: 6
          extension: extension
          creationTime: 2000-01-23T04:56:07.000+00:00
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          deletionTime: 2000-01-23T04:56:07.000+00:00
          url: url
          storageClass: storageClass
          password: password
          isDeleted: true
          size: 0
          name: name
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          rapidCode: rapidCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          sliceMd5: sliceMd5
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          contentType: contentType
          storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
          key: key
          md5: md5
        credentials:
          securityToken: securityToken
          accessKeyId: accessKeyId
          endPoint: endPoint
          bucketName: bucketName
          storageClass: storageClass
          accessKeySecret: accessKeySecret
          regionId: regionId
          appId: appId
          expiration: expiration
          protocal: protocal
          expiredTime: 1
      properties:
        storageObject:
          $ref: '#/components/schemas/StorageObjectDto'
        credentials:
          $ref: '#/components/schemas/StorageObjectCredentials'
      type: object
    StringKeyValue:
      example:
        expiredAt: 2000-01-23T04:56:07.000+00:00
        createdAt: 2000-01-23T04:56:07.000+00:00
        durationSeconds: 0.8008281904610115
        value: value
      properties:
        value:
          type: string
        durationSeconds:
          format: double
          type: number
        expiredAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
      type: object
    StringSetKeyValueDto:
      example:
        durationSeconds: 0.8008281904610115
        value: value
      properties:
        value:
          type: string
        durationSeconds:
          format: double
          type: number
      type: object
    SyncStateDto:
      example:
        lastSyncAt: 2000-01-23T04:56:07.000+00:00
        version: 0
      properties:
        lastSyncAt:
          format: date-time
          type: string
        version:
          format: int64
          type: integer
      type: object
    TenantCreateDto:
      example:
        name: name
        adminEmailAddress: adminEmailAddress
        extraProperties:
          key: "{}"
        adminPassword: adminPassword
      properties:
        extraProperties:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        name:
          maxLength: 64
          minLength: 0
          type: string
        adminEmailAddress:
          format: email
          maxLength: 256
          type: string
        adminPassword:
          maxLength: 128
          type: string
      required:
      - adminEmailAddress
      - adminPassword
      - name
      type: object
    TenantDto:
      example:
        name: name
        extraProperties:
          key: "{}"
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        concurrencyStamp: concurrencyStamp
      properties:
        extraProperties:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        id:
          format: uuid
          type: string
        name:
          type: string
        concurrencyStamp:
          type: string
      type: object
    TenantDtoPagedResultDto:
      example:
        totalCount: 0
        items:
        - name: name
          extraProperties:
            key: "{}"
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          concurrencyStamp: concurrencyStamp
        - name: name
          extraProperties:
            key: "{}"
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          concurrencyStamp: concurrencyStamp
      properties:
        items:
          items:
            $ref: '#/components/schemas/TenantDto'
          type: array
        totalCount:
          format: int64
          type: integer
      type: object
    TenantUpdateDto:
      example:
        name: name
        extraProperties:
          key: "{}"
        concurrencyStamp: concurrencyStamp
      properties:
        extraProperties:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        name:
          maxLength: 64
          minLength: 0
          type: string
        concurrencyStamp:
          type: string
      required:
      - name
      type: object
    TestDateTime:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        puupee:
          tagging: tagging
          extension: extension
          creationTime: 2000-01-23T04:56:07.000+00:00
          repeatOffTimes: 5
          lastModificationTime: 2000-01-23T04:56:07.000+00:00
          thumb:
            storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
            syncVersion: 6
            extension: extension
            creationTime: 2000-01-23T04:56:07.000+00:00
            lastModificationTime: 2000-01-23T04:56:07.000+00:00
            creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            deletionTime: 2000-01-23T04:56:07.000+00:00
            url: url
            storageClass: storageClass
            password: password
            isDeleted: true
            size: 0
            name: name
            lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            rapidCode: rapidCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            sliceMd5: sliceMd5
            deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            contentType: contentType
            storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
            key: key
            md5: md5
          creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          description: description
          deletionTime: 2000-01-23T04:56:07.000+00:00
          title: title
          type: type
          displayStyle: displayStyle
          password: password
          storageClass: storageClass
          isDeleted: true
          repeat: repeat
          lastModifierDevice: lastModifierDevice
          lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          rapidCode: rapidCode
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          text: text
          sliceMd5: sliceMd5
          contentType: contentType
          storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
          key: key
          startAt: 2000-01-23T04:56:07.000+00:00
          storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
          storageObject:
            storageObjectCreatedAt: 2000-01-23T04:56:07.000+00:00
            syncVersion: 6
            extension: extension
            creationTime: 2000-01-23T04:56:07.000+00:00
            lastModificationTime: 2000-01-23T04:56:07.000+00:00
            creatorId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            deletionTime: 2000-01-23T04:56:07.000+00:00
            url: url
            storageClass: storageClass
            password: password
            isDeleted: true
            size: 0
            name: name
            lastModifierId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            rapidCode: rapidCode
            id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            sliceMd5: sliceMd5
            deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
            contentType: contentType
            storageObjectUpdatedAt: 2000-01-23T04:56:07.000+00:00
            key: key
            md5: md5
          doneAt: 2000-01-23T04:56:07.000+00:00
          syncVersion: 5
          notifyAt: 2000-01-23T04:56:07.000+00:00
          notifyTimingType: notifyTimingType
          format: format
          priority: 6
          endAt: 2000-01-23T04:56:07.000+00:00
          lastModifierDeviceToken: lastModifierDeviceToken
          isDone: true
          parentId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          url: url
          isHidden: true
          notifyTimingValue: 1
          size: 0
          repeatOffAt: 2000-01-23T04:56:07.000+00:00
          name: name
          notifyTimingUnit: notifyTimingUnit
          storageObjectId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          deleterId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          md5: md5
      properties:
        createdAt:
          format: date-time
          type: string
        puupee:
          $ref: '#/components/schemas/PuupeeDto'
      type: object
    TimeZone:
      example:
        iana:
          timeZoneName: timeZoneName
        windows:
          timeZoneId: timeZoneId
      properties:
        iana:
          $ref: '#/components/schemas/IanaTimeZone'
        windows:
          $ref: '#/components/schemas/WindowsTimeZone'
      type: object
    TimingDto:
      example:
        timeZone:
          iana:
            timeZoneName: timeZoneName
          windows:
            timeZoneId: timeZoneId
      properties:
        timeZone:
          $ref: '#/components/schemas/TimeZone'
      type: object
    TodoOrderBy:
      enum:
      - CreationTime
      - CreationTimeDesc
      - LastModificationTime
      - LastModificationTimeDesc
      - Title
      - TitleDesc
      - Priority
      - PriorityDesc
      - Tag
      - TagDesc
      type: string
    TodoSettingsDto:
      example:
        showCompleted: true
        orderBy: null
        showDetails: true
      properties:
        showCompleted:
          type: boolean
        showDetails:
          type: boolean
        orderBy:
          $ref: '#/components/schemas/TodoOrderBy'
      type: object
    TypeApiDescriptionModel:
      example:
        genericArguments:
        - genericArguments
        - genericArguments
        enumNames:
        - enumNames
        - enumNames
        isEnum: true
        properties:
        - isRequired: true
          regex: regex
          jsonName: jsonName
          minLength: 0
          name: name
          typeSimple: typeSimple
          maximum: maximum
          type: type
          minimum: minimum
          maxLength: 6
        - isRequired: true
          regex: regex
          jsonName: jsonName
          minLength: 0
          name: name
          typeSimple: typeSimple
          maximum: maximum
          type: type
          minimum: minimum
          maxLength: 6
        baseType: baseType
        enumValues:
        - "{}"
        - "{}"
      properties:
        baseType:
          type: string
        isEnum:
          type: boolean
        enumNames:
          items:
            type: string
          type: array
        enumValues:
          items:
            type: object
          type: array
        genericArguments:
          items:
            type: string
          type: array
        properties:
          items:
            $ref: '#/components/schemas/PropertyApiDescriptionModel'
          type: array
      type: object
    UpdateEmailSettingsDto:
      example:
        smtpHost: smtpHost
        smtpUseDefaultCredentials: true
        smtpUserName: smtpUserName
        smtpDomain: smtpDomain
        defaultFromAddress: defaultFromAddress
        smtpPort: 5249
        smtpPassword: smtpPassword
        defaultFromDisplayName: defaultFromDisplayName
        smtpEnableSsl: true
      properties:
        smtpHost:
          maxLength: 256
          type: string
        smtpPort:
          format: int32
          maximum: 65535
          minimum: 1
          type: integer
        smtpUserName:
          maxLength: 1024
          type: string
        smtpPassword:
          format: password
          maxLength: 1024
          type: string
        smtpDomain:
          maxLength: 1024
          type: string
        smtpEnableSsl:
          type: boolean
        smtpUseDefaultCredentials:
          type: boolean
        defaultFromAddress:
          maxLength: 1024
          type: string
        defaultFromDisplayName:
          maxLength: 1024
          type: string
      required:
      - defaultFromAddress
      - defaultFromDisplayName
      type: object
    UpdateFeatureDto:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    UpdateFeaturesDto:
      example:
        features:
        - name: name
          value: value
        - name: name
          value: value
      properties:
        features:
          items:
            $ref: '#/components/schemas/UpdateFeatureDto'
          type: array
      type: object
    UpdatePermissionDto:
      example:
        isGranted: true
        name: name
      properties:
        name:
          type: string
        isGranted:
          type: boolean
      type: object
    UpdatePermissionsDto:
      example:
        permissions:
        - isGranted: true
          name: name
        - isGranted: true
          name: name
      properties:
        permissions:
          items:
            $ref: '#/components/schemas/UpdatePermissionDto'
          type: array
      type: object
    UpdateProfileDto:
      example:
        phoneNumber: phoneNumber
        surname: surname
        name: name
        extraProperties:
          key: "{}"
        userName: userName
        concurrencyStamp: concurrencyStamp
        email: email
      properties:
        extraProperties:
          additionalProperties:
            type: object
          readOnly: true
          type: object
        userName:
          maxLength: 256
          minLength: 0
          type: string
        email:
          maxLength: 256
          minLength: 0
          type: string
        name:
          maxLength: 64
          minLength: 0
          type: string
        surname:
          maxLength: 64
          minLength: 0
          type: string
        phoneNumber:
          maxLength: 16
          minLength: 0
          type: string
        concurrencyStamp:
          type: string
      type: object
    UserData:
      example:
        phoneNumber: phoneNumber
        emailConfirmed: true
        surname: surname
        tenantId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userName: userName
        isActive: true
        email: email
        phoneNumberConfirmed: true
      properties:
        id:
          format: uuid
          type: string
        tenantId:
          format: uuid
          type: string
        userName:
          type: string
        name:
          type: string
        surname:
          type: string
        isActive:
          type: boolean
        email:
          type: string
        emailConfirmed:
          type: boolean
        phoneNumber:
          type: string
        phoneNumberConfirmed:
          type: boolean
      type: object
    UserDataListResultDto:
      example:
        items:
        - phoneNumber: phoneNumber
          emailConfirmed: true
          surname: surname
          tenantId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userName: userName
          isActive: true
          email: email
          phoneNumberConfirmed: true
        - phoneNumber: phoneNumber
          emailConfirmed: true
          surname: surname
          tenantId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userName: userName
          isActive: true
          email: email
          phoneNumberConfirmed: true
      properties:
        items:
          items:
            $ref: '#/components/schemas/UserData'
          type: array
      type: object
    UserLoginInfo:
      example:
        password: password
        userNameOrEmailAddress: userNameOrEmailAddress
        rememberMe: true
      properties:
        userNameOrEmailAddress:
          maxLength: 255
          minLength: 0
          type: string
        password:
          format: password
          maxLength: 32
          minLength: 0
          type: string
        rememberMe:
          type: boolean
      required:
      - password
      - userNameOrEmailAddress
      type: object
    UserStorageDto:
      example:
        displayName: displayName
        name: name
        maxSize: 0
        totalCount: 1
        items:
        - size: 5
          name: name
          count: 5
          title: title
        - size: 5
          name: name
          count: 5
          title: title
        currentSize: 6
      properties:
        name:
          type: string
        displayName:
          type: string
        maxSize:
          format: int64
          type: integer
        currentSize:
          format: int64
          type: integer
        totalCount:
          format: int32
          type: integer
        items:
          items:
            $ref: '#/components/schemas/UserStorageItemDto'
          type: array
      type: object
    UserStorageItemDto:
      example:
        size: 5
        name: name
        count: 5
        title: title
      properties:
        name:
          type: string
        title:
          type: string
        count:
          format: int32
          type: integer
        size:
          format: int64
          type: integer
      type: object
    VerifyPasswordResetTokenInput:
      example:
        resetToken: resetToken
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        userId:
          format: uuid
          type: string
        resetToken:
          type: string
      required:
      - resetToken
      type: object
    WindowsTimeZone:
      example:
        timeZoneId: timeZoneId
      properties:
        timeZoneId:
          type: string
      type: object
  securitySchemes:
    oauth2:
      flows:
        authorizationCode:
          authorizationUrl: https://localhost:44355/connect/authorize
          scopes:
            Puupees: Puupee API
          tokenUrl: https://localhost:44355/connect/token
      type: oauth2
x-original-swagger-version: "2.0"
