/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
)

// checks if the CurrentUserDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrentUserDto{}

// CurrentUserDto struct for CurrentUserDto
type CurrentUserDto struct {
	IsAuthenticated *bool `json:"isAuthenticated,omitempty"`
	Id NullableString `json:"id,omitempty"`
	TenantId NullableString `json:"tenantId,omitempty"`
	ImpersonatorUserId NullableString `json:"impersonatorUserId,omitempty"`
	ImpersonatorTenantId NullableString `json:"impersonatorTenantId,omitempty"`
	ImpersonatorUserName NullableString `json:"impersonatorUserName,omitempty"`
	ImpersonatorTenantName NullableString `json:"impersonatorTenantName,omitempty"`
	UserName NullableString `json:"userName,omitempty"`
	Name NullableString `json:"name,omitempty"`
	SurName NullableString `json:"surName,omitempty"`
	Email NullableString `json:"email,omitempty"`
	EmailVerified *bool `json:"emailVerified,omitempty"`
	PhoneNumber NullableString `json:"phoneNumber,omitempty"`
	PhoneNumberVerified *bool `json:"phoneNumberVerified,omitempty"`
	Roles []string `json:"roles,omitempty"`
}

// NewCurrentUserDto instantiates a new CurrentUserDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrentUserDto() *CurrentUserDto {
	this := CurrentUserDto{}
	return &this
}

// NewCurrentUserDtoWithDefaults instantiates a new CurrentUserDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrentUserDtoWithDefaults() *CurrentUserDto {
	this := CurrentUserDto{}
	return &this
}

// GetIsAuthenticated returns the IsAuthenticated field value if set, zero value otherwise.
func (o *CurrentUserDto) GetIsAuthenticated() bool {
	if o == nil || IsNil(o.IsAuthenticated) {
		var ret bool
		return ret
	}
	return *o.IsAuthenticated
}

// GetIsAuthenticatedOk returns a tuple with the IsAuthenticated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentUserDto) GetIsAuthenticatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAuthenticated) {
		return nil, false
	}
	return o.IsAuthenticated, true
}

// HasIsAuthenticated returns a boolean if a field has been set.
func (o *CurrentUserDto) HasIsAuthenticated() bool {
	if o != nil && !IsNil(o.IsAuthenticated) {
		return true
	}

	return false
}

// SetIsAuthenticated gets a reference to the given bool and assigns it to the IsAuthenticated field.
func (o *CurrentUserDto) SetIsAuthenticated(v bool) {
	o.IsAuthenticated = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUserDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUserDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CurrentUserDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CurrentUserDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CurrentUserDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CurrentUserDto) UnsetId() {
	o.Id.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUserDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUserDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *CurrentUserDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *CurrentUserDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *CurrentUserDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *CurrentUserDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetImpersonatorUserId returns the ImpersonatorUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUserDto) GetImpersonatorUserId() string {
	if o == nil || IsNil(o.ImpersonatorUserId.Get()) {
		var ret string
		return ret
	}
	return *o.ImpersonatorUserId.Get()
}

// GetImpersonatorUserIdOk returns a tuple with the ImpersonatorUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUserDto) GetImpersonatorUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImpersonatorUserId.Get(), o.ImpersonatorUserId.IsSet()
}

// HasImpersonatorUserId returns a boolean if a field has been set.
func (o *CurrentUserDto) HasImpersonatorUserId() bool {
	if o != nil && o.ImpersonatorUserId.IsSet() {
		return true
	}

	return false
}

// SetImpersonatorUserId gets a reference to the given NullableString and assigns it to the ImpersonatorUserId field.
func (o *CurrentUserDto) SetImpersonatorUserId(v string) {
	o.ImpersonatorUserId.Set(&v)
}
// SetImpersonatorUserIdNil sets the value for ImpersonatorUserId to be an explicit nil
func (o *CurrentUserDto) SetImpersonatorUserIdNil() {
	o.ImpersonatorUserId.Set(nil)
}

// UnsetImpersonatorUserId ensures that no value is present for ImpersonatorUserId, not even an explicit nil
func (o *CurrentUserDto) UnsetImpersonatorUserId() {
	o.ImpersonatorUserId.Unset()
}

// GetImpersonatorTenantId returns the ImpersonatorTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUserDto) GetImpersonatorTenantId() string {
	if o == nil || IsNil(o.ImpersonatorTenantId.Get()) {
		var ret string
		return ret
	}
	return *o.ImpersonatorTenantId.Get()
}

// GetImpersonatorTenantIdOk returns a tuple with the ImpersonatorTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUserDto) GetImpersonatorTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImpersonatorTenantId.Get(), o.ImpersonatorTenantId.IsSet()
}

// HasImpersonatorTenantId returns a boolean if a field has been set.
func (o *CurrentUserDto) HasImpersonatorTenantId() bool {
	if o != nil && o.ImpersonatorTenantId.IsSet() {
		return true
	}

	return false
}

// SetImpersonatorTenantId gets a reference to the given NullableString and assigns it to the ImpersonatorTenantId field.
func (o *CurrentUserDto) SetImpersonatorTenantId(v string) {
	o.ImpersonatorTenantId.Set(&v)
}
// SetImpersonatorTenantIdNil sets the value for ImpersonatorTenantId to be an explicit nil
func (o *CurrentUserDto) SetImpersonatorTenantIdNil() {
	o.ImpersonatorTenantId.Set(nil)
}

// UnsetImpersonatorTenantId ensures that no value is present for ImpersonatorTenantId, not even an explicit nil
func (o *CurrentUserDto) UnsetImpersonatorTenantId() {
	o.ImpersonatorTenantId.Unset()
}

// GetImpersonatorUserName returns the ImpersonatorUserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUserDto) GetImpersonatorUserName() string {
	if o == nil || IsNil(o.ImpersonatorUserName.Get()) {
		var ret string
		return ret
	}
	return *o.ImpersonatorUserName.Get()
}

// GetImpersonatorUserNameOk returns a tuple with the ImpersonatorUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUserDto) GetImpersonatorUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImpersonatorUserName.Get(), o.ImpersonatorUserName.IsSet()
}

// HasImpersonatorUserName returns a boolean if a field has been set.
func (o *CurrentUserDto) HasImpersonatorUserName() bool {
	if o != nil && o.ImpersonatorUserName.IsSet() {
		return true
	}

	return false
}

// SetImpersonatorUserName gets a reference to the given NullableString and assigns it to the ImpersonatorUserName field.
func (o *CurrentUserDto) SetImpersonatorUserName(v string) {
	o.ImpersonatorUserName.Set(&v)
}
// SetImpersonatorUserNameNil sets the value for ImpersonatorUserName to be an explicit nil
func (o *CurrentUserDto) SetImpersonatorUserNameNil() {
	o.ImpersonatorUserName.Set(nil)
}

// UnsetImpersonatorUserName ensures that no value is present for ImpersonatorUserName, not even an explicit nil
func (o *CurrentUserDto) UnsetImpersonatorUserName() {
	o.ImpersonatorUserName.Unset()
}

// GetImpersonatorTenantName returns the ImpersonatorTenantName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUserDto) GetImpersonatorTenantName() string {
	if o == nil || IsNil(o.ImpersonatorTenantName.Get()) {
		var ret string
		return ret
	}
	return *o.ImpersonatorTenantName.Get()
}

// GetImpersonatorTenantNameOk returns a tuple with the ImpersonatorTenantName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUserDto) GetImpersonatorTenantNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImpersonatorTenantName.Get(), o.ImpersonatorTenantName.IsSet()
}

// HasImpersonatorTenantName returns a boolean if a field has been set.
func (o *CurrentUserDto) HasImpersonatorTenantName() bool {
	if o != nil && o.ImpersonatorTenantName.IsSet() {
		return true
	}

	return false
}

// SetImpersonatorTenantName gets a reference to the given NullableString and assigns it to the ImpersonatorTenantName field.
func (o *CurrentUserDto) SetImpersonatorTenantName(v string) {
	o.ImpersonatorTenantName.Set(&v)
}
// SetImpersonatorTenantNameNil sets the value for ImpersonatorTenantName to be an explicit nil
func (o *CurrentUserDto) SetImpersonatorTenantNameNil() {
	o.ImpersonatorTenantName.Set(nil)
}

// UnsetImpersonatorTenantName ensures that no value is present for ImpersonatorTenantName, not even an explicit nil
func (o *CurrentUserDto) UnsetImpersonatorTenantName() {
	o.ImpersonatorTenantName.Unset()
}

// GetUserName returns the UserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUserDto) GetUserName() string {
	if o == nil || IsNil(o.UserName.Get()) {
		var ret string
		return ret
	}
	return *o.UserName.Get()
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUserDto) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserName.Get(), o.UserName.IsSet()
}

// HasUserName returns a boolean if a field has been set.
func (o *CurrentUserDto) HasUserName() bool {
	if o != nil && o.UserName.IsSet() {
		return true
	}

	return false
}

// SetUserName gets a reference to the given NullableString and assigns it to the UserName field.
func (o *CurrentUserDto) SetUserName(v string) {
	o.UserName.Set(&v)
}
// SetUserNameNil sets the value for UserName to be an explicit nil
func (o *CurrentUserDto) SetUserNameNil() {
	o.UserName.Set(nil)
}

// UnsetUserName ensures that no value is present for UserName, not even an explicit nil
func (o *CurrentUserDto) UnsetUserName() {
	o.UserName.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUserDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUserDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CurrentUserDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CurrentUserDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CurrentUserDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CurrentUserDto) UnsetName() {
	o.Name.Unset()
}

// GetSurName returns the SurName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUserDto) GetSurName() string {
	if o == nil || IsNil(o.SurName.Get()) {
		var ret string
		return ret
	}
	return *o.SurName.Get()
}

// GetSurNameOk returns a tuple with the SurName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUserDto) GetSurNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SurName.Get(), o.SurName.IsSet()
}

// HasSurName returns a boolean if a field has been set.
func (o *CurrentUserDto) HasSurName() bool {
	if o != nil && o.SurName.IsSet() {
		return true
	}

	return false
}

// SetSurName gets a reference to the given NullableString and assigns it to the SurName field.
func (o *CurrentUserDto) SetSurName(v string) {
	o.SurName.Set(&v)
}
// SetSurNameNil sets the value for SurName to be an explicit nil
func (o *CurrentUserDto) SetSurNameNil() {
	o.SurName.Set(nil)
}

// UnsetSurName ensures that no value is present for SurName, not even an explicit nil
func (o *CurrentUserDto) UnsetSurName() {
	o.SurName.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUserDto) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUserDto) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *CurrentUserDto) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *CurrentUserDto) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *CurrentUserDto) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *CurrentUserDto) UnsetEmail() {
	o.Email.Unset()
}

// GetEmailVerified returns the EmailVerified field value if set, zero value otherwise.
func (o *CurrentUserDto) GetEmailVerified() bool {
	if o == nil || IsNil(o.EmailVerified) {
		var ret bool
		return ret
	}
	return *o.EmailVerified
}

// GetEmailVerifiedOk returns a tuple with the EmailVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentUserDto) GetEmailVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailVerified) {
		return nil, false
	}
	return o.EmailVerified, true
}

// HasEmailVerified returns a boolean if a field has been set.
func (o *CurrentUserDto) HasEmailVerified() bool {
	if o != nil && !IsNil(o.EmailVerified) {
		return true
	}

	return false
}

// SetEmailVerified gets a reference to the given bool and assigns it to the EmailVerified field.
func (o *CurrentUserDto) SetEmailVerified(v bool) {
	o.EmailVerified = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUserDto) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber.Get()) {
		var ret string
		return ret
	}
	return *o.PhoneNumber.Get()
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUserDto) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhoneNumber.Get(), o.PhoneNumber.IsSet()
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *CurrentUserDto) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber.IsSet() {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given NullableString and assigns it to the PhoneNumber field.
func (o *CurrentUserDto) SetPhoneNumber(v string) {
	o.PhoneNumber.Set(&v)
}
// SetPhoneNumberNil sets the value for PhoneNumber to be an explicit nil
func (o *CurrentUserDto) SetPhoneNumberNil() {
	o.PhoneNumber.Set(nil)
}

// UnsetPhoneNumber ensures that no value is present for PhoneNumber, not even an explicit nil
func (o *CurrentUserDto) UnsetPhoneNumber() {
	o.PhoneNumber.Unset()
}

// GetPhoneNumberVerified returns the PhoneNumberVerified field value if set, zero value otherwise.
func (o *CurrentUserDto) GetPhoneNumberVerified() bool {
	if o == nil || IsNil(o.PhoneNumberVerified) {
		var ret bool
		return ret
	}
	return *o.PhoneNumberVerified
}

// GetPhoneNumberVerifiedOk returns a tuple with the PhoneNumberVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrentUserDto) GetPhoneNumberVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.PhoneNumberVerified) {
		return nil, false
	}
	return o.PhoneNumberVerified, true
}

// HasPhoneNumberVerified returns a boolean if a field has been set.
func (o *CurrentUserDto) HasPhoneNumberVerified() bool {
	if o != nil && !IsNil(o.PhoneNumberVerified) {
		return true
	}

	return false
}

// SetPhoneNumberVerified gets a reference to the given bool and assigns it to the PhoneNumberVerified field.
func (o *CurrentUserDto) SetPhoneNumberVerified(v bool) {
	o.PhoneNumberVerified = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrentUserDto) GetRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrentUserDto) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *CurrentUserDto) HasRoles() bool {
	if o != nil && IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *CurrentUserDto) SetRoles(v []string) {
	o.Roles = v
}

func (o CurrentUserDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrentUserDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsAuthenticated) {
		toSerialize["isAuthenticated"] = o.IsAuthenticated
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.ImpersonatorUserId.IsSet() {
		toSerialize["impersonatorUserId"] = o.ImpersonatorUserId.Get()
	}
	if o.ImpersonatorTenantId.IsSet() {
		toSerialize["impersonatorTenantId"] = o.ImpersonatorTenantId.Get()
	}
	if o.ImpersonatorUserName.IsSet() {
		toSerialize["impersonatorUserName"] = o.ImpersonatorUserName.Get()
	}
	if o.ImpersonatorTenantName.IsSet() {
		toSerialize["impersonatorTenantName"] = o.ImpersonatorTenantName.Get()
	}
	if o.UserName.IsSet() {
		toSerialize["userName"] = o.UserName.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.SurName.IsSet() {
		toSerialize["surName"] = o.SurName.Get()
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if !IsNil(o.EmailVerified) {
		toSerialize["emailVerified"] = o.EmailVerified
	}
	if o.PhoneNumber.IsSet() {
		toSerialize["phoneNumber"] = o.PhoneNumber.Get()
	}
	if !IsNil(o.PhoneNumberVerified) {
		toSerialize["phoneNumberVerified"] = o.PhoneNumberVerified
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullableCurrentUserDto struct {
	value *CurrentUserDto
	isSet bool
}

func (v NullableCurrentUserDto) Get() *CurrentUserDto {
	return v.value
}

func (v *NullableCurrentUserDto) Set(val *CurrentUserDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrentUserDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrentUserDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrentUserDto(val *CurrentUserDto) *NullableCurrentUserDto {
	return &NullableCurrentUserDto{value: val, isSet: true}
}

func (v NullableCurrentUserDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrentUserDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


