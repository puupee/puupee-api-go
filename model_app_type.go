/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.17.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"fmt"
)

// AppType 应用类型
type AppType string

// List of AppType
const (
	APPTYPE_CLIENT AppType = "Client"
	APPTYPE_SERVICE AppType = "Service"
	APPTYPE_WEB AppType = "Web"
	APPTYPE_MESSAGE_ACCOUNT AppType = "MessageAccount"
	APPTYPE_WECHAT_MINI_PROGRAM AppType = "WechatMiniProgram"
	APPTYPE_EXTENSION AppType = "Extension"
	APPTYPE_RUNABLE AppType = "Runable"
	APPTYPE_WORKER AppType = "Worker"
)

// All allowed values of AppType enum
var AllowedAppTypeEnumValues = []AppType{
	"Client",
	"Service",
	"Web",
	"MessageAccount",
	"WechatMiniProgram",
	"Extension",
	"Runable",
	"Worker",
}

func (v *AppType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppType(value)
	for _, existing := range AllowedAppTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppType", value)
}

// NewAppTypeFromValue returns a pointer to a valid AppType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppTypeFromValue(v string) (*AppType, error) {
	ev := AppType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppType: valid values are %v", v, AllowedAppTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppType) IsValid() bool {
	for _, existing := range AllowedAppTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppType value
func (v AppType) Ptr() *AppType {
	return &v
}

type NullableAppType struct {
	value *AppType
	isSet bool
}

func (v NullableAppType) Get() *AppType {
	return v.value
}

func (v *NullableAppType) Set(val *AppType) {
	v.value = val
	v.isSet = true
}

func (v NullableAppType) IsSet() bool {
	return v.isSet
}

func (v *NullableAppType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppType(val *AppType) *NullableAppType {
	return &NullableAppType{value: val, isSet: true}
}

func (v NullableAppType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

