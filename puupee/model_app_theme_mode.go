/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package doggy

import (
	"encoding/json"
	"fmt"
)

// AppThemeMode the model 'AppThemeMode'
type AppThemeMode string

// List of AppThemeMode
const (
	APPTHEMEMODE_SYSTEM AppThemeMode = "System"
	APPTHEMEMODE_LIGHT AppThemeMode = "Light"
	APPTHEMEMODE_DARK AppThemeMode = "Dark"
)

// All allowed values of AppThemeMode enum
var AllowedAppThemeModeEnumValues = []AppThemeMode{
	"System",
	"Light",
	"Dark",
}

func (v *AppThemeMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppThemeMode(value)
	for _, existing := range AllowedAppThemeModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppThemeMode", value)
}

// NewAppThemeModeFromValue returns a pointer to a valid AppThemeMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppThemeModeFromValue(v string) (*AppThemeMode, error) {
	ev := AppThemeMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppThemeMode: valid values are %v", v, AllowedAppThemeModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppThemeMode) IsValid() bool {
	for _, existing := range AllowedAppThemeModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppThemeMode value
func (v AppThemeMode) Ptr() *AppThemeMode {
	return &v
}

type NullableAppThemeMode struct {
	value *AppThemeMode
	isSet bool
}

func (v NullableAppThemeMode) Get() *AppThemeMode {
	return v.value
}

func (v *NullableAppThemeMode) Set(val *AppThemeMode) {
	v.value = val
	v.isSet = true
}

func (v NullableAppThemeMode) IsSet() bool {
	return v.isSet
}

func (v *NullableAppThemeMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppThemeMode(val *AppThemeMode) *NullableAppThemeMode {
	return &NullableAppThemeMode{value: val, isSet: true}
}

func (v NullableAppThemeMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppThemeMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

