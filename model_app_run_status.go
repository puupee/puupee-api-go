/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"fmt"
)

// AppRunStatus Represents the status of an app run.
type AppRunStatus string

// List of AppRunStatus
const (
	APPRUNSTATUS_PENDING AppRunStatus = "Pending"
	APPRUNSTATUS_DISTRIBUTED AppRunStatus = "Distributed"
	APPRUNSTATUS_WAITING AppRunStatus = "Waiting"
	APPRUNSTATUS_RUNNING AppRunStatus = "Running"
	APPRUNSTATUS_CANCELED AppRunStatus = "Canceled"
	APPRUNSTATUS_FAILED AppRunStatus = "Failed"
	APPRUNSTATUS_SUCCEED AppRunStatus = "Succeed"
)

// All allowed values of AppRunStatus enum
var AllowedAppRunStatusEnumValues = []AppRunStatus{
	"Pending",
	"Distributed",
	"Waiting",
	"Running",
	"Canceled",
	"Failed",
	"Succeed",
}

func (v *AppRunStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppRunStatus(value)
	for _, existing := range AllowedAppRunStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppRunStatus", value)
}

// NewAppRunStatusFromValue returns a pointer to a valid AppRunStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppRunStatusFromValue(v string) (*AppRunStatus, error) {
	ev := AppRunStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppRunStatus: valid values are %v", v, AllowedAppRunStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppRunStatus) IsValid() bool {
	for _, existing := range AllowedAppRunStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppRunStatus value
func (v AppRunStatus) Ptr() *AppRunStatus {
	return &v
}

type NullableAppRunStatus struct {
	value *AppRunStatus
	isSet bool
}

func (v NullableAppRunStatus) Get() *AppRunStatus {
	return v.value
}

func (v *NullableAppRunStatus) Set(val *AppRunStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAppRunStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAppRunStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppRunStatus(val *AppRunStatus) *NullableAppRunStatus {
	return &NullableAppRunStatus{value: val, isSet: true}
}

func (v NullableAppRunStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppRunStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

