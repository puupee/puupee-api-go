/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
)

// EntityExtensionDto struct for EntityExtensionDto
type EntityExtensionDto struct {
	Properties *map[string]ExtensionPropertyDto `json:"properties,omitempty"`
	Configuration map[string]map[string]interface{} `json:"configuration,omitempty"`
}

// NewEntityExtensionDto instantiates a new EntityExtensionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityExtensionDto() *EntityExtensionDto {
	this := EntityExtensionDto{}
	return &this
}

// NewEntityExtensionDtoWithDefaults instantiates a new EntityExtensionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityExtensionDtoWithDefaults() *EntityExtensionDto {
	this := EntityExtensionDto{}
	return &this
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *EntityExtensionDto) GetProperties() map[string]ExtensionPropertyDto {
	if o == nil || isNil(o.Properties) {
		var ret map[string]ExtensionPropertyDto
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityExtensionDto) GetPropertiesOk() (*map[string]ExtensionPropertyDto, bool) {
	if o == nil || isNil(o.Properties) {
    return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *EntityExtensionDto) HasProperties() bool {
	if o != nil && !isNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]ExtensionPropertyDto and assigns it to the Properties field.
func (o *EntityExtensionDto) SetProperties(v map[string]ExtensionPropertyDto) {
	o.Properties = &v
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *EntityExtensionDto) GetConfiguration() map[string]map[string]interface{} {
	if o == nil || isNil(o.Configuration) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityExtensionDto) GetConfigurationOk() (map[string]map[string]interface{}, bool) {
	if o == nil || isNil(o.Configuration) {
    return map[string]map[string]interface{}{}, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *EntityExtensionDto) HasConfiguration() bool {
	if o != nil && !isNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given map[string]map[string]interface{} and assigns it to the Configuration field.
func (o *EntityExtensionDto) SetConfiguration(v map[string]map[string]interface{}) {
	o.Configuration = v
}

func (o EntityExtensionDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !isNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	return json.Marshal(toSerialize)
}

type NullableEntityExtensionDto struct {
	value *EntityExtensionDto
	isSet bool
}

func (v NullableEntityExtensionDto) Get() *EntityExtensionDto {
	return v.value
}

func (v *NullableEntityExtensionDto) Set(val *EntityExtensionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityExtensionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityExtensionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityExtensionDto(val *EntityExtensionDto) *NullableEntityExtensionDto {
	return &NullableEntityExtensionDto{value: val, isSet: true}
}

func (v NullableEntityExtensionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityExtensionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


