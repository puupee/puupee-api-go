/*
Puupee API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.17.12
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package puupee

import (
	"encoding/json"
	"fmt"
)

// SubscriptionOrderStatus 订阅订单状态
type SubscriptionOrderStatus string

// List of SubscriptionOrderStatus
const (
	SUBSCRIPTIONORDERSTATUS_WAITING SubscriptionOrderStatus = "Waiting"
	SUBSCRIPTIONORDERSTATUS_OVERTIME SubscriptionOrderStatus = "Overtime"
	SUBSCRIPTIONORDERSTATUS_FINISHED SubscriptionOrderStatus = "Finished"
)

// All allowed values of SubscriptionOrderStatus enum
var AllowedSubscriptionOrderStatusEnumValues = []SubscriptionOrderStatus{
	"Waiting",
	"Overtime",
	"Finished",
}

func (v *SubscriptionOrderStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionOrderStatus(value)
	for _, existing := range AllowedSubscriptionOrderStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionOrderStatus", value)
}

// NewSubscriptionOrderStatusFromValue returns a pointer to a valid SubscriptionOrderStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionOrderStatusFromValue(v string) (*SubscriptionOrderStatus, error) {
	ev := SubscriptionOrderStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionOrderStatus: valid values are %v", v, AllowedSubscriptionOrderStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionOrderStatus) IsValid() bool {
	for _, existing := range AllowedSubscriptionOrderStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionOrderStatus value
func (v SubscriptionOrderStatus) Ptr() *SubscriptionOrderStatus {
	return &v
}

type NullableSubscriptionOrderStatus struct {
	value *SubscriptionOrderStatus
	isSet bool
}

func (v NullableSubscriptionOrderStatus) Get() *SubscriptionOrderStatus {
	return v.value
}

func (v *NullableSubscriptionOrderStatus) Set(val *SubscriptionOrderStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionOrderStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionOrderStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionOrderStatus(val *SubscriptionOrderStatus) *NullableSubscriptionOrderStatus {
	return &NullableSubscriptionOrderStatus{value: val, isSet: true}
}

func (v NullableSubscriptionOrderStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionOrderStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

